From ea25d502e1fd3b98c2728364302cbb104ed2d599 Mon Sep 17 00:00:00 2001
From: Ido Reis <idox.reis@intel.com>
Date: Mon, 5 Sep 2016 16:21:20 +0300
Subject: [PATCH 13/69] hostapd: 2040 coex

Signed-off-by: Ido Reis <idox.reis@intel.com>
---
 hostapd/config_file.c           |  20 +++++
 src/ap/ap_config.c              |   8 ++
 src/ap/ap_config.h              |   7 ++
 src/ap/drv_callbacks.c          |   1 +
 src/ap/hw_features.c            | 168 +++++++++++++++++++++++++++++++++++++++-
 src/ap/ieee802_11.c             |   1 +
 src/ap/ieee802_11.h             |   3 +
 src/ap/ieee802_11_ht.c          |  63 +++++++++++++--
 src/common/hw_features_common.c |   3 +-
 src/common/hw_features_common.h |   1 +
 src/drivers/driver_nl80211.c    |   1 +
 11 files changed, 266 insertions(+), 10 deletions(-)

diff --git a/hostapd/config_file.c b/hostapd/config_file.c
index 5b85608..f3ccce1 100644
--- a/hostapd/config_file.c
+++ b/hostapd/config_file.c
@@ -2890,6 +2890,26 @@ static int hostapd_config_fill(struct hostapd_config *conf,
 		conf->require_ht = atoi(pos);
 	} else if (os_strcmp(buf, "obss_interval") == 0) {
 		conf->obss_interval = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_passive_dwell") == 0) {
+		conf->scan_passive_dwell = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_active_dwell") == 0) {
+		conf->scan_active_dwell = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_passive_total_per_channel") == 0) {
+		conf->scan_passive_total_per_channel = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_active_total_per_channel") == 0) {
+		conf->scan_active_total_per_channel = atoi(pos);
+	} else if  (os_strcmp(buf, "channel_transition_delay_factor") == 0) {
+		conf->channel_transition_delay_factor = atoi(pos);
+	} else if  (os_strcmp(buf, "scan_activity_threshold") == 0) {
+		conf->scan_activity_threshold = atoi(pos);
+	} else if  (os_strcmp(buf, "obss_beacon_rssi_threshold") == 0) {
+		conf->obss_beacon_rssi_threshold = atoi(pos);
+		if ((conf->obss_beacon_rssi_threshold < -100)
+			|| (conf->obss_beacon_rssi_threshold > -20)) {
+			wpa_printf(MSG_ERROR, "Line %d: invalid obss_beacon_rssi_threshold",
+				   line);
+			return 1;
+		}
 #endif /* CONFIG_IEEE80211N */
 #ifdef CONFIG_IEEE80211AC
 	} else if (os_strcmp(buf, "ieee80211ac") == 0) {
diff --git a/src/ap/ap_config.c b/src/ap/ap_config.c
index d3eac7a..4c29509 100644
--- a/src/ap/ap_config.c
+++ b/src/ap/ap_config.c
@@ -175,6 +175,14 @@ struct hostapd_config * hostapd_config_defaults(void)
 
 	conf->ht_capab = HT_CAP_INFO_SMPS_DISABLED;
 
+	conf->scan_passive_dwell = 20;
+	conf->scan_active_dwell = 10;
+	conf->scan_passive_total_per_channel = 200;
+	conf->scan_active_total_per_channel = 20;
+	conf->channel_transition_delay_factor = 5;
+	conf->scan_activity_threshold = 25;
+	conf->obss_beacon_rssi_threshold = -60;
+
 	conf->ap_table_max_size = 255;
 	conf->ap_table_expiration_time = 60;
 	conf->track_sta_max_age = 180;
diff --git a/src/ap/ap_config.h b/src/ap/ap_config.h
index 07021ae..4e5540a 100644
--- a/src/ap/ap_config.h
+++ b/src/ap/ap_config.h
@@ -666,6 +666,13 @@ struct hostapd_config {
 	int no_pri_sec_switch;
 	int require_ht;
 	int obss_interval;
+	u16 scan_passive_dwell;
+	u16 scan_active_dwell;
+	u16 scan_passive_total_per_channel;
+	u16 scan_active_total_per_channel;
+	u16 channel_transition_delay_factor;
+	u16 scan_activity_threshold;
+	int obss_beacon_rssi_threshold;
 	u32 vht_capab;
 	int ieee80211ac;
 	int require_vht;
diff --git a/src/ap/drv_callbacks.c b/src/ap/drv_callbacks.c
index 896f9e3..eb35b5d 100644
--- a/src/ap/drv_callbacks.c
+++ b/src/ap/drv_callbacks.c
@@ -894,6 +894,7 @@ static int hostapd_mgmt_rx(struct hostapd_data *hapd, struct rx_mgmt *rx_mgmt)
 	fi.datarate = rx_mgmt->datarate;
 	fi.ssi_signal = rx_mgmt->ssi_signal;
 
+
 	if (hapd == HAPD_BROADCAST) {
 		size_t i;
 
diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 16887ac..8284281 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -248,6 +248,82 @@ static void ieee80211n_switch_pri_sec(struct hostapd_iface *iface)
 	}
 }
 
+static int ap_check_40mhz_5g(struct hostapd_iface *iface,
+		   struct wpa_scan_results *scan_res, int pri_chan,
+		   int sec_chan)
+{
+	int pri_freq, sec_freq, pri_bss, sec_bss;
+	int bss_pri_chan, bss_sec_chan;
+	size_t i;
+	int match;
+	struct hostapd_hw_modes *mode = iface->current_mode;
+
+	if (!mode || !scan_res || !pri_chan || !sec_chan ||
+	    pri_chan == sec_chan)
+		return 0;
+
+	pri_freq = hw_get_freq(mode, pri_chan);
+	sec_freq = hw_get_freq(mode, sec_chan);
+
+	/*
+	 * Switch PRI/SEC channels if Beacons were detected on selected SEC
+	 * channel, but not on selected PRI channel.
+	 */
+	pri_bss = sec_bss = 0;
+	for (i = 0; i < scan_res->num; i++) {
+		struct wpa_scan_res *bss = scan_res->res[i];
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
+		if (bss->freq == pri_freq)
+			pri_bss++;
+		else if (bss->freq == sec_freq)
+			sec_bss++;
+	}
+	if (sec_bss && !pri_bss) {
+		wpa_printf(MSG_INFO,
+			   "Switch own primary and secondary channel to get secondary channel with no Beacons from other BSSes");
+		return 2;
+	}
+
+	/*
+	 * Match PRI/SEC channel with any existing HT40 BSS on the same
+	 * channels that we are about to use (if already mixed order in
+	 * existing BSSes, use own preference).
+	 */
+	match = 0;
+	for (i = 0; i < scan_res->num; i++) {
+		struct wpa_scan_res *bss = scan_res->res[i];
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
+		get_pri_sec_chan(bss, &bss_pri_chan, &bss_sec_chan);
+		if (pri_chan == bss_pri_chan &&
+		    sec_chan == bss_sec_chan) {
+			match = 1;
+			break;
+		}
+	}
+	if (!match) {
+		for (i = 0; i < scan_res->num; i++) {
+			struct wpa_scan_res *bss = scan_res->res[i];
+			/* skip bss if it's signal level too low */
+			if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+				continue;
+			get_pri_sec_chan(bss, &bss_pri_chan, &bss_sec_chan);
+			if (pri_chan == bss_sec_chan &&
+			    sec_chan == bss_pri_chan) {
+				wpa_printf(MSG_INFO, "Switch own primary and "
+					   "secondary channel due to BSS "
+					   "overlap with " MACSTR,
+					   MAC2STR(bss->bssid));
+				return 2;
+			}
+		}
+	}
+
+	return 1;
+}
 
 static int ieee80211n_check_40mhz_5g(struct hostapd_iface *iface,
 				     struct wpa_scan_results *scan_res)
@@ -258,7 +334,7 @@ static int ieee80211n_check_40mhz_5g(struct hostapd_iface *iface,
 	pri_chan = iface->conf->channel;
 	sec_chan = pri_chan + iface->conf->secondary_channel * 4;
 
-	res = check_40mhz_5g(iface->current_mode, scan_res, pri_chan, sec_chan);
+	res = ap_check_40mhz_5g(iface, scan_res, pri_chan, sec_chan);
 
 	if (res == 2) {
 		if (iface->conf->no_pri_sec_switch) {
@@ -272,6 +348,94 @@ static int ieee80211n_check_40mhz_5g(struct hostapd_iface *iface,
 	return !!res;
 }
 
+static int ap_check_40mhz_2g4(struct hostapd_iface *iface,
+		    struct wpa_scan_results *scan_res, int pri_chan,
+		    int sec_chan)
+{
+	int pri_freq, sec_freq;
+	int affected_start, affected_end;
+	size_t i;
+	struct hostapd_hw_modes *mode = iface->current_mode;
+
+	if (!mode || !scan_res || !pri_chan || !sec_chan ||
+	    pri_chan == sec_chan)
+		return 0;
+
+	pri_freq = hw_get_freq(mode, pri_chan);
+	sec_freq = hw_get_freq(mode, sec_chan);
+
+	affected_start = (pri_freq + sec_freq) / 2 - 25;
+	affected_end = (pri_freq + sec_freq) / 2 + 25;
+	wpa_printf(MSG_DEBUG, "40 MHz affected channel range: [%d,%d] MHz",
+		   affected_start, affected_end);
+	for (i = 0; i < scan_res->num; i++) {
+		struct wpa_scan_res *bss = scan_res->res[i];
+		int pri = bss->freq;
+		int sec = pri;
+		struct ieee802_11_elems elems;
+
+		/* skip bss if it's signal level too low */
+		if (iface->conf->obss_beacon_rssi_threshold > bss->level)
+			continue;
+
+		/* Check for overlapping 20 MHz BSS */
+		if (check_20mhz_bss(bss, pri_freq, affected_start,
+				    affected_end)) {
+			wpa_printf(MSG_DEBUG,
+				   "Overlapping 20 MHz BSS is found");
+			return 0;
+		}
+
+		get_pri_sec_chan(bss, &pri_chan, &sec_chan);
+
+		if (sec_chan) {
+			if (sec_chan < pri_chan)
+				sec = pri - 20;
+			else
+				sec = pri + 20;
+		}
+
+		if ((pri < affected_start || pri > affected_end) &&
+		    (sec < affected_start || sec > affected_end))
+			continue; /* not within affected channel range */
+
+		wpa_printf(MSG_DEBUG, "Neighboring BSS: " MACSTR
+			   " freq=%d pri=%d sec=%d",
+			   MAC2STR(bss->bssid), bss->freq, pri_chan, sec_chan);
+
+		if (sec_chan) {
+			if (pri_freq != pri || sec_freq != sec) {
+				wpa_printf(MSG_DEBUG,
+					   "40 MHz pri/sec mismatch with BSS "
+					   MACSTR
+					   " <%d,%d> (chan=%d%c) vs. <%d,%d>",
+					   MAC2STR(bss->bssid),
+					   pri, sec, pri_chan,
+					   sec > pri ? '+' : '-',
+					   pri_freq, sec_freq);
+				return 0;
+			}
+		}
+
+		ieee802_11_parse_elems((u8 *) (bss + 1), bss->ie_len, &elems,
+				       0);
+		if (elems.ht_capabilities) {
+			struct ieee80211_ht_capabilities *ht_cap =
+				(struct ieee80211_ht_capabilities *)
+				elems.ht_capabilities;
+
+			if (le_to_host16(ht_cap->ht_capabilities_info) &
+			    HT_CAP_INFO_40MHZ_INTOLERANT) {
+				wpa_printf(MSG_DEBUG,
+					   "40 MHz Intolerant is set on channel %d in BSS "
+					   MACSTR, pri, MAC2STR(bss->bssid));
+				return 0;
+			}
+		}
+	}
+
+	return 1;
+}
 
 static int ieee80211n_check_40mhz_2g4(struct hostapd_iface *iface,
 				      struct wpa_scan_results *scan_res)
@@ -281,7 +445,7 @@ static int ieee80211n_check_40mhz_2g4(struct hostapd_iface *iface,
 	pri_chan = iface->conf->channel;
 	sec_chan = pri_chan + iface->conf->secondary_channel * 4;
 
-	return check_40mhz_2g4(iface->current_mode, scan_res, pri_chan,
+	return ap_check_40mhz_2g4(iface, scan_res, pri_chan,
 			       sec_chan);
 }
 
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index f48b83a..48fa5ae 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -2448,6 +2448,7 @@ static void handle_beacon(struct hostapd_data *hapd,
 					     sizeof(mgmt->u.beacon)), &elems,
 				      0);
 
+	hostapd_obss_beacon(hapd, mgmt, &elems, fi->ssi_signal);
 	ap_list_process_beacon(hapd->iface, mgmt, &elems, fi);
 }
 
diff --git a/src/ap/ieee802_11.h b/src/ap/ieee802_11.h
index 71b3b49..d6279cb 100644
--- a/src/ap/ieee802_11.h
+++ b/src/ap/ieee802_11.h
@@ -16,6 +16,7 @@ struct hostapd_frame_info;
 struct ieee80211_ht_capabilities;
 struct ieee80211_vht_capabilities;
 struct ieee80211_mgmt;
+struct ieee802_11_elems;
 
 int ieee802_11_mgmt(struct hostapd_data *hapd, const u8 *buf, size_t len,
 		    struct hostapd_frame_info *fi);
@@ -23,6 +24,8 @@ void ieee802_11_mgmt_cb(struct hostapd_data *hapd, const u8 *buf, size_t len,
 			u16 stype, int ok);
 void hostapd_2040_coex_action(struct hostapd_data *hapd,
 			      const struct ieee80211_mgmt *mgmt, size_t len);
+void hostapd_obss_beacon(struct hostapd_data *hapd, const struct ieee80211_mgmt *mgmt,
+				         struct ieee802_11_elems *elems, int rssi_level);
 #ifdef NEED_AP_MLME
 int ieee802_11_get_mib(struct hostapd_data *hapd, char *buf, size_t buflen);
 int ieee802_11_get_mib_sta(struct hostapd_data *hapd, struct sta_info *sta,
diff --git a/src/ap/ieee802_11_ht.c b/src/ap/ieee802_11_ht.c
index 5eb1060..4bb827e 100644
--- a/src/ap/ieee802_11_ht.c
+++ b/src/ap/ieee802_11_ht.c
@@ -60,17 +60,17 @@ u8 * hostapd_eid_ht_capabilities(struct hostapd_data *hapd, u8 *eid)
 		/* Fill in default values for remaining parameters
 		 * (IEEE Std 802.11-2012, 8.4.2.61 and MIB defval) */
 		scan_params->scan_passive_dwell =
-			host_to_le16(20);
+			host_to_le16(hapd->iconf->scan_passive_dwell);
 		scan_params->scan_active_dwell =
-			host_to_le16(10);
+			host_to_le16(hapd->iconf->scan_active_dwell);
 		scan_params->scan_passive_total_per_channel =
-			host_to_le16(200);
+			host_to_le16(hapd->iconf->scan_passive_total_per_channel);
 		scan_params->scan_active_total_per_channel =
-			host_to_le16(20);
+			host_to_le16(hapd->iconf->scan_active_total_per_channel);
 		scan_params->channel_transition_delay_factor =
-			host_to_le16(5);
+			host_to_le16(hapd->iconf->channel_transition_delay_factor);
 		scan_params->scan_activity_threshold =
-			host_to_le16(25);
+			host_to_le16(hapd->iconf->scan_activity_threshold);
 
 		pos += sizeof(*scan_params);
 	}
@@ -331,6 +331,57 @@ void hostapd_2040_coex_action(struct hostapd_data *hapd,
 	}
 }
 
+static void hostapd_switch_to_20mhz(struct hostapd_data *hapd,
+			        struct hostapd_iface *iface, const struct ieee80211_mgmt *mgmt, int signal)
+{
+	if (iface->drv_flags & WPA_DRIVER_FLAGS_HT_2040_COEX) {
+		if (iface->conf->secondary_channel) {
+			hostapd_logger(hapd, mgmt->sa,
+				       HOSTAPD_MODULE_IEEE80211,
+				       HOSTAPD_LEVEL_INFO,
+				       "Switching to 20 MHz operation due to OBSS beacon reception at rssi %d", signal);
+			iface->conf->secondary_channel = 0;
+			ieee802_11_set_beacons(iface);
+		}
+		if (!iface->num_sta_ht40_intolerant) {
+			unsigned int delay_time;
+			delay_time = OVERLAPPING_BSS_TRANS_DELAY_FACTOR *
+				iface->conf->obss_interval;
+			eloop_cancel_timeout(ap_ht2040_timeout, hapd->iface,
+					     NULL);
+			eloop_register_timeout(delay_time, 0, ap_ht2040_timeout,
+					       hapd->iface, NULL);
+		}
+	}
+}
+
+void hostapd_obss_beacon(struct hostapd_data *hapd,
+						 const struct ieee80211_mgmt *mgmt,
+						 struct ieee802_11_elems *elems,
+						 int rssi_level)
+{
+	struct hostapd_iface *iface = hapd->iface;
+
+	if (!(iface->conf->ht_capab & HT_CAP_INFO_SUPP_CHANNEL_WIDTH_SET))
+		return;
+	if (!iface->conf->obss_interval)
+		return;
+	if (iface->conf->obss_beacon_rssi_threshold > rssi_level)
+		return;
+
+	if (elems->ht_capabilities) {
+		struct ieee80211_ht_capabilities *ht_cap =
+			(struct ieee80211_ht_capabilities *)
+			elems->ht_capabilities;
+
+		if (le_to_host16(ht_cap->ht_capabilities_info) &
+		    HT_CAP_INFO_40MHZ_INTOLERANT) {
+			hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+		}
+	} else {
+		hostapd_switch_to_20mhz(hapd, iface, mgmt, rssi_level);
+	}
+}
 
 u16 copy_sta_ht_capab(struct hostapd_data *hapd, struct sta_info *sta,
 		      const u8 *ht_capab)
diff --git a/src/common/hw_features_common.c b/src/common/hw_features_common.c
index 9c37ea6..55e9157 100644
--- a/src/common/hw_features_common.c
+++ b/src/common/hw_features_common.c
@@ -235,8 +235,7 @@ int check_40mhz_5g(struct hostapd_hw_modes *mode,
 }
 
 
-static int check_20mhz_bss(struct wpa_scan_res *bss, int pri_freq, int start,
-			   int end)
+int check_20mhz_bss(struct wpa_scan_res *bss, int pri_freq, int start, int end)
 {
 	struct ieee802_11_elems elems;
 	struct ieee80211_ht_operation *oper;
diff --git a/src/common/hw_features_common.h b/src/common/hw_features_common.h
index 7360b4e..7f43d00 100644
--- a/src/common/hw_features_common.h
+++ b/src/common/hw_features_common.h
@@ -26,6 +26,7 @@ void get_pri_sec_chan(struct wpa_scan_res *bss, int *pri_chan, int *sec_chan);
 int check_40mhz_5g(struct hostapd_hw_modes *mode,
 		   struct wpa_scan_results *scan_res, int pri_chan,
 		   int sec_chan);
+int check_20mhz_bss(struct wpa_scan_res *bss, int pri_freq, int start, int end);
 int check_40mhz_2g4(struct hostapd_hw_modes *mode,
 		    struct wpa_scan_results *scan_res, int pri_chan,
 		    int sec_chan);
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index a3d3e53..dcdbc76 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -660,6 +660,7 @@ static int process_beacon_event(struct nl_msg *msg, void *arg)
 		os_memset(&event, 0, sizeof(event));
 		event.rx_mgmt.frame = nla_data(tb[NL80211_ATTR_FRAME]);
 		event.rx_mgmt.frame_len = nla_len(tb[NL80211_ATTR_FRAME]);
+		event.rx_mgmt.ssi_signal = (s32) nla_get_u32(tb[NL80211_ATTR_RX_SIGNAL_DBM]);
 		wpa_supplicant_event(drv->ctx, EVENT_RX_MGMT, &event);
 	}
 
-- 
1.8.3.4

