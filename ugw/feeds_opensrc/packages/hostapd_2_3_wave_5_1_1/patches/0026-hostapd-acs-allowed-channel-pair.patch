From 96e4fc62a1572d375b7a9cb97031cc697d83ab32 Mon Sep 17 00:00:00 2001
From: Ido Reis <idox.reis@intel.com>
Date: Mon, 5 Sep 2016 16:21:21 +0300
Subject: [PATCH 26/69] hostapd: acs allowed channel pair

Signed-off-by: Ido Reis <idox.reis@intel.com>
---
 src/ap/hw_features.c | 84 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 82 insertions(+), 2 deletions(-)

diff --git a/src/ap/hw_features.c b/src/ap/hw_features.c
index 8284281..4975de1 100644
--- a/src/ap/hw_features.c
+++ b/src/ap/hw_features.c
@@ -222,6 +222,87 @@ int hostapd_prepare_rates(struct hostapd_iface *iface,
 
 
 #ifdef CONFIG_IEEE80211N
+static int ieee80211n_is_allowed_ht40_channel(struct hostapd_iface *iface, int channel)
+{
+	struct hostapd_data *hapd = iface->bss[0];
+	int i, j;
+	u16 num_modes, flags;
+	struct hostapd_hw_modes *modes;
+
+	modes = hostapd_get_hw_feature_data(hapd, &num_modes, &flags);
+	if (modes == NULL) {
+		hostapd_logger(hapd, NULL, HOSTAPD_MODULE_IEEE80211,
+			       HOSTAPD_LEVEL_DEBUG,
+			       "Fetching hardware channel/rate support not "
+			       "supported.");
+		return 0;
+	}
+
+	for (i = 0; i < num_modes; i++) {
+		struct hostapd_hw_modes *feature = &modes[i];
+		for (j = 0; j < feature->num_channels; j++) {
+			if (feature->channels[j].flag & HOSTAPD_CHAN_DISABLED)
+				continue;
+			if (feature->channels[j].chan == channel) {
+				wpa_printf(MSG_MSGDUMP, "Allowed channel found: channel=%d", channel);
+				return 1;
+			}
+		}
+	}
+	return 0;
+}
+
+static int ap_allowed_ht40_channel_pair(struct hostapd_iface *iface, int pri_chan,
+			      int sec_chan)
+{
+	int ok, j, first;
+	struct hostapd_hw_modes *mode = iface->current_mode;
+
+	if (pri_chan == sec_chan || !sec_chan)
+		return 1; /* HT40 not used */
+
+	wpa_printf(MSG_DEBUG,
+		   "HT40: control channel: %d  secondary channel: %d",
+		   pri_chan, sec_chan);
+
+	/* Verify that HT40 secondary channel is an allowed 20 MHz
+	 * channel */
+	ok = 0;
+	for (j = 0; j < mode->num_channels; j++) {
+		struct hostapd_channel_data *chan = &mode->channels[j];
+		if (!(chan->flag & HOSTAPD_CHAN_DISABLED) &&
+		    chan->chan == sec_chan) {
+			ok = 1;
+			break;
+		}
+	}
+	if (!ok) {
+		wpa_printf(MSG_ERROR, "HT40 secondary channel %d not allowed",
+			   sec_chan);
+		return 0;
+	}
+
+	/*
+	 * Verify that HT40 primary,secondary channel pair is allowed per
+	 * IEEE 802.11n Annex J. This is only needed for 5 GHz band since
+	 * 2.4 GHz rules allow all cases where the secondary channel fits into
+	 * the list of allowed channels (already checked above).
+	 */
+	if (mode->mode != HOSTAPD_MODE_IEEE80211A)
+		return 1;
+
+	first = pri_chan < sec_chan ? pri_chan : sec_chan;
+	ok = ieee80211n_is_allowed_ht40_channel(iface, first);
+	
+	if (!ok) {
+		wpa_printf(MSG_ERROR, "HT40 channel pair (%d, %d) not allowed",
+			   pri_chan, sec_chan);
+		return 0;
+	}
+
+	return 1;
+}
+
 static int ieee80211n_allowed_ht40_channel_pair(struct hostapd_iface *iface)
 {
 	int pri_chan, sec_chan;
@@ -232,8 +313,7 @@ static int ieee80211n_allowed_ht40_channel_pair(struct hostapd_iface *iface)
 	pri_chan = iface->conf->channel;
 	sec_chan = pri_chan + iface->conf->secondary_channel * 4;
 
-	return allowed_ht40_channel_pair(iface->current_mode, pri_chan,
-					 sec_chan);
+	return ap_allowed_ht40_channel_pair(iface, pri_chan, sec_chan);
 }
 
 
-- 
1.8.3.4

