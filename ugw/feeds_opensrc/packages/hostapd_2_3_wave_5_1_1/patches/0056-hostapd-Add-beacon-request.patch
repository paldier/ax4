From b76df4312d3f072dd3b3ce4c05e0cf40a248ce2e Mon Sep 17 00:00:00 2001
From: Ido Reis <idox.reis@intel.com>
Date: Wed, 26 Oct 2016 16:31:54 +0300
Subject: [PATCH] hostapd: Add beacon request

Add beacon request via RRM.
The Beacon request/report pair enables a STA to request from another STA a
list of APs whose beacons it can receive on a specified channel or channels.
The Beacon report request/response provides a means for a requesting STA to
obtain received beacon, probe response, and measurement pilot information
from a responding STA.

The control interface command for beacon report request is:
REQ_BEACON <dst> <op_class> <channel> <rand_int> <duration> <mode> <bssid>
  [ssid=<ssid>] [rep_detail=<0-2>] [rep_cond=<0-10>,<0-255>]
  [ap_ch_report=[<channel 1>[,<channel 2>[..,<channel N>]]]
  [req_elements=[<element 1>[,<element 2>[..,<element N>]]]

valid unsolicited beacon report responses are:

for beacon report received by the STA, RRM-BEACON-REP-RECEIVED is sent to
the control interface with the following data:
RRM-BEACON-REP-RECEIVED op_class=<op_class> channel=<channel>
  start_time=<start_time> duration=<duration> frame_info=<frame_info>
  rcpi=<rcpi> rsni=<rsni> bssid=<bssid> antenna_id=<ant_id> parent_tsf=<tsf>

for timeout expiration of the beacon report, RRM_EVENT_BEACON_REP_FAILED
is sent to the control interface (no data).

arguments description:

destination address (dst):
  MAC address of an associated STA.

operating class (op_class):
  If the Wide Bandwidth Channel Switch subelement is not included,
  the Operating Class field indicates the operating class that identifies
  the channel set for which the measurement request applies. The Country,
  Operating Class, and Channel Number fields together specify the channel
  frequency and spacing for which the measurement request applies.
  the operating class value depends on the regulatory domain (1-255).
  Also, in case the Wide Bandwidth Channel Switch subelement is included,
  the operating class is disregarded.

channel:
  for operating classes that encompass a primary channel but do not identify
  the location of the primary channel, the Channel Number field value is
  either 0 or 255; otherwise, the Channel Number field value is 0,255, or
  the channel number for which the measurement request applies.

Randomization Interval (rand_int):
  Randomization Interval specifies the upper bound of the random delay to
  be used prior to making the measurement, expressed in units of TUs
  (0..65535).

duration:
  beacon report request:
  the Measurement Duration field is set to the preferred or mandatory
  duration of the requested measurement, expressed in units of TUs
  (0..65535).
  beacon report response:
  Measurement Duration is set to the duration over which the Beacon report
  was measured, expressed in units of TUs.

mode:
  Measurement Mode indicates the mode to be used for the measurement.
  valid values are: "passive", "active" or "table".

bssid:
  The BSSID field indicates the BSSID of the BSS(s) for which a beacon
  report is requested. When requesting beacon reports for all BSSs on the
  channel, the BSSID field contains the wildcard BSSID (ff:ff:ff:ff:ff:ff),
  otherwise the BSSID field contains a specific BSSID for a single BSS.

ssid:
  The SSID subelement indicates the ESS(s) or IBSS(s) for which a beacon
  report is requested. When SSID is not included in a Beacon request, the
  default wildcard SSID is used; otherwise the SSID is included in the
  Beacon request and contains a specific SSID for a single ESS or IBSS.
  The wildcard SSID is used to represent all possible SSIDs.

report detail (rep_detail):
  defines the level of detail per AP to be reported to the requesting STA.
  0: No fixed-length fields or elements.
  1: All fixed-length fields and any requested elements in the Request
     element if present.
  2: All fixed-length fields and elements (default, used when Reporting
     Detail subelement is not included in a Beacon request).

report condition (rep_cond):
  The Beacon Reporting subelement indicates the condition for issuing a
  Beacon report. The Beacon Reporting subelement is optionally present in
  a Beacon request for repeated measurements; otherwise it is not present.
  argument includ 2 values: condition (0-10), and threshold.
  For Reporting Conditions 1 and 2, the threshold value is a logarithmic
  function of the received signal power, as defined in the RCPI measurement
  subclause for the associated PHY Type. For Reporting Conditions 3 and 4,
  the threshold value is a logarithmic function of the signal-to-noise
  ratio, as described in RSNI element. For Reporting Conditions 5 to 10,
  the offset value is an 8-bit 2s complement integer in units of 0.5 dBm.

ap channel report (ap_ch_report):
  The AP Channel Report element contains a list of channels where a STA is
  likely to find an AP.
  the argument format is: ap_ch_report=<ch1>[,<ch2>..<ch N>]

request elements (req_elements):
  The Requested Element IDs are the list of elements that are requested to
  be included in the Probe Response or Information Response frame. The
  Requested Element IDs are listed in order of increasing element ID.
  the argument format is: req_elements=<e1>[,<e2>,..<e N>]

measurement start time (start_time):
  actual Measurement Start Time is set to the value of the measuring STA
  TSF timer at the time the measurement started.
  represensted as 64 bit deciaml format.

frame info (frame_info):
  Bits 0-6: Condensed PHY Type indicates the physical medium type on which
  the Beacon, Measurement Pilot, or Probe Response frame being reported was
  received. It has an integer value between 0 and 127 coded according to
  the value of the PHY type.
  Bit 7: Reported Frame Type indicates the type of frame reported. A value
  of 0 indicates a Beacon or Probe Response frame; a value of 1 indicates a
  Measurement Pilot frame.

rcpi:
  RCPI indicates the received channel power of the Beacon, Measurement
  Pilot, or Probe Response frame, which is a logarithmic function of the
  received signal power, as defined in the RCPI measurement subclause for
  the indicated PHY Type.
  represensted as 8 bit hex format.

rsni:
  RSNI indicates the received signal-to-noise indication for the Beacon,
  Measurement Pilot, or Probe Response frame.
  represensted as 8 bit hex format.

antenna id (antenna_id):
  The Antenna ID field contains the identifying number for the antenna(s)
  used for this measurement.
  represensted as 8 bit hex format.

parent tsf (parent_tsf):
  The Parent TSF field contains the lower 4 octets of the measuring STA
  TSF timer value at the start of reception of the first octet of the
  timestamp field of the reported Beacon, Measurement Pilot, or Probe
  Response frame at the time the Beacon, Measurement Pilot, or Probe
  Response frame being reported was received.
  represensted as 32 bit hex format.

Signed-off-by: Ido Reis <idox.reis@intel.com>
---
 hostapd/ctrl_iface.c         | 221 +++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c        |  13 +++
 src/ap/hostapd.h             |   2 +
 src/ap/rrm.c                 | 209 ++++++++++++++++++++++++++++++++++++++++
 src/ap/rrm.h                 |   6 ++
 src/common/ieee802_11_defs.h |   4 +
 src/common/wpa_ctrl.h        |   3 +
 7 files changed, 458 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index b3d704a..c054c19 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -2167,6 +2167,224 @@ static int hostapd_ctrl_iface_req_range(struct hostapd_data *hapd, char *cmd)
 }
 
 
+static int hostapd_ctrl_iface_req_beacon(struct hostapd_data *hapd, char *cmd)
+{
+	u8 addr[ETH_ALEN], bssid[ETH_ALEN];
+	char *token, *context = NULL;
+	char *pos, *cmd_end;
+	int op_class, channel, random_interval, mode, measurement_duration;
+	struct wpa_ssid_value ssid, *ssid_p = NULL;
+
+	u8 rep_cond, rep_cond_threshold;
+	u8* rep_cond_p = NULL, *rep_cond_threshold_p = NULL;
+	u8 rep_detail;
+	u8* rep_detail_p = NULL;
+	u8 ap_ch_rep[255];
+	u8* ap_ch_rep_p = NULL;
+	unsigned int ap_ch_rep_len = 0;
+	u8 req_elem[255];
+	u8* req_elem_p = NULL;
+	unsigned int req_elem_len = 0;
+
+	cmd_end = cmd + strlen(cmd);
+
+	token = str_token(cmd, " ", &context);
+	if (!token || hwaddr_aton(token, addr)) {
+		wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - Bad destination address");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - operating class is missing");
+		return -1;
+	}
+	op_class = atoi(token);
+	if (op_class < 0 || op_class > 255) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - operation class is out of range");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token) {
+		wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - channel is missing");
+		return -1;
+	}
+	channel = atoi(token);
+	if (channel < 0 || channel > 255) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - channel value is out of range");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - random interval is missing");
+		return -1;
+	}
+	random_interval = atoi(token);
+	if (random_interval < 0 || random_interval > 0xffff) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - random interval out of range");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REQ_BEACON - measurement duration is missing");
+		return -1;
+	}
+	measurement_duration = atoi(token);
+	if (measurement_duration < 0 || measurement_duration > 0xffff) {
+		wpa_printf(MSG_ERROR,
+				"CTRL: REQ_BEACON - measurement duration out of range");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token) {
+		wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - mode is missing");
+		return -1;
+	}
+	if (!os_strcmp(token, "passive")) {
+		mode = 0;
+	} else if (!os_strcmp(token, "active")) {
+		mode = 1;
+	} else if (!os_strcmp(token, "table")) {
+		mode = 2;
+	} else {
+		wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - mode is invalid");
+		return -1;
+	}
+
+	token = str_token(cmd, " ", &context);
+	if (!token || hwaddr_aton(token, bssid)) {
+		wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - bad BSSID address");
+		return -1;
+	}
+
+	/* optional tokens */
+	token = token + strlen(token) + 1;
+	if (token >= cmd_end) {
+		// we've reached the end of command (no optinal arguments)
+		goto exit;
+	}
+
+	pos = os_strstr(token, "ssid=");
+	if (pos) {
+		pos += 5;
+		if (ssid_parse(pos, &ssid)) {
+			wpa_printf(MSG_ERROR, "CTRL: REQ_BEACON - bad SSID");
+			return -1;
+		}
+		ssid_p = &ssid;
+	}
+
+	pos = os_strstr(token, "rep_cond=");
+	if (pos) {
+		int cond, threshold;
+		char *end, *comma;
+		pos += 9;
+		end = os_strchr(pos, ' ');
+		if (!end) {
+			end = pos + os_strlen(pos);
+		}
+		comma = os_strchr(pos, ',');
+		if (!comma || comma == pos || comma >= end) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: REQ_BEACON - report condition format is invalid");
+			return -1;
+		}
+		cond = atoi(pos);
+		if (cond < 0 || cond > 10) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: REQ_BEACON - report condition is invalid");
+			return -1;
+		}
+		threshold = atoi(comma);
+		if (threshold < 0 || threshold > 255) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: REQ_BEACON - report condition threshold is invalid");
+			return -1;
+		}
+		rep_cond = (u8) cond;
+		rep_cond_p = &rep_cond;
+		rep_cond_threshold = (u8) threshold;
+		rep_cond_threshold_p = &rep_cond_threshold;
+	}
+
+	pos = os_strstr(token, "rep_detail=");
+	if (pos) {
+		pos += 11;
+		if ((pos[1] != ' ' && pos[1] != '\0') ||
+			(pos[0] != '0' && pos[0] != '1' && pos[0] != '2')) {
+			wpa_printf(MSG_ERROR,
+					"CTRL: REQ_BEACON - report detail value is invalid");
+			return -1;
+		}
+		rep_detail = *pos - '0';
+		rep_detail_p = &rep_detail;
+	}
+
+	pos = os_strstr(token, "ap_ch_report=");
+	if (pos) {
+		int ch;
+		char *end;
+		pos += 13;
+		ap_ch_rep_len = 0;
+		end = os_strchr(pos, ' ');
+		if (!end) {
+			end = pos + os_strlen(pos);
+		}
+		while (pos && pos < end) {
+			ch = atoi(pos);
+			ap_ch_rep[ap_ch_rep_len++] = ch;
+			pos = os_strchr(pos, ',');
+			if (pos)
+				pos++;
+		}
+		if (ap_ch_rep_len) {
+			ap_ch_rep_p = ap_ch_rep;
+		} else {
+			wpa_printf(MSG_ERROR,
+					"CTRL: REQ_BEACON - ap channel report invalid values");
+			return -1;
+		}
+	}
+
+	pos = os_strstr(token, "req_elements=");
+	if (pos) {
+		int elem;
+		char* end;
+		pos += 13;
+		req_elem_len = 0;
+		end = os_strchr(pos, ' ');
+		if (!end) {
+			end = pos + os_strlen(pos);
+		}
+		while (pos && pos < end) {
+			elem = atoi(pos);
+			req_elem[req_elem_len++] = elem;
+			pos = os_strchr(pos, ',');
+			if (pos)
+				pos++;
+		}
+		if (req_elem_len) {
+			req_elem_p = req_elem;
+		}
+	}
+exit:
+	return hostapd_send_beacon_req(hapd, addr, op_class, channel,
+			random_interval, measurement_duration, mode, bssid, ssid_p,
+			rep_cond_p, rep_cond_threshold_p,rep_detail_p, ap_ch_rep_p,
+			ap_ch_rep_len, req_elem_p, req_elem_len);
+}
+
+
 static int hostapd_ctrl_iface_set_neighbor(struct hostapd_data *hapd, char *buf)
 {
 	struct wpa_ssid_value ssid;
@@ -2996,6 +3214,9 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "REQ_RANGE ", 10) == 0) {
 		if (hostapd_ctrl_iface_req_range(hapd, buf + 10))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "REQ_BEACON ", 11) == 0) {
+		if (hostapd_ctrl_iface_req_beacon(hapd, buf + 11))
+			reply_len = -1;
 	} else if (os_strcmp(buf, "DRIVER_FLAGS") == 0) {
 		reply_len = hostapd_ctrl_driver_flags(hapd->iface, reply,
 						      reply_size);
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index 124c1b8..44505a0 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1271,6 +1271,18 @@ static int hostapd_cli_cmd_req_range(struct wpa_ctrl *ctrl, int argc,
 }
 
 
+static int hostapd_cli_cmd_req_beacon(struct wpa_ctrl *ctrl, int argc,
+	     char *argv[])
+{
+	if (argc < 7) {
+		printf("Invalid req_beacon command: needs at least 7 arguments: - dest address, operating class, channel, random interval, measurement duration, mode, bssid, + some optianl arguments\n");
+		return -1;
+	}
+
+	return hostapd_cli_cmd(ctrl, "REQ_BEACON", 7, argc, argv);
+}
+
+
 static int hostapd_cli_cmd_driver_flags(struct wpa_ctrl *ctrl, int argc,
 					char *argv[])
 {
@@ -1606,6 +1618,7 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "remove_neighbor", hostapd_cli_cmd_remove_neighbor, NULL, NULL },
 	{ "req_lci", hostapd_cli_cmd_req_lci, NULL, NULL },
 	{ "req_range", hostapd_cli_cmd_req_range, NULL, NULL },
+	{ "req_beacon", hostapd_cli_cmd_req_beacon, NULL, NULL },
 	{ "driver_flags", hostapd_cli_cmd_driver_flags, NULL, NULL },
 	{ "deny_mac", hostapd_cli_cmd_deny_mac, NULL,
 	  "<addr> <[0]/1> 0-add;1-remove station to/from blacklist" },
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 8a0e8e8..c67f758 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -302,8 +302,10 @@ struct hostapd_data {
 
 	u8 lci_req_token;
 	u8 range_req_token;
+	u8 beacon_req_token;
 	unsigned int lci_req_active:1;
 	unsigned int range_req_active:1;
+	unsigned int beacon_req_active:1;
 };
 
 
diff --git a/src/ap/rrm.c b/src/ap/rrm.c
index 3569f95..67138d8 100644
--- a/src/ap/rrm.c
+++ b/src/ap/rrm.c
@@ -16,6 +16,9 @@
 #include "eloop.h"
 #include "neighbor_db.h"
 #include "rrm.h"
+#include "wpa_debug.h"
+#include "common/wpa_ctrl.h"
+#include "utils/common.h"
 
 #define HOSTAPD_RRM_REQUEST_TIMEOUT 5
 
@@ -69,6 +72,56 @@ static void hostapd_handle_range_report(struct hostapd_data *hapd, u8 token,
 }
 
 
+static void hostapd_beacon_rep_timeout_handler(void *eloop_data, void *user_ctx)
+{
+	struct hostapd_data *hapd = eloop_data;
+
+	wpa_printf(MSG_DEBUG, "RRM: beacon request (token %u) timed out",
+			hapd->beacon_req_token);
+	hapd->beacon_req_active = 0;
+	wpa_msg(hapd->msg_ctx, MSG_INFO, RRM_EVENT_BEACON_REP_FAILED);
+}
+
+
+static void hostapd_handle_beacon_report(struct hostapd_data *hapd, u8 token,
+					const u8 *pos, size_t len)
+{
+	u8 op_class, channel, frame_info, rcpi, rsni, ant_id;
+	u16 measurement_duration;
+	u32 parent_tsf;
+	unsigned long long start_time;
+	u8 bssid[ETH_ALEN];
+
+	if (!hapd->beacon_req_active || hapd->beacon_req_token != token) {
+		wpa_printf(MSG_DEBUG, "Unexpected beacon report, token %u",
+			   token);
+		return;
+	}
+
+	wpa_printf(MSG_DEBUG, "Beacon report token %u len %zu",	token, len);
+
+	hapd->beacon_req_active = 0;
+	eloop_cancel_timeout(hostapd_beacon_rep_timeout_handler, hapd, NULL);
+
+	op_class = pos[0];
+	channel = pos[1];
+	//not sure if its BE or LE
+	start_time = WPA_GET_BE64(&pos[2]);
+	measurement_duration = WPA_GET_BE16(&pos[10]);
+	frame_info = pos[12];
+	rcpi = pos[13];
+	rsni = pos[14];
+	os_memcpy(bssid, &pos[15], ETH_ALEN);
+	ant_id = pos[21];
+	parent_tsf = WPA_GET_BE32(&pos[22]);
+
+	wpa_msg(hapd->msg_ctx, MSG_INFO,
+			RRM_EVENT_BEACON_REP_RXED "op_class=%d channel=%d start_time=%llu duration=%d frame_info=%02x rcpi=%02x rsni=%02x bssid=" MACSTR " antenna_id=%02x parent_tsf=%08x",
+			op_class, channel, start_time, measurement_duration, frame_info,
+			rcpi, rsni, MAC2STR(bssid), ant_id, parent_tsf);
+}
+
+
 static void hostapd_handle_radio_msmt_report(struct hostapd_data *hapd,
 					     const u8 *buf, size_t len)
 {
@@ -95,6 +148,9 @@ static void hostapd_handle_radio_msmt_report(struct hostapd_data *hapd,
 		case MEASURE_TYPE_FTM_RANGE:
 			hostapd_handle_range_report(hapd, token, ie + 2, ie[1]);
 			break;
+		case MEASURE_TYPE_BEACON:
+			hostapd_handle_beacon_report(hapd, token, ie + 2, ie[1]);
+			break;
 		default:
 			wpa_printf(MSG_DEBUG,
 				   "Measurement report type %u is not supported",
@@ -533,6 +589,157 @@ int hostapd_send_range_req(struct hostapd_data *hapd, const u8 *addr,
 	return 0;
 }
 
+int hostapd_send_beacon_req(struct hostapd_data *hapd, const u8 *addr,
+		u8 oper_class, u8 channel, u16 random_interval,
+		u16 measurement_duration, u8 mode, const u8* bssid,
+		struct wpa_ssid_value* ssid, u8* rep_cond, u8* rep_cond_threshold,
+		u8* rep_detail,	const u8* ap_ch_rep, unsigned int ap_ch_rep_len,
+		const u8* req_elem, unsigned int req_elem_len)
+{
+	struct wpabuf *buf;
+	struct sta_info *sta;
+	u8 *len;
+	int ret;
+	const u8 wildcard_bssid[ETH_ALEN] = {
+		0xff, 0xff, 0xff, 0xff, 0xff, 0xff
+	};
+
+	wpa_printf(MSG_DEBUG, "Request beacon: dest addr: " MACSTR ", mode: %d",
+			MAC2STR(addr), mode);
+
+	sta = ap_get_sta(hapd, addr);
+	if (!sta || !(sta->flags & WLAN_STA_AUTHORIZED)) {
+		wpa_printf(MSG_ERROR,
+			   "Request beacon: Destination address is not connected");
+		return -1;
+	}
+
+	if ((mode == 0 &&
+		!(sta->rrm_enabled_capa[0] & WLAN_RRM_CAPS_BEACON_PASSIVE_MEASUREMENT))
+		|| (mode == 1 &&
+		!(sta->rrm_enabled_capa[0] & WLAN_RRM_CAPS_BEACON_ACTIVE_MEASUREMENT))
+		|| (mode == 2 &&
+		!(sta->rrm_enabled_capa[0] & WLAN_RRM_CAPS_BEACON_TABLE_MEASUREMENT)))
+	{
+		wpa_printf(MSG_ERROR,
+			   "Request beacon: Destination station does not support BEACON report (mode %d) in RRM",
+			   mode);
+		return -1;
+	}
+
+	if (channel == 255 && !ap_ch_rep) {
+		wpa_printf(MSG_ERROR,
+			   "Request beacon: channel set to 255, but no ap channel report data provided");
+		return -1;
+	}
+
+	if (hapd->beacon_req_active) {
+		wpa_printf(MSG_DEBUG,
+			   "Request range: Beacon request is already in process; overriding");
+		hapd->beacon_req_active = 0;
+		eloop_register_timeout(HOSTAPD_RRM_REQUEST_TIMEOUT, 0,
+				       hostapd_beacon_rep_timeout_handler, hapd,
+				       NULL);
+	}
+
+	/* Measurement request (5) + Measurement element with beacon (18) + optional sub-elements (255)*/
+	buf = wpabuf_alloc(5 + 18 + 255);
+	if (!buf)
+		return -1;
+
+	hapd->beacon_req_token++;
+	if (!hapd->beacon_req_token) /* For wraparounds */
+		hapd->beacon_req_token++;
+
+	/* IEEE P802.11-REVmc/D5.0, 9.6.7.2 */
+	wpabuf_put_u8(buf, WLAN_ACTION_RADIO_MEASUREMENT);
+	wpabuf_put_u8(buf, WLAN_RRM_RADIO_MEASUREMENT_REQUEST);
+	wpabuf_put_u8(buf, hapd->beacon_req_token); /* Dialog Token */
+	wpabuf_put_le16(buf, 0); /* Number of Repetitions */
+
+	/* IEEE P802.11-REVmc/D5.0, 9.4.2.21 */
+	wpabuf_put_u8(buf, WLAN_EID_MEASURE_REQUEST);
+	len = wpabuf_put(buf, 1); /* Length will be set later */
+
+	wpabuf_put_u8(buf, 1); /* Measurement Token */
+	/*
+	 * Parallel and Enable bits are 0; Duration, Request, and Report are
+	 * reserved.
+	 */
+	wpabuf_put_u8(buf, 0); /* Measurement Request Mode */
+	wpabuf_put_u8(buf, MEASURE_TYPE_BEACON); /* Measurement Type */
+
+	/* IEEE P802.11-REVmc/D4.0, 8.4.2.20.7 */
+	wpabuf_put_u8(buf, oper_class /*hapd->iface->cs_oper_class*/); /* Operating class */
+	wpabuf_put_u8(buf, channel /*hapd->iface->conf->channel*/); /* Channel Number */
+	wpabuf_put_le16(buf, random_interval); /* Randomization Interval */
+	wpabuf_put_le16(buf, measurement_duration); /* Measurement Duration */
+	wpabuf_put_u8(buf, mode); /* Measurement Mode */
+	if (!bssid) {
+		// use wildcard BSSID instead of a specific BSSID
+		bssid = wildcard_bssid;
+	}
+	wpabuf_put_data(buf, bssid, ETH_ALEN);
+
+	// optional sub-elements should go here
+
+	if (ssid) {
+		wpabuf_put_u8(buf, 0); /* ssid sub element id */
+		wpabuf_put_u8(buf, ssid->ssid_len);
+		wpabuf_put_data(buf, ssid->ssid, ssid->ssid_len);
+	}
+
+	/*
+	 * Note:
+	 * The Beacon Reporting subelement indicates the condition for issuing a
+	 * Beacon report. The Beacon Reporting subelement is optionally present in
+	 * a Beacon request for repeated measurements; otherwise it is not present.
+	 * Mandatory for MBO test plan, redundant according to specifications.
+	 */
+	if (rep_cond && *rep_cond <= 10 && rep_cond_threshold) {
+		wpabuf_put_u8(buf, 1); /* beacon reporting sub element id */
+		wpabuf_put_u8(buf, 2);
+		wpabuf_put_u8(buf, *rep_cond);
+		wpabuf_put_u8(buf, *rep_cond_threshold);
+	}
+
+	if (rep_detail && (*rep_detail == 0 || *rep_detail == 1 || *rep_detail == 2)) {
+		wpabuf_put_u8(buf, 2); /* report detail sub element id */
+		wpabuf_put_u8(buf, 1);
+		wpabuf_put_u8(buf, *rep_detail);
+	}
+
+	/* in case channel is not 255, this IE is omitted */
+	if (ap_ch_rep && ap_ch_rep_len && channel == 255) {
+		wpabuf_put_u8(buf, 51); /* ap channel report sub element id*/
+		wpabuf_put_u8(buf, ap_ch_rep_len + 1);
+		wpabuf_put_u8(buf, oper_class);
+		wpabuf_put_data(buf, ap_ch_rep, ap_ch_rep_len);
+	}
+
+	if (req_elem && req_elem_len) {
+		wpabuf_put_u8(buf, 10); /* request sub element id*/
+		wpabuf_put_u8(buf, req_elem_len); /* size */
+		wpabuf_put_data(buf, req_elem, req_elem_len); /* data */
+	}
+
+	/* Action + measurement type + token + reps + EID + len = 7 */
+	*len = wpabuf_len(buf) - 7;
+
+	ret = hostapd_drv_send_action(hapd, hapd->iface->freq, 0, addr,
+				      wpabuf_head(buf), wpabuf_len(buf));
+	wpabuf_free(buf);
+	if (ret)
+		return ret;
+
+	hapd->beacon_req_active = 1;
+
+	eloop_register_timeout(HOSTAPD_RRM_REQUEST_TIMEOUT, 0,
+			       hostapd_beacon_rep_timeout_handler, hapd, NULL);
+
+	return 0;
+}
+
 
 void hostapd_clean_rrm(struct hostapd_data *hapd)
 {
@@ -541,4 +748,6 @@ void hostapd_clean_rrm(struct hostapd_data *hapd)
 	hapd->lci_req_active = 0;
 	eloop_cancel_timeout(hostapd_range_rep_timeout_handler, hapd, NULL);
 	hapd->range_req_active = 0;
+	eloop_cancel_timeout(hostapd_beacon_rep_timeout_handler, hapd, NULL);
+	hapd->beacon_req_active = 0;
 }
diff --git a/src/ap/rrm.h b/src/ap/rrm.h
index f07fd41..496e71f 100644
--- a/src/ap/rrm.h
+++ b/src/ap/rrm.h
@@ -23,6 +23,12 @@ int hostapd_send_lci_req(struct hostapd_data *hapd, const u8 *addr);
 int hostapd_send_range_req(struct hostapd_data *hapd, const u8 *addr,
 			   u16 random_interval, u8 min_ap,
 			   const u8 *responders, unsigned int n_responders);
+int hostapd_send_beacon_req(struct hostapd_data *hapd, const u8 *addr,
+		u8 oper_class, u8 channel, u16 random_interval,
+		u16 measurement_duration, u8 mode, const u8* bssid,
+		struct wpa_ssid_value* ssid, u8* rep_cond, u8* rep_cond_threshold,
+		u8* rep_detail,	const u8* ap_ch_rep, unsigned int ap_ch_rep_len,
+		const u8* req_elem, unsigned int req_elem_len);
 void hostapd_clean_rrm(struct hostapd_data *hapd);
 
 #endif /* RRM_H */
diff --git a/src/common/ieee802_11_defs.h b/src/common/ieee802_11_defs.h
index 587744d..dae5072 100644
--- a/src/common/ieee802_11_defs.h
+++ b/src/common/ieee802_11_defs.h
@@ -365,6 +365,10 @@
 /* Radio Measurement capabilities (from RRM Capabilities IE) */
 /* byte 1 (out of 5) */
 #define WLAN_RRM_CAPS_LINK_MEASUREMENT BIT(0)
+#define WLAN_RRM_CAPS_BEACON_PASSIVE_MEASUREMENT BIT(4)
+#define WLAN_RRM_CAPS_BEACON_ACTIVE_MEASUREMENT BIT(5)
+#define WLAN_RRM_CAPS_BEACON_TABLE_MEASUREMENT BIT(6)
+#define WLAN_RRM_CAPS_BEACON_REPORTING_CONDITIONS_MEASUREMENT BIT(7)
 #define WLAN_RRM_CAPS_NEIGHBOR_REPORT BIT(1)
 /* byte 2 (out of 5) */
 #define WLAN_RRM_CAPS_LCI_MEASUREMENT BIT(4)
diff --git a/src/common/wpa_ctrl.h b/src/common/wpa_ctrl.h
index 0220aa5..e28d393 100644
--- a/src/common/wpa_ctrl.h
+++ b/src/common/wpa_ctrl.h
@@ -242,6 +242,9 @@ extern "C" {
 #define RRM_EVENT_NEIGHBOR_REP_RXED "RRM-NEIGHBOR-REP-RECEIVED "
 #define RRM_EVENT_NEIGHBOR_REP_FAILED "RRM-NEIGHBOR-REP-REQUEST-FAILED "
 
+#define RRM_EVENT_BEACON_REP_RXED "RRM-BEACON-REP-RECEIVED "
+#define RRM_EVENT_BEACON_REP_FAILED "RRM-BEACON-REP-REQUEST-FAILED "
+
 /* hostapd control interface - fixed message prefixes */
 #define WPS_EVENT_PIN_NEEDED "WPS-PIN-NEEDED "
 #define WPS_EVENT_NEW_AP_SETTINGS "WPS-NEW-AP-SETTINGS "
-- 
2.7.4

