From eea156db8f554a85c1509402fd7f51468fadab21 Mon Sep 17 00:00:00 2001
From: Simon Dinkin <simonx.dinkin@intel.com>
Date: Wed, 26 Oct 2016 17:25:28 +0300
Subject: [PATCH 66/69] mbo: anqp: add support for mbo anqp cellular preference

if the AP is mbo cell aware, then in response to
anqp capability list request, the AP will respond with
anqp capability list response that include support for anqp mbo cell pref.

if the AP is mbo cell aware, then in response to
anqp mbo cell pref request, the AP will respond with
anqp mbo cell pref response that include the cellular preference.
---
 src/ap/gas_serv.c | 132 ++++++++++++++++++++++++++++++++++++++++++------------
 src/ap/gas_serv.h |   3 ++
 2 files changed, 106 insertions(+), 29 deletions(-)

diff --git a/src/ap/gas_serv.c b/src/ap/gas_serv.c
index b468856..1a2483b 100644
--- a/src/ap/gas_serv.c
+++ b/src/ap/gas_serv.c
@@ -167,6 +167,20 @@ static void anqp_add_hs_capab_list(struct hostapd_data *hapd,
 }
 #endif /* CONFIG_HS20 */
 
+#ifdef CONFIG_MBO
+static void anqp_add_mbo_cell_pref_capab(struct hostapd_data *hapd,
+				   struct wpabuf *buf)
+{
+	if (hapd->conf->mbo_enabled && hapd->conf->mbo_cell_aware) {
+		u8 *len = gas_anqp_add_element(buf, ANQP_VENDOR_SPECIFIC);
+		wpabuf_put_be24(buf, OUI_WFA);
+		wpabuf_put_u8(buf, MBO_ANQP_OUI_TYPE);
+		wpabuf_put_u8(buf, MBO_ANQP_SUBTYPE_CELL_CONN_PREF);
+		wpabuf_put_u8(buf, 0); /* Reserved */
+		gas_anqp_set_element_len(buf, len);
+	}
+}
+#endif /* CONFIG_MBO */
 
 static struct anqp_element * get_anqp_elem(struct hostapd_data *hapd,
 					   u16 infoid)
@@ -273,6 +287,9 @@ static void anqp_add_capab_list(struct hostapd_data *hapd,
 #ifdef CONFIG_HS20
 	anqp_add_hs_capab_list(hapd, buf);
 #endif /* CONFIG_HS20 */
+#ifdef CONFIG_MBO
+	anqp_add_mbo_cell_pref_capab(hapd, buf);
+#endif /* CONFIG_MBO */
 	gas_anqp_set_element_len(buf, len);
 }
 
@@ -806,6 +823,21 @@ static void anqp_add_icon_binary_file(struct hostapd_data *hapd,
 
 #endif /* CONFIG_HS20 */
 
+#ifdef CONFIG_MBO
+static void anqp_add_mbo_cell_pref(struct hostapd_data *hapd,
+	      struct wpabuf *buf)
+{
+	if (hapd->conf->mbo_enabled && hapd->conf->mbo_cell_aware) {
+		u8 *len = gas_anqp_add_element(buf, ANQP_VENDOR_SPECIFIC);
+		wpabuf_put_be24(buf, OUI_WFA);
+		wpabuf_put_u8(buf, MBO_ANQP_OUI_TYPE);
+		wpabuf_put_u8(buf, MBO_ANQP_SUBTYPE_CELL_CONN_PREF);
+		wpabuf_put_u8(buf, 0); /* Reserved */
+		wpabuf_put_u8(buf, hapd->mbo_cell_pref);
+		gas_anqp_set_element_len(buf, len);
+	}
+}
+#endif /* CONFIG_MBO */
 
 static size_t anqp_get_required_len(struct hostapd_data *hapd,
 				    const u16 *infoid,
@@ -903,6 +935,11 @@ gas_serv_build_gas_resp_payload(struct hostapd_data *hapd,
 		anqp_add_icon_binary_file(hapd, buf, icon_name, icon_name_len);
 #endif /* CONFIG_HS20 */
 
+#ifdef CONFIG_MBO
+	if (request & ANQP_REQ_MBO_CELL_PREF)
+		anqp_add_mbo_cell_pref(hapd, buf);
+#endif /* CONFIG_MBO */
+
 	return buf;
 }
 
@@ -1118,8 +1155,24 @@ static void rx_anqp_hs_icon_request(struct hostapd_data *hapd,
 			   "available");
 	}
 }
+#endif /* CONFIG_HS20 */
 
+#ifdef CONFIG_MBO
+static void rx_anqp_mbo_cell_pref_request(struct hostapd_data *hapd,
+				    struct anqp_query_info *qi)
+{
+	qi->request |= ANQP_REQ_MBO_CELL_PREF;
+	if (hapd->conf->mbo_enabled && hapd->conf->mbo_cell_aware) {
+		wpa_printf(MSG_DEBUG, "ANQP: MBO Request Query "
+			   "(local)");
+	} else {
+		wpa_printf(MSG_DEBUG, "ANQP: MBO Request Query not "
+			   "available");
+	}
+}
+#endif /* CONFIG_MBO */
 
+#if defined(CONFIG_HS20) || defined(CONFIG_MBO)
 static void rx_anqp_vendor_specific(struct hostapd_data *hapd,
 				    const u8 *pos, const u8 *end,
 				    struct anqp_query_info *qi)
@@ -1156,40 +1209,61 @@ static void rx_anqp_vendor_specific(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_P2P */
 
-	if (*pos != HS20_ANQP_OUI_TYPE) {
-		wpa_printf(MSG_DEBUG, "ANQP: Unsupported WFA vendor type %u",
-			   *pos);
-		return;
+	if (*pos == HS20_ANQP_OUI_TYPE) {
+#ifdef CONFIG_HS20
+		pos++;
+
+		if (end - pos <= 1)
+			return;
+
+		subtype = *pos++;
+		pos++; /* Reserved */
+		switch (subtype) {
+		case HS20_STYPE_QUERY_LIST:
+			wpa_printf(MSG_DEBUG, "ANQP: HS 2.0 Query List");
+			while (pos < end) {
+				rx_anqp_hs_query_list(hapd, *pos, qi);
+				pos++;
+			}
+			break;
+		case HS20_STYPE_NAI_HOME_REALM_QUERY:
+			rx_anqp_hs_nai_home_realm(hapd, pos, end, qi);
+			break;
+		case HS20_STYPE_ICON_REQUEST:
+			rx_anqp_hs_icon_request(hapd, pos, end, qi);
+			break;
+		default:
+			wpa_printf(MSG_DEBUG, "ANQP: Unsupported HS 2.0 query subtype "
+				   "%u", subtype);
+			break;
+		}
+#endif /* CONFIG_HS20 */
 	}
-	pos++;
+	else if (*pos == MBO_ANQP_OUI_TYPE) {
+#ifdef CONFIG_MBO
+		pos++;
 
-	if (end - pos <= 1)
-		return;
+		if (end - pos <= 1)
+			return;
 
-	subtype = *pos++;
-	pos++; /* Reserved */
-	switch (subtype) {
-	case HS20_STYPE_QUERY_LIST:
-		wpa_printf(MSG_DEBUG, "ANQP: HS 2.0 Query List");
-		while (pos < end) {
-			rx_anqp_hs_query_list(hapd, *pos, qi);
-			pos++;
+		subtype = *pos++;
+		pos++; /* Reserved */
+		switch (subtype) {
+		case MBO_ANQP_SUBTYPE_CELL_CONN_PREF:
+			rx_anqp_mbo_cell_pref_request(hapd, qi);
+			break;
+		default:
+			wpa_printf(MSG_DEBUG, "ANQP: Unsupported MBO query subtype "
+				   "%u", subtype);
+			break;
 		}
-		break;
-	case HS20_STYPE_NAI_HOME_REALM_QUERY:
-		rx_anqp_hs_nai_home_realm(hapd, pos, end, qi);
-		break;
-	case HS20_STYPE_ICON_REQUEST:
-		rx_anqp_hs_icon_request(hapd, pos, end, qi);
-		break;
-	default:
-		wpa_printf(MSG_DEBUG, "ANQP: Unsupported HS 2.0 query subtype "
-			   "%u", subtype);
-		break;
+#endif /* CONFIG_MBO */
 	}
+	else
+		wpa_printf(MSG_DEBUG, "ANQP: Unsupported WFA vendor type %u", *pos);
 }
+#endif /* defined(CONFIG_HS20) || defined(CONFIG_MBO) */
 
-#endif /* CONFIG_HS20 */
 
 
 static void gas_serv_req_local_processing(struct hostapd_data *hapd,
@@ -1367,11 +1441,11 @@ static void gas_serv_rx_gas_initial_req(struct hostapd_data *hapd,
 		case ANQP_QUERY_LIST:
 			rx_anqp_query_list(hapd, pos, pos + elen, &qi);
 			break;
-#ifdef CONFIG_HS20
+#if defined(CONFIG_HS20) || defined(CONFIG_MBO)
 		case ANQP_VENDOR_SPECIFIC:
 			rx_anqp_vendor_specific(hapd, pos, pos + elen, &qi);
 			break;
-#endif /* CONFIG_HS20 */
+#endif /* defined(CONFIG_HS20) || defined(CONFIG_MBO) */
 		default:
 			wpa_printf(MSG_DEBUG, "ANQP: Unsupported Query "
 				   "Request element %u", info_id);
diff --git a/src/ap/gas_serv.h b/src/ap/gas_serv.h
index 4ec852b..1ec9da3 100644
--- a/src/ap/gas_serv.h
+++ b/src/ap/gas_serv.h
@@ -63,6 +63,9 @@
 #define ANQP_REQ_ICON_REQUEST \
 	(0x10000 << HS20_STYPE_ICON_REQUEST)
 
+#define ANQP_REQ_MBO_CELL_PREF \
+	(0x200000000 << MBO_ANQP_SUBTYPE_CELL_CONN_PREF)
+
 struct gas_dialog_info {
 	u8 valid;
 	struct wpabuf *sd_resp; /* Fragmented response */
-- 
2.7.4

