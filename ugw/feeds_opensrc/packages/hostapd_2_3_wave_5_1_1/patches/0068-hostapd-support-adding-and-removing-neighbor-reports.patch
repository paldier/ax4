From fca9c2f4d1842476fa1130adb2d2d55a4da5fdb0 Mon Sep 17 00:00:00 2001
From: Simon Dinkin <simonx.dinkin@intel.com>
Date: Tue, 1 Nov 2016 18:43:14 +0200
Subject: [PATCH] hostapd: support adding and removing neighbor reports per VAP

added new set_neighbor_per_vap and remove_neighbor_per_vap
control interface commands.

this commands are duplication of the existing set_neighbor and remove_neighbor commands
with the addition of BSS_name as the first param to the command.

usage:
set_neighbor_per_vap <BSS_name> <neighbor BSSID> ssid="<neighbor SSID>"
nr=<hexdump of neighbor element report: BSSID (6 octets) BSSID information (4 octets)
 Operating class (1 byte) Channel number (1 byte) PHY type (1 byte) optional subelements>

remove_neighbor_per_vap <BSS_name> <neighbor BSSID> ssid="<neighbor SSID>"

Signed-off-by: Simon Dinkin <simonx.dinkin@intel.com>
---
 hostapd/ctrl_iface.c  | 153 ++++++++++++++++++++++++++++++++++++++++++++++++++
 hostapd/hostapd_cli.c |  41 ++++++++++++++
 2 files changed, 194 insertions(+)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index 895b89b..b289050 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -3348,6 +3348,153 @@ static int hostapd_ctrl_iface_cellular_pref_set(struct hostapd_data *hapd, char
 }
 #endif /* CONFIG_MBO */
 
+static int hostapd_ctrl_iface_set_neighbor_per_vap(struct hostapd_data *hapd, char *buf)
+{
+	struct wpa_ssid_value ssid;
+	u8 bssid[ETH_ALEN];
+	struct wpabuf *nr, *lci = NULL, *civic = NULL;
+	char *tmp;
+	int ret;
+
+        hapd = get_bss_index(buf, hapd->iface);
+        if (!hapd) {
+                wpa_printf(MSG_INFO,
+                                "CTRL: SET_NEIGHBOR_PER_VAP - there is no iface with the given name");
+                return -1;
+        }
+
+	if (!(hapd->conf->radio_measurements[0] &
+	      WLAN_RRM_CAPS_NEIGHBOR_REPORT)) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: SET_NEIGHBOR_PER_VAP: Neighbor report is not enabled");
+		return -1;
+	}
+
+	buf = os_strchr(buf, ' ');
+	if (buf)
+		buf++;
+	else {
+		wpa_printf(MSG_INFO,
+				"CTRL: SET_NEIGHBOR_PER_VAP - neighbor BSSID is missing");
+		return -1;
+	}
+
+	if (hwaddr_aton(buf, bssid)) {
+		wpa_printf(MSG_ERROR, "CTRL: SET_NEIGHBOR_PER_VAP: Bad BSSID");
+		return -1;
+	}
+
+	tmp = os_strstr(buf, "ssid=");
+	if (!tmp || ssid_parse(tmp + 5, &ssid)) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: SET_NEIGHBOR_PER_VAP: Bad or missing SSID");
+		return -1;
+	}
+	buf = os_strchr(tmp + 6, tmp[5] == '"' ? '"' : ' ');
+	if (!buf)
+		return -1;
+
+	tmp = os_strstr(buf, "nr=");
+	if (!tmp) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: SET_NEIGHBOR_PER_VAP: Missing Neighbor Report element");
+		return -1;
+	}
+
+	buf = os_strchr(tmp, ' ');
+	if (buf)
+		*buf++ = '\0';
+
+	nr = wpabuf_parse_bin(tmp + 3);
+	if (!nr) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: SET_NEIGHBOR_PER_VAP: Bad Neighbor Report element");
+		return -1;
+	}
+
+	if (!buf)
+		goto set;
+
+	tmp = os_strstr(buf, "lci=");
+	if (tmp) {
+		buf = os_strchr(tmp, ' ');
+		if (buf)
+			*buf++ = '\0';
+		lci = wpabuf_parse_bin(tmp + 4);
+		if (!lci) {
+			wpa_printf(MSG_ERROR,
+				   "CTRL: SET_NEIGHBOR_PER_VAP: Bad LCI subelement");
+			wpabuf_free(nr);
+			return -1;
+		}
+	}
+
+	if (!buf)
+		goto set;
+
+	tmp = os_strstr(buf, "civic=");
+	if (tmp) {
+		buf = os_strchr(tmp, ' ');
+		if (buf)
+			*buf++ = '\0';
+		civic = wpabuf_parse_bin(tmp + 6);
+		if (!civic) {
+			wpa_printf(MSG_ERROR,
+				   "CTRL: SET_NEIGHBOR_PER_VAP: Bad civic subelement");
+			wpabuf_free(nr);
+			wpabuf_free(lci);
+			return -1;
+		}
+	}
+
+set:
+	ret = hostapd_neighbor_set(hapd, bssid, &ssid, nr, lci, civic);
+
+	wpabuf_free(nr);
+	wpabuf_free(lci);
+	wpabuf_free(civic);
+
+	return ret;
+}
+
+static int hostapd_ctrl_iface_remove_neighbor_per_vap(struct hostapd_data *hapd,
+					      char *buf)
+{
+	struct wpa_ssid_value ssid;
+	u8 bssid[ETH_ALEN];
+	char *tmp;
+
+	hapd = get_bss_index(buf, hapd->iface);
+	if (!hapd) {
+		wpa_printf(MSG_INFO,
+				"CTRL: REMOVE_NEIGHBOR_PER_VAP - there is no iface with the given name");
+		return -1;
+	}
+
+	buf = os_strchr(buf, ' ');
+	if (buf)
+		buf++;
+	else {
+		wpa_printf(MSG_INFO,
+				"CTRL: REMOVE_NEIGHBOR_PER_VAP - neighbor BSSID is missing");
+		return -1;
+	}
+
+	if (hwaddr_aton(buf, bssid)) {
+		wpa_printf(MSG_ERROR, "CTRL: REMOVE_NEIGHBOR_PER_VAP: Bad BSSID");
+		return -1;
+	}
+
+	tmp = os_strstr(buf, "ssid=");
+	if (!tmp || ssid_parse(tmp + 5, &ssid)) {
+		wpa_printf(MSG_ERROR,
+			   "CTRL: REMOVE_NEIGHBOR_PER_VAP: Bad or missing SSID");
+		return -1;
+	}
+
+	return hostapd_neighbor_remove(hapd, bssid, &ssid);
+}
+
 int hostapd_ctrl_iface_unconnected_sta(struct hostapd_data *hapd, const char *cmd)
 {
   struct hostapd_unconnected_sta_req_params req;
@@ -4033,9 +4180,15 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 	} else if (os_strncmp(buf, "SET_NEIGHBOR ", 13) == 0) {
 		if (hostapd_ctrl_iface_set_neighbor(hapd, buf + 13))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "SET_NEIGHBOR_PER_VAP ", 21) == 0) {
+		if (hostapd_ctrl_iface_set_neighbor_per_vap(hapd, buf + 21))
+			reply_len = -1;
 	} else if (os_strncmp(buf, "REMOVE_NEIGHBOR ", 16) == 0) {
 		if (hostapd_ctrl_iface_remove_neighbor(hapd, buf + 16))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "REMOVE_NEIGHBOR_PER_VAP ", 24) == 0) {
+		if (hostapd_ctrl_iface_remove_neighbor_per_vap(hapd, buf + 24))
+			reply_len = -1;
 	} else if (os_strncmp(buf, "REQ_LCI ", 8) == 0) {
 		if (hostapd_ctrl_iface_req_lci(hapd, buf + 8))
 			reply_len = -1;
diff --git a/hostapd/hostapd_cli.c b/hostapd/hostapd_cli.c
index dc8bfb2..c4b8c9f 100644
--- a/hostapd/hostapd_cli.c
+++ b/hostapd/hostapd_cli.c
@@ -1217,6 +1217,26 @@ static int hostapd_cli_cmd_set_neighbor(struct wpa_ctrl *ctrl, int argc,
 	return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_set_neighbor_per_vap(struct wpa_ctrl *ctrl, int argc,
+					char *argv[])
+{
+	char cmd[2048];
+	int res;
+
+	if (argc < 4 || argc > 6) {
+		printf("Invalid set_neighbor_per_vap command: needs 4-6 arguments\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "SET_NEIGHBOR_PER_VAP %s %s %s %s %s %s",
+			  argv[0], argv[1], argv[2], argv[3], argc >= 5 ? argv[4] : "",
+			  argc == 6 ? argv[5] : "");
+	if (os_snprintf_error(sizeof(cmd), res)) {
+		printf("Too long SET_NEIGHBOR_PER_VAP command.\n");
+		return -1;
+	}
+	return wpa_ctrl_command(ctrl, cmd);
+}
 
 static int hostapd_cli_cmd_remove_neighbor(struct wpa_ctrl *ctrl, int argc,
 					   char *argv[])
@@ -1238,6 +1258,25 @@ static int hostapd_cli_cmd_remove_neighbor(struct wpa_ctrl *ctrl, int argc,
 	return wpa_ctrl_command(ctrl, cmd);
 }
 
+static int hostapd_cli_cmd_remove_neighbor_per_vap(struct wpa_ctrl *ctrl, int argc,
+					   char *argv[])
+{
+	char cmd[400];
+	int res;
+
+	if (argc != 3) {
+		printf("Invalid remove_neighbor_per_vap command: needs 3 arguments\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "REMOVE_NEIGHBOR_PER_VAP %s %s %s",
+			  argv[0], argv[1], argv[2]);
+	if (os_snprintf_error(sizeof(cmd), res)) {
+		printf("Too long REMOVE_NEIGHBOR_PER_VAP command.\n");
+		return -1;
+	}
+	return wpa_ctrl_command(ctrl, cmd);
+}
 
 static int hostapd_cli_cmd_req_lci(struct wpa_ctrl *ctrl, int argc,
 				   char *argv[])
@@ -1758,7 +1797,9 @@ static const struct hostapd_cli_cmd hostapd_cli_commands[] = {
 	{ "pmksa", hostapd_cli_cmd_pmksa, NULL, NULL },
 	{ "pmksa_flush", hostapd_cli_cmd_pmksa_flush, NULL, NULL },
 	{ "set_neighbor", hostapd_cli_cmd_set_neighbor, NULL, NULL },
+	{ "set_neighbor_per_vap", hostapd_cli_cmd_set_neighbor_per_vap, NULL, NULL },
 	{ "remove_neighbor", hostapd_cli_cmd_remove_neighbor, NULL, NULL },
+	{ "remove_neighbor_per_vap", hostapd_cli_cmd_remove_neighbor_per_vap, NULL, NULL },
 	{ "req_lci", hostapd_cli_cmd_req_lci, NULL, NULL },
 	{ "req_range", hostapd_cli_cmd_req_range, NULL, NULL },
 	{ "req_beacon", hostapd_cli_cmd_req_beacon, NULL, NULL },
-- 
2.7.4

