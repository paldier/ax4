From 564ac01d0f28b037bf30022fa52a8d048b63c0e0 Mon Sep 17 00:00:00 2001
From: sdinkinx <simonx.dinkin@intel.com>
Date: Wed, 8 Feb 2017 18:03:37 +0200
Subject: [PATCH] bss transition: add dialog token

the dialog token param was added to the bss_tm_req as:
"dialog_token=<dialog_token>"
if the passed dialog token is 0,
then the hostapd will generate it.
If the passed dialog token is non-zero,
then the hostapd will use it as is.
In both cases, the actual dialog token that was used,
will be returned as return value for this command.

in addition, the "dialog_token=<dialog_token>" was added,
both to BSS-TM-QUERY and BSS-TM-RESP notifications.

Signed-off-by: sdinkinx <simonx.dinkin@intel.com>
---
 hostapd/ctrl_iface.c | 35 ++++++++++++++++++++++++-----------
 src/ap/hostapd.h     |  1 +
 src/ap/wnm_ap.c      | 30 +++++++++++++++++++-----------
 src/ap/wnm_ap.h      |  2 +-
 4 files changed, 45 insertions(+), 23 deletions(-)

diff --git a/hostapd/ctrl_iface.c b/hostapd/ctrl_iface.c
index d71924f..af9745b 100644
--- a/hostapd/ctrl_iface.c
+++ b/hostapd/ctrl_iface.c
@@ -848,7 +848,7 @@ static int hostapd_ctrl_iface_ess_disassoc(struct hostapd_data *hapd,
 
 
 static int hostapd_ctrl_iface_bss_tm_req(struct hostapd_data *hapd,
-					 const char *cmd)
+					 const char *cmd, char *buf, size_t buflen)
 {
 	u8 addr[ETH_ALEN];
 	const char *pos, *end;
@@ -862,6 +862,7 @@ static int hostapd_ctrl_iface_bss_tm_req(struct hostapd_data *hapd,
 	u8 *nei_pos = nei_rep;
 	u8 mbo[10];
 	size_t mbo_len = 0;
+	int dialog_token_to_send = 0, ret_dialog_token;
 
 	if (hwaddr_aton(cmd, addr)) {
 		wpa_printf(MSG_DEBUG, "Invalid STA MAC address");
@@ -883,6 +884,16 @@ static int hostapd_ctrl_iface_bss_tm_req(struct hostapd_data *hapd,
 		return -1;
 	}
 
+	pos = os_strstr(cmd, " dialog_token=");
+	if (pos) {
+		pos += 14;
+		dialog_token_to_send = atoi(pos);
+		if (dialog_token_to_send < 0 || dialog_token_to_send > 0xff) {
+			wpa_printf(MSG_DEBUG, "Invalid dialog_token");
+			return -1;
+		}
+	}
+
 	pos = os_strstr(cmd, " disassoc_timer=");
 	if (pos) {
 		pos += 16;
@@ -1140,13 +1151,15 @@ static int hostapd_ctrl_iface_bss_tm_req(struct hostapd_data *hapd,
 	}
 #endif /* CONFIG_MBO */
 
-	ret = wnm_send_bss_tm_req(hapd, sta, req_mode, disassoc_timer,
-				  valid_int, bss_term_dur, url,
-				  nei_pos > nei_rep ? nei_rep : NULL,
-				  nei_pos - nei_rep, mbo_len ? mbo : NULL,
-				  mbo_len);
+	ret_dialog_token = wnm_send_bss_tm_req(hapd, sta, dialog_token_to_send, req_mode,
+			disassoc_timer, valid_int, bss_term_dur, url,
+			nei_pos > nei_rep ? nei_rep : NULL, nei_pos - nei_rep,
+			mbo_len ? mbo : NULL, mbo_len);
 	os_free(url);
-	return ret;
+
+	if (ret_dialog_token < 0)
+		return -1;
+	return os_snprintf(buf, buflen, "dialog_token=%d\n", ret_dialog_token);
 }
 
 #endif /* CONFIG_WNM */
@@ -4737,12 +4750,12 @@ int hostapd_ctrl_iface_sta_steer(struct hostapd_data *hapd, const char *cmd)
   } else{
     /* Station supports 802.11v BTM, send BSS Transition Management
     Request instead of black listing station. */
-    char buf[2000];
+    char buf[2000], ret_buf[32];
     wpa_printf(MSG_DEBUG, "Steer STA " MACSTR ", station supports BTM.", MAC2STR(sta_addr));
 
     os_snprintf(buf, sizeof(buf), MACSTR " %s", MAC2STR(sta_addr), btm_parameters ? btm_parameters : "");
 
-    ret = hostapd_ctrl_iface_bss_tm_req(hapd, buf);
+    ret = hostapd_ctrl_iface_bss_tm_req(hapd, buf, ret_buf, 32);
 
   }
 
@@ -6126,8 +6139,8 @@ static int hostapd_ctrl_iface_receive_process(struct hostapd_data *hapd,
 		if (hostapd_ctrl_iface_ess_disassoc(hapd, buf + 13))
 			reply_len = -1;
 	} else if (os_strncmp(buf, "BSS_TM_REQ ", 11) == 0) {
-		if (hostapd_ctrl_iface_bss_tm_req(hapd, buf + 11))
-			reply_len = -1;
+		reply_len = hostapd_ctrl_iface_bss_tm_req(hapd, buf + 11,
+				reply, reply_size);
 #endif /* CONFIG_WNM */
 	} else if (os_strcmp(buf, "GET_CONFIG") == 0) {
 		reply_len = hostapd_ctrl_iface_get_config(hapd, reply,
diff --git a/src/ap/hostapd.h b/src/ap/hostapd.h
index 55eceb5..4e1434b 100644
--- a/src/ap/hostapd.h
+++ b/src/ap/hostapd.h
@@ -312,6 +312,7 @@ struct hostapd_data {
 	u8 noise_histogram_token;
 	u8 link_measurement_token;
 	u8 sta_statistics_token;
+	u8 bss_transition_token;
 	unsigned int lci_req_active:1;
 	unsigned int range_req_active:1;
 };
diff --git a/src/ap/wnm_ap.c b/src/ap/wnm_ap.c
index 79b7f71..e3301bf 100644
--- a/src/ap/wnm_ap.c
+++ b/src/ap/wnm_ap.c
@@ -428,8 +428,8 @@ static void ieee802_11_rx_bss_trans_mgmt_query(struct hostapd_data *hapd,
 	}
 
 	wpa_msg(hapd->msg_ctx, MSG_INFO, BSS_TM_QUERY MACSTR
-					" reason=%u%s",
-					MAC2STR(addr), reason, candidates_str );
+					" dialog_token=%u reason=%u%s",
+					MAC2STR(addr), dialog_token, reason, candidates_str );
 	if (!hapd->conf->wnm_bss_trans_query_auto_resp)
 		return; /* the user (ap manager) is in charge of sending the btm request */
 
@@ -505,15 +505,15 @@ static void ieee802_11_rx_bss_trans_mgmt_resp(struct hostapd_data *hapd,
 		wpa_printf(MSG_DEBUG, "WNM: Target BSSID: " MACSTR,
 			   MAC2STR(pos));
 		wpa_msg(hapd->msg_ctx, MSG_INFO, BSS_TM_RESP MACSTR
-			" status_code=%u bss_termination_delay=%u target_bssid="
+			" dialog_token=%u status_code=%u bss_termination_delay=%u target_bssid="
 			MACSTR,
-			MAC2STR(addr), status_code, bss_termination_delay,
+			MAC2STR(addr), dialog_token, status_code, bss_termination_delay,
 			MAC2STR(pos));
 		pos += ETH_ALEN;
 	} else {
 		wpa_msg(hapd->msg_ctx, MSG_INFO, BSS_TM_RESP MACSTR
-			" status_code=%u bss_termination_delay=%u",
-			MAC2STR(addr), status_code, bss_termination_delay);
+			" dialog_token=%u status_code=%u bss_termination_delay=%u",
+			MAC2STR(addr), dialog_token, status_code, bss_termination_delay);
 	}
 
 	wpa_hexdump(MSG_DEBUG, "WNM: BSS Transition Candidate List Entries",
@@ -798,7 +798,7 @@ int wnm_send_ess_disassoc_imminent(struct hostapd_data *hapd,
 
 
 int wnm_send_bss_tm_req(struct hostapd_data *hapd, struct sta_info *sta,
-			u8 req_mode, int disassoc_timer, u8 valid_int,
+			u8 dialog_token, u8 req_mode, int disassoc_timer, u8 valid_int,
 			const u8 *bss_term_dur, const char *url,
 			const u8 *nei_rep, size_t nei_rep_len,
 			const u8 *mbo_attrs, size_t mbo_len)
@@ -808,11 +808,19 @@ int wnm_send_bss_tm_req(struct hostapd_data *hapd, struct sta_info *sta,
 	size_t url_len;
 
 	wpa_printf(MSG_DEBUG, "WNM: Send BSS Transition Management Request to "
-		   MACSTR " req_mode=0x%x disassoc_timer=%d valid_int=0x%x",
-		   MAC2STR(sta->addr), req_mode, disassoc_timer, valid_int);
+		   MACSTR " dialog_token=%u req_mode=0x%x disassoc_timer=%d valid_int=0x%x",
+		   MAC2STR(sta->addr), dialog_token, req_mode, disassoc_timer,
+		   valid_int);
 	buf = os_zalloc(1000 + nei_rep_len + mbo_len);
 	if (buf == NULL)
 		return -1;
+
+	if (!dialog_token) {
+		dialog_token = ++hapd->bss_transition_token;
+		if (!hapd->bss_transition_token) /* For wraparounds */
+			dialog_token = ++hapd->bss_transition_token;
+	}
+
 	mgmt = (struct ieee80211_mgmt *) buf;
 	mgmt->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
 					   WLAN_FC_STYPE_ACTION);
@@ -821,7 +829,7 @@ int wnm_send_bss_tm_req(struct hostapd_data *hapd, struct sta_info *sta,
 	os_memcpy(mgmt->bssid, hapd->own_addr, ETH_ALEN);
 	mgmt->u.action.category = WLAN_ACTION_WNM;
 	mgmt->u.action.u.bss_tm_req.action = WNM_BSS_TRANS_MGMT_REQ;
-	mgmt->u.action.u.bss_tm_req.dialog_token = 1;
+	mgmt->u.action.u.bss_tm_req.dialog_token = dialog_token;
 	mgmt->u.action.u.bss_tm_req.req_mode = req_mode;
 	mgmt->u.action.u.bss_tm_req.disassoc_timer =
 		host_to_le16(disassoc_timer);
@@ -871,5 +879,5 @@ int wnm_send_bss_tm_req(struct hostapd_data *hapd, struct sta_info *sta,
 		set_disassoc_timer(hapd, sta, disassoc_timer);
 	}
 
-	return 0;
+	return dialog_token;
 }
diff --git a/src/ap/wnm_ap.h b/src/ap/wnm_ap.h
index a44eadb..a3a379b 100644
--- a/src/ap/wnm_ap.h
+++ b/src/ap/wnm_ap.h
@@ -19,7 +19,7 @@ int wnm_send_ess_disassoc_imminent(struct hostapd_data *hapd,
 				   struct sta_info *sta, const char *url,
 				   int disassoc_timer);
 int wnm_send_bss_tm_req(struct hostapd_data *hapd, struct sta_info *sta,
-			u8 req_mode, int disassoc_timer, u8 valid_int,
+			u8 dialog_token, u8 req_mode, int disassoc_timer, u8 valid_int,
 			const u8 *bss_term_dur, const char *url,
 			const u8 *nei_rep, size_t nei_rep_len,
 			const u8 *mbo_attrs, size_t mbo_len);
-- 
2.10.1

