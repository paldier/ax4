diff -Npur hostapd-2.6-orig/hostapd/ctrl_iface.c hostapd-2.6/hostapd/ctrl_iface.c
--- hostapd-2.6-orig/hostapd/ctrl_iface.c	2017-03-08 10:18:15.864478618 +0200
+++ hostapd-2.6/hostapd/ctrl_iface.c	2017-03-08 10:19:13.586282427 +0200
@@ -155,12 +155,22 @@ static int hostapd_ctrl_iface_sa_query(s
 #ifdef CONFIG_WPS
 static int hostapd_ctrl_iface_wps_pin(struct hostapd_data *hapd, char *txt)
 {
-	char *pin = os_strchr(txt, ' ');
-	char *timeout_txt;
+	char *pin, *uuid, *timeout_txt;
 	int timeout;
 	u8 addr_buf[ETH_ALEN], *addr = NULL;
 	char *pos;
 
+	hapd = get_bss_index(txt, hapd->iface);
+	if (hapd == NULL) {
+		return -1;
+	}
+
+	uuid = os_strchr(txt, ' ');
+	if (uuid == NULL)
+		return -1;
+	uuid++;
+
+	pin = os_strchr(uuid, ' ');
 	if (pin == NULL)
 		return -1;
 	*pin++ = '\0';
@@ -178,7 +188,7 @@ static int hostapd_ctrl_iface_wps_pin(st
 	} else
 		timeout = 0;
 
-	return hostapd_wps_add_pin(hapd, addr, txt, pin, timeout);
+	return hostapd_wps_add_pin(hapd, addr, uuid, pin, timeout);
 }
 
 
@@ -449,6 +459,17 @@ static int hostapd_ctrl_iface_wps_ap_pin
 	char *pos;
 	const char *pin_txt;
 
+	hapd = get_bss_index(txt, hapd->iface);
+	if (NULL == hapd) {
+		return -1;
+	}
+
+	txt = os_strchr(txt, ' ');
+	if (NULL == txt) {
+		return -1;
+	}
+	txt++;
+
 	pos = os_strchr(txt, ' ');
 	if (pos)
 		*pos++ = '\0';
@@ -464,14 +485,14 @@ static int hostapd_ctrl_iface_wps_ap_pin
 		pin_txt = hostapd_wps_ap_pin_random(hapd, timeout);
 		if (pin_txt == NULL)
 			return -1;
-		return os_snprintf(buf, buflen, "%s", pin_txt);
+		return os_snprintf(buf, buflen, "%s\n", pin_txt);
 	}
 
 	if (os_strcmp(txt, "get") == 0) {
 		pin_txt = hostapd_wps_ap_pin_get(hapd);
 		if (pin_txt == NULL)
 			return -1;
-		return os_snprintf(buf, buflen, "%s", pin_txt);
+		return os_snprintf(buf, buflen, "%s\n", pin_txt);
 	}
 
 	if (os_strcmp(txt, "set") == 0) {
@@ -488,7 +509,7 @@ static int hostapd_ctrl_iface_wps_ap_pin
 			return -1;
 		if (hostapd_wps_ap_pin_set(hapd, pin, timeout) < 0)
 			return -1;
-		return os_snprintf(buf, buflen, "%s", pin);
+		return os_snprintf(buf, buflen, "%s\n", pin);
 	}
 
 	return -1;
@@ -500,6 +521,16 @@ static int hostapd_ctrl_iface_wps_config
 	char *pos;
 	char *ssid, *auth, *encr = NULL, *key = NULL;
 
+	hapd = get_bss_index(txt, hapd->iface);
+	if (hapd == NULL) {
+		return -1;
+	}
+	txt = os_strchr(txt, ' ');
+	if (NULL == txt) {
+		return -1;
+	}
+	txt++;
+
 	ssid = txt;
 	pos = os_strchr(txt, ' ');
 	if (!pos)
@@ -540,7 +571,7 @@ static const char * pbc_status_str(enum 
 
 
 static int hostapd_ctrl_iface_wps_get_status(struct hostapd_data *hapd,
-					     char *buf, size_t buflen)
+					     const char *bss_name, char *buf, size_t buflen)
 {
 	int ret;
 	char *pos, *end;
@@ -548,6 +579,11 @@ static int hostapd_ctrl_iface_wps_get_st
 	pos = buf;
 	end = buf + buflen;
 
+	hapd = get_bss_index(bss_name, hapd->iface);
+	if (hapd == NULL) {
+		return -1;
+	}
+
 	ret = os_snprintf(pos, end - pos, "PBC Status: %s\n",
 			  pbc_status_str(hapd->wps_stats.pbc_status));
 
@@ -1257,7 +1293,7 @@ static int hostapd_ctrl_iface_get_key_mg
 
 
 static int hostapd_ctrl_iface_get_config(struct hostapd_data *hapd,
-					 char *buf, size_t buflen)
+					 const char *bss_name, char *buf, size_t buflen)
 {
 	int ret;
 	char *pos, *end;
@@ -1265,6 +1301,11 @@ static int hostapd_ctrl_iface_get_config
 	pos = buf;
 	end = buf + buflen;
 
+	hapd = get_bss_index(bss_name, hapd->iface);
+	if (hapd == NULL) {
+		return -1;
+	}
+
 	ret = os_snprintf(pos, end - pos, "bssid=" MACSTR "\n"
 			  "ssid=%s\n",
 			  MAC2STR(hapd->own_addr),
@@ -6079,11 +6120,11 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "WPS_CHECK_PIN ", 14) == 0) {
 		reply_len = hostapd_ctrl_iface_wps_check_pin(
 			hapd, buf + 14, reply, reply_size);
-	} else if (os_strcmp(buf, "WPS_PBC") == 0) {
-		if (hostapd_wps_button_pushed(hapd, NULL))
+	} else if (os_strncmp(buf, "WPS_PBC ", 8) == 0) {
+		if (hostapd_wps_vap_button_pushed(hapd, buf + 8))
 			reply_len = -1;
-	} else if (os_strcmp(buf, "WPS_CANCEL") == 0) {
-		if (hostapd_wps_cancel(hapd))
+	} else if (os_strncmp(buf, "WPS_CANCEL ", 11) == 0) {
+		if (hostapd_wps_cancel(hapd, buf + 11))
 			reply_len = -1;
 	} else if (os_strncmp(buf, "WPS_AP_PIN ", 11) == 0) {
 		reply_len = hostapd_ctrl_iface_wps_ap_pin(hapd, buf + 11,
@@ -6091,8 +6132,8 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "WPS_CONFIG ", 11) == 0) {
 		if (hostapd_ctrl_iface_wps_config(hapd, buf + 11) < 0)
 			reply_len = -1;
-	} else if (os_strncmp(buf, "WPS_GET_STATUS", 13) == 0) {
-		reply_len = hostapd_ctrl_iface_wps_get_status(hapd, reply,
+	} else if (os_strncmp(buf, "WPS_GET_STATUS ", 15) == 0) {
+		reply_len = hostapd_ctrl_iface_wps_get_status(hapd, buf + 15, reply,
 							      reply_size);
 #ifdef CONFIG_WPS_NFC
 	} else if (os_strncmp(buf, "WPS_NFC_TAG_READ ", 17) == 0) {
@@ -6142,8 +6183,8 @@ static int hostapd_ctrl_iface_receive_pr
 		reply_len = hostapd_ctrl_iface_bss_tm_req(hapd, buf + 11,
 				reply, reply_size);
 #endif /* CONFIG_WNM */
-	} else if (os_strcmp(buf, "GET_CONFIG") == 0) {
-		reply_len = hostapd_ctrl_iface_get_config(hapd, reply,
+	} else if (os_strncmp(buf, "GET_CONFIG ", 11) == 0) {
+		reply_len = hostapd_ctrl_iface_get_config(hapd, buf + 11, reply,
 							  reply_size);
 	} else if (os_strncmp(buf, "SET ", 4) == 0) {
 		if (hostapd_ctrl_iface_set(hapd, buf + 4))
diff -Npur hostapd-2.6-orig/hostapd/hostapd_cli.c hostapd-2.6/hostapd/hostapd_cli.c
--- hostapd-2.6-orig/hostapd/hostapd_cli.c	2017-03-08 10:18:15.864478618 +0200
+++ hostapd-2.6/hostapd/hostapd_cli.c	2017-03-08 10:19:13.587282405 +0200
@@ -403,19 +403,21 @@ static int hostapd_cli_cmd_wps_pin(struc
 				   char *argv[])
 {
 	char buf[256];
-	if (argc < 2) {
-		printf("Invalid 'wps_pin' command - at least two arguments, "
-		       "UUID and PIN, are required.\n");
+	if (argc < 3) {
+		printf("Invalid 'wps_pin' command - at least three arguments, "
+		       "BSS name, UUID and PIN, are required.\n");
 		return -1;
 	}
-	if (argc > 3)
+	if (argc > 4)
+		snprintf(buf, sizeof(buf), "WPS_PIN %s %s %s %s %s",
+			 argv[0], argv[1], argv[2], argv[3], argv[4]);
+	else if (argc > 3)
 		snprintf(buf, sizeof(buf), "WPS_PIN %s %s %s %s",
 			 argv[0], argv[1], argv[2], argv[3]);
-	else if (argc > 2)
+	else
 		snprintf(buf, sizeof(buf), "WPS_PIN %s %s %s",
 			 argv[0], argv[1], argv[2]);
-	else
-		snprintf(buf, sizeof(buf), "WPS_PIN %s %s", argv[0], argv[1]);
+
 	return wpa_ctrl_command(ctrl, buf);
 }
 
@@ -449,14 +451,46 @@ static int hostapd_cli_cmd_wps_check_pin
 static int hostapd_cli_cmd_wps_pbc(struct wpa_ctrl *ctrl, int argc,
 				   char *argv[])
 {
-	return wpa_ctrl_command(ctrl, "WPS_PBC");
+	char cmd[256];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid WPS_PBC command: needs one argument:\n"
+		       "- BSS name for which VAP to push button\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "WPS_PBC %s", argv[0]);
+
+	if (res < 0 || (size_t) res >= sizeof(cmd) - 1) {
+		printf("Too long WPS_PBC command.\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
 }
 
 
 static int hostapd_cli_cmd_wps_cancel(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
 {
-	return wpa_ctrl_command(ctrl, "WPS_CANCEL");
+	char cmd[256];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid WPS_CANCEL command: needs one argument:\n"
+		       "- BSS name for which VAP to cancel WPS\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "WPS_CANCEL %s", argv[0]);
+
+	if (res < 0 || (size_t) res >= sizeof(cmd) - 1) {
+		printf("Too long WPS_CANCEL command.\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
 }
 
 
@@ -557,20 +591,22 @@ static int hostapd_cli_cmd_nfc_get_hando
 static int hostapd_cli_cmd_wps_ap_pin(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
 {
-	char buf[64];
-	if (argc < 1) {
-		printf("Invalid 'wps_ap_pin' command - at least one argument "
-		       "is required.\n");
+	char buf[256];
+	if (argc < 2) {
+		printf("Invalid 'wps_ap_pin' command - at least two arguments "
+		       "are required.\n");
 		return -1;
 	}
-	if (argc > 2)
+	if (argc > 3)
+		snprintf(buf, sizeof(buf), "WPS_AP_PIN %s %s %s %s",
+			 argv[0], argv[1], argv[2], argv[3]);
+	else if (argc > 2)
 		snprintf(buf, sizeof(buf), "WPS_AP_PIN %s %s %s",
 			 argv[0], argv[1], argv[2]);
-	else if (argc > 1)
+	else
 		snprintf(buf, sizeof(buf), "WPS_AP_PIN %s %s",
 			 argv[0], argv[1]);
-	else
-		snprintf(buf, sizeof(buf), "WPS_AP_PIN %s", argv[0]);
+
 	return wpa_ctrl_command(ctrl, buf);
 }
 
@@ -578,7 +614,23 @@ static int hostapd_cli_cmd_wps_ap_pin(st
 static int hostapd_cli_cmd_wps_get_status(struct wpa_ctrl *ctrl, int argc,
 					  char *argv[])
 {
-	return wpa_ctrl_command(ctrl, "WPS_GET_STATUS");
+	char cmd[256];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid WPS_GET_STATUS command: needs one argument:\n"
+		       "- BSS name for which VAP to get status\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "WPS_GET_STATUS %s", argv[0]);
+
+	if (res < 0 || (size_t) res >= sizeof(cmd) - 1) {
+		printf("Too long WPS_GET_STATUS command.\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
 }
 
 
@@ -590,38 +642,39 @@ static int hostapd_cli_cmd_wps_config(st
 	char key_hex[2 * 64 + 1];
 	int i;
 
-	if (argc < 1) {
-		printf("Invalid 'wps_config' command - at least two arguments "
+	if (argc < 3) {
+		printf("Invalid 'wps_config' command - at least three arguments "
 		       "are required.\n");
 		return -1;
 	}
 
 	ssid_hex[0] = '\0';
 	for (i = 0; i < SSID_MAX_LEN; i++) {
-		if (argv[0][i] == '\0')
+		if (argv[1][i] == '\0')
 			break;
-		os_snprintf(&ssid_hex[i * 2], 3, "%02x", argv[0][i]);
+		os_snprintf(&ssid_hex[i * 2], 3, "%02x", argv[1][i]);
 	}
 
 	key_hex[0] = '\0';
-	if (argc > 3) {
+	if (argc > 4) {
 		for (i = 0; i < 64; i++) {
-			if (argv[3][i] == '\0')
+			if (argv[4][i] == '\0')
 				break;
 			os_snprintf(&key_hex[i * 2], 3, "%02x",
-				    argv[3][i]);
+				    argv[4][i]);
 		}
 	}
 
-	if (argc > 3)
+	if (argc > 4)
+		snprintf(buf, sizeof(buf), "WPS_CONFIG %s %s %s %s %s",
+			 argv[0], ssid_hex, argv[2], argv[3], key_hex);
+	else if (argc > 3)
 		snprintf(buf, sizeof(buf), "WPS_CONFIG %s %s %s %s",
-			 ssid_hex, argv[1], argv[2], key_hex);
-	else if (argc > 2)
-		snprintf(buf, sizeof(buf), "WPS_CONFIG %s %s %s",
-			 ssid_hex, argv[1], argv[2]);
+			 argv[0], ssid_hex, argv[2], argv[3]);
 	else
-		snprintf(buf, sizeof(buf), "WPS_CONFIG %s %s",
-			 ssid_hex, argv[1]);
+		snprintf(buf, sizeof(buf), "WPS_CONFIG %s %s %s",
+			 argv[0], ssid_hex, argv[2]);
+
 	return wpa_ctrl_command(ctrl, buf);
 }
 #endif /* CONFIG_WPS */
@@ -697,7 +750,23 @@ static int hostapd_cli_cmd_bss_tm_req(st
 static int hostapd_cli_cmd_get_config(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
 {
-	return wpa_ctrl_command(ctrl, "GET_CONFIG");
+	char cmd[256];
+	int res;
+
+	if (argc != 1) {
+		printf("Invalid GET_CONFIG command: needs one argument:\n"
+		       "- BSS name for which VAP to get config\n");
+		return -1;
+	}
+
+	res = os_snprintf(cmd, sizeof(cmd), "GET_CONFIG %s", argv[0]);
+
+	if (res < 0 || (size_t) res >= sizeof(cmd) - 1) {
+		printf("Too long GET_CONFIG command.\n");
+		return -1;
+	}
+
+	return wpa_ctrl_command(ctrl, cmd);
 }
 
 
@@ -1856,13 +1925,13 @@ static const struct hostapd_cli_cmd host
 #endif /* CONFIG_IEEE80211W */
 #ifdef CONFIG_WPS
 	{ "wps_pin", hostapd_cli_cmd_wps_pin, NULL,
-	  "<uuid> <pin> [timeout] [addr] = add WPS Enrollee PIN" },
+	  "<BSS_name> <uuid> <pin> [timeout] [addr] = add WPS Enrollee PIN" },
 	{ "wps_check_pin", hostapd_cli_cmd_wps_check_pin, NULL,
 	  "<PIN> = verify PIN checksum" },
 	{ "wps_pbc", hostapd_cli_cmd_wps_pbc, NULL,
-	  "= indicate button pushed to initiate PBC" },
+	  "<BSS_name> = indicate button pushed to initiate PBC" },
 	{ "wps_cancel", hostapd_cli_cmd_wps_cancel, NULL,
-	  "= cancel the pending WPS operation" },
+	  "<BSS_name> = cancel the pending WPS operation" },
 #ifdef CONFIG_WPS_NFC
 	{ "wps_nfc_tag_read", hostapd_cli_cmd_wps_nfc_tag_read, NULL,
 	  "<hexdump> = report read NFC tag with WPS data" },
@@ -1874,17 +1943,17 @@ static const struct hostapd_cli_cmd host
 	  NULL },
 #endif /* CONFIG_WPS_NFC */
 	{ "wps_ap_pin", hostapd_cli_cmd_wps_ap_pin, NULL,
-	  "<cmd> [params..] = enable/disable AP PIN" },
+	  "<BSS_name> <cmd> [params..] = enable/disable AP PIN" },
 	{ "wps_config", hostapd_cli_cmd_wps_config, NULL,
-	  "<SSID> <auth> <encr> <key> = configure AP" },
+	  "<BSS_name> <SSID> <auth> <encr> <key> = configure AP" },
 	{ "wps_get_status", hostapd_cli_cmd_wps_get_status, NULL,
-	  "= show current WPS status" },
+	  "<BSS_name> = show current WPS status" },
 #endif /* CONFIG_WPS */
 	{ "disassoc_imminent", hostapd_cli_cmd_disassoc_imminent, NULL, NULL },
 	{ "ess_disassoc", hostapd_cli_cmd_ess_disassoc, NULL, NULL },
 	{ "bss_tm_req", hostapd_cli_cmd_bss_tm_req, NULL, NULL },
 	{ "get_config", hostapd_cli_cmd_get_config, NULL,
-	  "= show current configuration" },
+	  "<BSS_name> = show current configuration" },
 	{ "help", hostapd_cli_cmd_help, hostapd_cli_complete_help,
 	  "= show this usage help" },
 	{ "interface", hostapd_cli_cmd_interface, hostapd_complete_interface,
diff -Npur hostapd-2.6-orig/src/ap/wps_hostapd.c hostapd-2.6/src/ap/wps_hostapd.c
--- hostapd-2.6-orig/src/ap/wps_hostapd.c	2017-03-08 10:18:15.872478452 +0200
+++ hostapd-2.6/src/ap/wps_hostapd.c	2017-03-08 10:19:13.587282405 +0200
@@ -392,15 +392,102 @@ static int hapd_wps_reconfig_in_memory(s
 }
 
 
+static void hapd_wps_write_conf(struct hostapd_data *hapd, const struct wps_credential *cred, FILE *nconf)
+{
+	size_t i;
+	int wpa;
+
+	fprintf(nconf, "# WPS configuration - START\n");
+
+	fprintf(nconf, "wps_state=2\n");
+
+	if (is_hex(cred->ssid, cred->ssid_len)) {
+		fprintf(nconf, "ssid2=");
+		for (i = 0; i < cred->ssid_len; i++)
+			fprintf(nconf, "%02x", cred->ssid[i]);
+		fprintf(nconf, "\n");
+	} else {
+		fprintf(nconf, "ssid=");
+		for (i = 0; i < cred->ssid_len; i++)
+			fputc(cred->ssid[i], nconf);
+		fprintf(nconf, "\n");
+	}
+
+	if ((cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK)) &&
+	    (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK)))
+		wpa = 3;
+	else if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK))
+		wpa = 2;
+	else if (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK))
+		wpa = 1;
+	else
+		wpa = 0;
+
+	if (wpa) {
+		char *prefix;
+		fprintf(nconf, "wpa=%d\n", wpa);
+
+		fprintf(nconf, "wpa_key_mgmt=");
+		prefix = "";
+		if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA)) {
+			fprintf(nconf, "WPA-EAP");
+			prefix = " ";
+		}
+		if (cred->auth_type & (WPS_AUTH_WPA2PSK | WPS_AUTH_WPAPSK))
+			fprintf(nconf, "%sWPA-PSK", prefix);
+		fprintf(nconf, "\n");
+
+		fprintf(nconf, "wpa_pairwise=");
+		prefix = "";
+		if (cred->encr_type & WPS_ENCR_AES) {
+			if (hapd->iconf->hw_mode == HOSTAPD_MODE_IEEE80211AD)
+				fprintf(nconf, "GCMP");
+			else
+				fprintf(nconf, "CCMP");
+
+			prefix = " ";
+		}
+		if (cred->encr_type & WPS_ENCR_TKIP) {
+			fprintf(nconf, "%sTKIP", prefix);
+		}
+		fprintf(nconf, "\n");
+
+		if (cred->key_len >= 8 && cred->key_len < 64) {
+			fprintf(nconf, "wpa_passphrase=");
+			for (i = 0; i < cred->key_len; i++)
+				fputc(cred->key[i], nconf);
+			fprintf(nconf, "\n");
+		} else if (cred->key_len == 64) {
+			fprintf(nconf, "wpa_psk=");
+			for (i = 0; i < cred->key_len; i++)
+				fputc(cred->key[i], nconf);
+			fprintf(nconf, "\n");
+		} else {
+			wpa_printf(MSG_WARNING, "WPS: Invalid key length %lu "
+				   "for WPA/WPA2",
+				   (unsigned long) cred->key_len);
+		}
+
+		fprintf(nconf, "auth_algs=1\n");
+	} else {
+		/*
+		 * WPS 2.0 does not allow WEP to be configured, so no need to
+		 * process that option here either.
+		 */
+		fprintf(nconf, "auth_algs=1\n");
+	}
+
+	fprintf(nconf, "# WPS configuration - END\n");
+}
+
 static int hapd_wps_cred_cb(struct hostapd_data *hapd, void *ctx)
 {
 	const struct wps_credential *cred = ctx;
 	FILE *oconf, *nconf;
-	size_t len, i;
+	size_t len;
 	char *tmp_fname;
 	char buf[1024];
-	int multi_bss;
-	int wpa;
+	int match_bss, written = 0;
 
 	if (hapd->wps == NULL)
 		return 0;
@@ -492,93 +579,23 @@ static int hapd_wps_cred_cb(struct hosta
 		return -1;
 	}
 
-	fprintf(nconf, "# WPS configuration - START\n");
-
-	fprintf(nconf, "wps_state=2\n");
-
-	if (is_hex(cred->ssid, cred->ssid_len)) {
-		fprintf(nconf, "ssid2=");
-		for (i = 0; i < cred->ssid_len; i++)
-			fprintf(nconf, "%02x", cred->ssid[i]);
-		fprintf(nconf, "\n");
-	} else {
-		fprintf(nconf, "ssid=");
-		for (i = 0; i < cred->ssid_len; i++)
-			fputc(cred->ssid[i], nconf);
-		fprintf(nconf, "\n");
-	}
-
-	if ((cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK)) &&
-	    (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK)))
-		wpa = 3;
-	else if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA2PSK))
-		wpa = 2;
-	else if (cred->auth_type & (WPS_AUTH_WPA | WPS_AUTH_WPAPSK))
-		wpa = 1;
-	else
-		wpa = 0;
-
-	if (wpa) {
-		char *prefix;
-		fprintf(nconf, "wpa=%d\n", wpa);
-
-		fprintf(nconf, "wpa_key_mgmt=");
-		prefix = "";
-		if (cred->auth_type & (WPS_AUTH_WPA2 | WPS_AUTH_WPA)) {
-			fprintf(nconf, "WPA-EAP");
-			prefix = " ";
-		}
-		if (cred->auth_type & (WPS_AUTH_WPA2PSK | WPS_AUTH_WPAPSK))
-			fprintf(nconf, "%sWPA-PSK", prefix);
-		fprintf(nconf, "\n");
-
-		fprintf(nconf, "wpa_pairwise=");
-		prefix = "";
-		if (cred->encr_type & WPS_ENCR_AES) {
-			if (hapd->iconf->hw_mode == HOSTAPD_MODE_IEEE80211AD)
-				fprintf(nconf, "GCMP");
-			else
-				fprintf(nconf, "CCMP");
-
-			prefix = " ";
-		}
-		if (cred->encr_type & WPS_ENCR_TKIP) {
-			fprintf(nconf, "%sTKIP", prefix);
+	match_bss = 0;
+	while (fgets(buf, sizeof(buf), oconf)) {
+		if (os_strncmp(buf, "interface=", 10) == 0 &&
+			os_strncmp(buf + 10, hapd->conf->iface, strlen(hapd->conf->iface)) == 0) {
+			match_bss = 1;
 		}
-		fprintf(nconf, "\n");
 
-		if (cred->key_len >= 8 && cred->key_len < 64) {
-			fprintf(nconf, "wpa_passphrase=");
-			for (i = 0; i < cred->key_len; i++)
-				fputc(cred->key[i], nconf);
-			fprintf(nconf, "\n");
-		} else if (cred->key_len == 64) {
-			fprintf(nconf, "wpa_psk=");
-			for (i = 0; i < cred->key_len; i++)
-				fputc(cred->key[i], nconf);
-			fprintf(nconf, "\n");
-		} else {
-			wpa_printf(MSG_WARNING, "WPS: Invalid key length %lu "
-				   "for WPA/WPA2",
-				   (unsigned long) cred->key_len);
+		if (os_strncmp(buf, "bss=", 4) == 0) {
+			if (os_strncmp(buf + 4, hapd->conf->iface, strlen(buf + 4) - 1) == 0) {
+				match_bss = 1;
+			}
+			else {
+				match_bss = 0;
+			}
 		}
 
-		fprintf(nconf, "auth_algs=1\n");
-	} else {
-		/*
-		 * WPS 2.0 does not allow WEP to be configured, so no need to
-		 * process that option here either.
-		 */
-		fprintf(nconf, "auth_algs=1\n");
-	}
-
-	fprintf(nconf, "# WPS configuration - END\n");
-
-	multi_bss = 0;
-	while (fgets(buf, sizeof(buf), oconf)) {
-		if (os_strncmp(buf, "bss=", 4) == 0)
-			multi_bss = 1;
-		if (!multi_bss &&
+		if (match_bss &&
 		    (str_starts(buf, "ssid=") ||
 		     str_starts(buf, "ssid2=") ||
 		     str_starts(buf, "auth_algs=") ||
@@ -591,6 +608,12 @@ static int hapd_wps_cred_cb(struct hosta
 		     str_starts(buf, "rsn_pairwise=") ||
 		     str_starts(buf, "wpa_key_mgmt=") ||
 		     str_starts(buf, "wpa_passphrase="))) {
+
+			if (!written) {
+				hapd_wps_write_conf(hapd, cred, nconf);
+				written = 1;
+			}
+
 			fprintf(nconf, "#WPS# %s", buf);
 		} else
 			fprintf(nconf, "%s", buf);
@@ -623,7 +646,7 @@ static int hapd_wps_cred_cb(struct hosta
 static int hostapd_wps_cred_cb(void *ctx, const struct wps_credential *cred)
 {
 	struct hostapd_data *hapd = ctx;
-	return hostapd_wps_for_each(hapd, hapd_wps_cred_cb, (void *) cred);
+	return hapd_wps_cred_cb(hapd, (void *) cred);
 }
 
 
@@ -1305,7 +1328,7 @@ int hostapd_wps_add_pin(struct hostapd_d
 			return -1;
 		data.uuid = u;
 	}
-	if (hostapd_wps_for_each(hapd, wps_add_pin, &data) < 0)
+	if (wps_add_pin(hapd, &data) < 0)
 		return -1;
 	return data.added ? 0 : -1;
 }
@@ -1330,6 +1353,27 @@ static int wps_button_pushed(struct host
 }
 
 
+int hostapd_wps_vap_button_pushed(struct hostapd_data *hapd, const char *buf)
+{
+	int ret;
+	struct wps_button_pushed_ctx ctx;
+	os_memset(&ctx, 0, sizeof(ctx));
+	ctx.p2p_dev_addr = NULL;
+
+	hapd = get_bss_index(buf, hapd->iface);
+
+	if (hapd == NULL) {
+		return -1;
+	}
+
+	ret = wps_button_pushed(hapd, &ctx);
+
+	if (ret == 0 && !ctx.count)
+		ret = -1;
+
+	return ret;
+}
+
 int hostapd_wps_button_pushed(struct hostapd_data *hapd,
 			      const u8 *p2p_dev_addr)
 {
@@ -1363,13 +1407,18 @@ static int wps_cancel(struct hostapd_dat
 }
 
 
-int hostapd_wps_cancel(struct hostapd_data *hapd)
+int hostapd_wps_cancel(struct hostapd_data *hapd, const char *buf)
 {
 	struct wps_cancel_ctx ctx;
 	int ret;
 
+	hapd = get_bss_index(buf, hapd->iface);
+	if (hapd == NULL) {
+		return -1;
+	}
+
 	os_memset(&ctx, 0, sizeof(ctx));
-	ret = hostapd_wps_for_each(hapd, wps_cancel, &ctx);
+	ret = wps_cancel(hapd, &ctx);
 	if (ret == 0 && !ctx.count)
 		ret = -1;
 	return ret;
@@ -1589,7 +1638,7 @@ static int wps_ap_pin_disable(struct hos
 void hostapd_wps_ap_pin_disable(struct hostapd_data *hapd)
 {
 	wpa_printf(MSG_DEBUG, "WPS: Disabling AP PIN");
-	hostapd_wps_for_each(hapd, wps_ap_pin_disable, NULL);
+	wps_ap_pin_disable(hapd, NULL);
 }
 
 
@@ -1625,7 +1674,7 @@ const char * hostapd_wps_ap_pin_random(s
 		return NULL;
 	os_snprintf(data.pin_txt, sizeof(data.pin_txt), "%08u", pin);
 	data.timeout = timeout;
-	hostapd_wps_for_each(hapd, wps_ap_pin_set, &data);
+	wps_ap_pin_set(hapd, &data);
 	return hapd->conf->ap_pin;
 }
 
@@ -1646,7 +1695,7 @@ int hostapd_wps_ap_pin_set(struct hostap
 	if (os_snprintf_error(sizeof(data.pin_txt), ret))
 		return -1;
 	data.timeout = timeout;
-	return hostapd_wps_for_each(hapd, wps_ap_pin_set, &data);
+	return wps_ap_pin_set(hapd, &data);
 }
 
 
diff -Npur hostapd-2.6-orig/src/ap/wps_hostapd.h hostapd-2.6/src/ap/wps_hostapd.h
--- hostapd-2.6-orig/src/ap/wps_hostapd.h	2017-03-08 10:18:15.874478410 +0200
+++ hostapd-2.6/src/ap/wps_hostapd.h	2017-03-08 10:19:13.588282382 +0200
@@ -19,9 +19,10 @@ void hostapd_update_wps(struct hostapd_d
 void hostapd_wps_eap_completed(struct hostapd_data *hapd);
 int hostapd_wps_add_pin(struct hostapd_data *hapd, const u8 *addr,
 			const char *uuid, const char *pin, int timeout);
+int hostapd_wps_vap_button_pushed(struct hostapd_data *hapd, const char *buf);
 int hostapd_wps_button_pushed(struct hostapd_data *hapd,
 			      const u8 *p2p_dev_addr);
-int hostapd_wps_cancel(struct hostapd_data *hapd);
+int hostapd_wps_cancel(struct hostapd_data *hapd, const char *buf);
 int hostapd_wps_get_mib_sta(struct hostapd_data *hapd, const u8 *addr,
 			    char *buf, size_t buflen);
 void hostapd_wps_ap_pin_disable(struct hostapd_data *hapd);
@@ -43,6 +44,7 @@ int hostapd_wps_nfc_report_handover(stru
 struct wpabuf * hostapd_wps_nfc_token_gen(struct hostapd_data *hapd, int ndef);
 int hostapd_wps_nfc_token_enable(struct hostapd_data *hapd);
 void hostapd_wps_nfc_token_disable(struct hostapd_data *hapd);
+struct hostapd_data *get_bss_index(const char *cmd, struct hostapd_iface *iface);
 
 #else /* CONFIG_WPS */
 
