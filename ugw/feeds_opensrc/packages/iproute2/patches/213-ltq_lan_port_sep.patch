--- a/include/linux/if_link.h
+++ b/include/linux/if_link.h
@@ -4,6 +4,14 @@
 #include <linux/types.h>
 #include <linux/netlink.h>
 
+/* ethsw section */
+enum
+{
+	IFLA_ETHSW_UNSPEC,
+	IFLA_ETHSW_PORTS,
+	__IFLA_ETHSW_MAX,
+};
+
 /* This struct should be in sync with struct rtnl_link_stats64 */
 struct rtnl_link_stats {
 	__u32	rx_packets;		/* total packets received	*/

--- a/ip/Makefile
+++ b/ip/Makefile
@@ -6,7 +6,7 @@ IPOBJ=ip.o ipaddress.o ipaddrlabel.o ipr
     iplink_macvlan.o iplink_macvtap.o ipl2tp.o link_vti.o link_vti6.o \
     iplink_vxlan.o tcp_metrics.o iplink_ipoib.o ipnetconf.o link_ip6tnl.o \
     link_iptnl.o link_gre6.o iplink_bond.o iplink_bond_slave.o iplink_hsr.o \
-    iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o
+    iplink_bridge.o iplink_bridge_slave.o ipfou.o iplink_ipvlan.o iplink_ethsw.o
 
 RTMONOBJ=rtmon.o
 
--- /dev/null
+++ b/ip/iplink_ethsw.c
@@ -0,0 +1,55 @@
+/*
+ * iplink_ethsw.c        virtual switch port device support
+ *
+ *              This program is free software; you can redistribute it and/or
+ *              modify it under the terms of the GNU General Public License
+ *              as published by the Free Software Foundation; either version
+ *              2 of the License, or (at your option) any later version.
+ *
+ * Authors:     Kamal Eradath
+ * 
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <linux/if_link.h>
+
+#include "rt_names.h"
+#include "utils.h"
+#include "ip_common.h"
+
+static void usage(void)
+{
+        fprintf(stderr,
+                "Usage: ... ethsw ports < switch_port_number >\n"
+        );
+}
+
+static int ethsw_parse_opt(struct link_util *lu, int argc, char **argv,struct nlmsghdr *n)
+{
+			__u32 port = -1;
+        while (argc > 0) {
+                if (matches(*argv, "ports") == 0) {
+                        char ports[8]="";
+                        NEXT_ARG();
+
+			strncpy(ports,*argv,sizeof(ports)-1);
+			port=atoi(ports);
+			addattr_l(n, 1024, IFLA_ETHSW_PORTS,ports,strlen(ports));	
+		} else if (matches(*argv, "help") == 0) {
+			usage();
+			return(-1);			
+		}
+                argc--, argv++;
+        }
+
+        return 0;
+}
+
+struct link_util ethsw_link_util = {
+        .id = "ethsw",
+        .parse_opt = ethsw_parse_opt,
+};
+
