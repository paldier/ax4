--- a/include/linux/pkt_cls.h
+++ b/include/linux/pkt_cls.h
@@ -188,6 +188,7 @@ enum {
 	TCA_U32_INDEV,
 	TCA_U32_PCNT,
 	TCA_U32_MARK,
+	TCA_U32_EXTMARK,
 	__TCA_U32_MAX
 };
 
--- a/tc/f_u32.c
+++ b/tc/f_u32.c
@@ -990,6 +990,40 @@ static int parse_mark(int *argc_p, char
 	return res;
 }
 
+static int parse_extmark(int *argc_p, char ***argv_p, struct nlmsghdr *n)
+{
+	int res = -1;
+	int argc = *argc_p;
+	char **argv = *argv_p;
+	struct tc_u32_mark extmark;
+
+	if (argc <= 1)
+		return -1;
+
+	if (get_u32(&extmark.val, *argv, 0)) {
+		fprintf(stderr, "Illegal \"extmark\" value\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	if (get_u32(&extmark.mask, *argv, 0)) {
+		fprintf(stderr, "Illegal \"extmark\" mask\n");
+		return -1;
+	}
+	NEXT_ARG();
+
+	if ((extmark.val & extmark.mask) != extmark.val) {
+		fprintf(stderr, "Illegal \"extmark\" (impossible combination)\n");
+		return -1;
+	}
+
+	addattr_l(n, MAX_MSG, TCA_U32_EXTMARK, &extmark, sizeof(extmark));
+	res = 0;
+
+	*argc_p = argc;
+	*argv_p = argv;
+	return res;
+}
 static int parse_selector(int *argc_p, char ***argv_p,
 			  struct tc_u32_sel *sel, struct nlmsghdr *n)
 {
@@ -1027,6 +1061,9 @@ static int parse_selector(int *argc_p, c
 	} else if (matches(*argv, "mark") == 0) {
 		NEXT_ARG();
 		res = parse_mark(&argc, &argv, n);
+	} else if (matches(*argv, "extmark") == 0) {
+		NEXT_ARG();
+		res = parse_extmark(&argc, &argv, n);
 	} else if (matches(*argv, "ether") == 0) {
 		NEXT_ARG();
 		res = parse_ether(&argc, &argv, sel);
@@ -1540,6 +1577,16 @@ static int u32_print_opt(struct filter_u
 				mark->val, mark->mask, mark->success);
 		}
 	}
+	
+	if (tb[TCA_U32_EXTMARK]) {
+		struct tc_u32_mark *mark = RTA_DATA(tb[TCA_U32_EXTMARK]);
+		if (RTA_PAYLOAD(tb[TCA_U32_EXTMARK]) < sizeof(*mark)) {
+			fprintf(f, "\n  Invalid extmark (kernel&iproute2 mismatch)\n");
+		} else {
+			fprintf(f, "\n  extmark 0x%04x 0x%04x (success %d)",
+				mark->val, mark->mask, mark->success);
+		}
+	}
 
 	if (sel) {
 		if (sel->nkeys) {
