diff -Naur a/include/linux/netfilter/xt_GROUP.h b/include/linux/netfilter/xt_GROUP.h
--- a/include/linux/netfilter/xt_GROUP.h	1970-01-01 05:30:00.000000000 +0530
+++ b/include/linux/netfilter/xt_GROUP.h	2017-07-18 21:43:06.000000000 +0530
@@ -0,0 +1,6 @@
+#ifndef _XT_GROUP_H_target
+#define _XT_GROUP_H_target
+
+#include <linux/netfilter/xt_group.h>
+
+#endif	/*_XT_GROUP_H_target*/

diff -Naur iptables-1.4.21/extensions/libxt_GROUP.c iptables-1.4.21_new/extensions/libxt_GROUP.c
--- iptables-1.4.21/extensions/libxt_GROUP.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.21_new/extensions/libxt_GROUP.c	2017-07-19 08:16:48.000000000 +0530
@@ -0,0 +1,213 @@
+#include <stdbool.h>
+#include <stdio.h>
+#include <linux/types.h>
+#include <xtables.h>
+#include <linux/netfilter/xt_GROUP.h>
+
+/* Version 0 */
+struct xt_group_target_info {
+	uint8_t groupId;
+};
+
+/* Version 1 */
+enum {
+	XT_GROUP_SET=0,
+};
+
+struct xt_group_target_info_v1 {
+	uint8_t groupId;
+};
+
+enum {
+	O_SET_GROUP = 0,
+	F_SET_GROUP = 1 << O_SET_GROUP,
+	F_ANY		= F_SET_GROUP,
+};
+
+static void GROUP_help(void)
+{
+	printf(
+"GROUP target options:\n"
+"  --set-group value                   Set groupId (1..255)\n");
+}
+
+static const struct xt_option_entry GROUP_opts[] = {
+	{.name = "set-group", .id = O_SET_GROUP, .type = XTTYPE_UINT32,
+	 .excl = F_ANY},
+	XTOPT_TABLEEND,
+};
+
+static const struct xt_option_entry group_tg_opts[] = {
+	{.name = "set-group", .id = O_SET_GROUP, .type = XTTYPE_UINT32,
+	 .excl = F_ANY},
+	XTOPT_TABLEEND,
+};
+
+static void group_tg_help(void)
+{
+	printf(
+"GROUP target options:\n"
+"  --set-group value		set groupId (1..255)\n"
+"\n");
+}
+
+static void GROUP_parse_v0(struct xt_option_call *cb)
+{
+	struct xt_group_target_info *groupinfo = cb->data;
+
+	xtables_option_parse(cb);
+	switch (cb->entry->id) {
+	case O_SET_GROUP:
+		groupinfo->groupId = cb->val.u8;
+		break;
+	default:
+		xtables_error(PARAMETER_PROBLEM,
+			   "GROUP target: kernel too old for --%s",
+			   cb->entry->name);
+	}
+}
+
+static void GROUP_check(struct xt_fcheck_call *cb)
+{
+	if (cb->xflags == 0)
+		xtables_error(PARAMETER_PROBLEM,
+		           "GROUP target: Parameter --set/xxx-group"
+			   " is required");
+}
+
+static void GROUP_parse_v1(struct xt_option_call *cb)
+{
+	struct xt_group_target_info_v1 *groupinfo = cb->data;
+
+	xtables_option_parse(cb);
+	switch (cb->entry->id) {
+	case O_SET_GROUP:
+	    //--groupinfo->mode = XT_GROUP_SET;
+		break;
+	}
+	groupinfo->groupId = cb->val.u8;
+}
+
+static void group_tg_parse(struct xt_option_call *cb)
+{
+	struct xt_group_info *info = cb->data;
+
+	xtables_option_parse(cb);
+	switch (cb->entry->id) {
+	case O_SET_GROUP:
+		info->groupId = cb->val.u8;
+		break;
+	}
+}
+
+static void group_tg_check(struct xt_fcheck_call *cb)
+{
+	if (cb->xflags == 0)
+		xtables_error(PARAMETER_PROBLEM, "GROUP: One of the --set-group, "
+		           "--{xxx}-group options is required");
+}
+
+static void
+print_group(uint8_t groupId)
+{
+	printf(" %zu", groupId);
+}
+
+static void GROUP_print_v0(const void *ip,
+                          const struct xt_entry_target *target, int numeric)
+{
+	const struct xt_group_target_info *groupinfo =
+		(const struct xt_group_target_info *)target->data;
+	printf(" GROUP set");
+	print_group(groupinfo->groupId);
+}
+
+static void GROUP_save_v0(const void *ip, const struct xt_entry_target *target)
+{
+	const struct xt_group_target_info *groupinfo =
+		(const struct xt_group_target_info *)target->data;
+
+	printf(" --set-group");
+	print_group(groupinfo->groupId);
+}
+
+static void GROUP_print_v1(const void *ip, const struct xt_entry_target *target,
+                          int numeric)
+{
+	const struct xt_group_target_info_v1 *groupinfo =
+		(const struct xt_group_target_info_v1 *)target->data;
+
+	print_group(groupinfo->groupId);
+}
+
+static void group_tg_print(const void *ip, const struct xt_entry_target *target,
+                          int numeric)
+{
+	const struct xt_group_info *info = (const void *)target->data;
+	printf(" GROUP %zu", info->groupId);
+}
+
+static void GROUP_save_v1(const void *ip, const struct xt_entry_target *target)
+{
+	const struct xt_group_target_info_v1 *groupinfo =
+		(const struct xt_group_target_info_v1 *)target->data;
+
+	print_group(groupinfo->groupId);
+}
+
+static void group_tg_save(const void *ip, const struct xt_entry_target *target)
+{
+	const struct xt_group_info *info = (const void *)target->data;
+
+	printf(" --set-group %zu", info->groupId);
+}
+
+static struct xtables_target group_tg_reg[] = {
+	{
+		.family        = NFPROTO_UNSPEC,
+		.name          = "GROUP",
+		.version       = XTABLES_VERSION,
+		.revision      = 0,
+		.size          = XT_ALIGN(sizeof(struct xt_group_target_info)),
+		.userspacesize = XT_ALIGN(sizeof(struct xt_group_target_info)),
+		.help          = GROUP_help,
+		.print         = GROUP_print_v0,
+		.save          = GROUP_save_v0,
+		.x6_parse      = GROUP_parse_v0,
+		.x6_fcheck     = GROUP_check,
+		.x6_options    = GROUP_opts,
+	},
+	{
+		.family        = NFPROTO_IPV4,
+		.name          = "GROUP",
+		.version       = XTABLES_VERSION,
+		.revision      = 1,
+		.size          = XT_ALIGN(sizeof(struct xt_group_target_info_v1)),
+		.userspacesize = XT_ALIGN(sizeof(struct xt_group_target_info_v1)),
+		.help          = GROUP_help,
+		.print         = GROUP_print_v1,
+		.save          = GROUP_save_v1,
+		.x6_parse      = GROUP_parse_v1,
+		.x6_fcheck     = GROUP_check,
+		.x6_options    = GROUP_opts,
+	},
+	{
+		.version       = XTABLES_VERSION,
+		.name          = "GROUP",
+		.revision      = 2,
+		.family        = NFPROTO_UNSPEC,
+		.size          = XT_ALIGN(sizeof(struct xt_group_info)),
+		.userspacesize = XT_ALIGN(sizeof(struct xt_group_info)),
+		.help          = group_tg_help,
+		.print         = group_tg_print,
+		.save          = group_tg_save,
+		.x6_parse      = group_tg_parse,
+		.x6_fcheck     = group_tg_check,
+		.x6_options    = group_tg_opts,
+	},
+};
+
+void _init(void)
+{
+	xtables_register_targets(group_tg_reg, ARRAY_SIZE(group_tg_reg));
+}
diff -Naur iptables-1.4.21/extensions/libxt_group.c iptables-1.4.21_new/extensions/libxt_group.c
--- iptables-1.4.21/extensions/libxt_group.c	1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.21_new/extensions/libxt_group.c	2017-07-18 22:11:19.000000000 +0530
@@ -0,0 +1,105 @@
+#include <stdbool.h>
+#include <stdio.h>
+#include <linux/types.h>
+#include <xtables.h>
+#include <linux/netfilter/xt_group.h>
+
+enum {
+	O_GROUP = 0,
+};
+
+static void group_mt_help(void)
+{
+	printf("group match options: TBD\n");
+}
+
+static const struct xt_option_entry group_mt_opts[] = {
+	{.name = "group", .id = O_GROUP, .type = XTTYPE_UINT32,
+	 .flags = XTOPT_MAND},
+	XTOPT_TABLEEND,
+};
+
+static void group_mt_parse(struct xt_option_call *cb)
+{
+	struct xt_group_info *info = cb->data;
+
+	xtables_option_parse(cb);
+}
+
+static void group_parse(struct xt_option_call *cb)
+{
+}
+
+static void print_group(uint32_t gid)
+{
+	printf("%s: %zu\n", __func__, gid);
+}
+
+static void
+group_mt_print(const void *ip, const struct xt_entry_match *match, int numeric)
+{
+	const struct xt_group_info *info = (const void *)match->data;
+
+	printf(" group match");
+	print_group(info->groupId);
+}
+
+static void
+group_print(const void *ip, const struct xt_entry_match *match, int numeric)
+{
+	const struct xt_group_info *info = (const void *)match->data;
+
+	printf(" GROUP match");
+	print_group(info->groupId);
+}
+
+static void group_mt_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_group_info *info = (const void *)match->data;
+
+	printf(" --group");
+	print_group(info->groupId);
+}
+
+static void
+group_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_group_info *info = (const void *)match->data;
+
+	printf(" --group");
+	print_group(info->groupId);
+}
+
+static struct xtables_match group_mt_reg[] = {
+	{
+		.family        = NFPROTO_UNSPEC,
+		.name          = "group",
+		.revision      = 0,
+		.version       = XTABLES_VERSION,
+		.size          = XT_ALIGN(sizeof(struct xt_group_info)),
+		.userspacesize = XT_ALIGN(sizeof(struct xt_group_info)),
+		.help          = group_mt_help,
+		.print         = group_print,
+		.save          = group_save,
+		.x6_parse      = group_parse,
+		.x6_options    = group_mt_opts,
+	},
+	{
+		.version       = XTABLES_VERSION,
+		.name          = "group",
+		.revision      = 1,
+		.family        = NFPROTO_UNSPEC,
+		.size          = XT_ALIGN(sizeof(struct xt_group_info)),
+		.userspacesize = XT_ALIGN(sizeof(struct xt_group_info)),
+		.help          = group_mt_help,
+		.print         = group_mt_print,
+		.save          = group_mt_save,
+		.x6_parse      = group_mt_parse,
+		.x6_options    = group_mt_opts,
+	},
+};
+
+void _init(void)
+{
+	xtables_register_matches(group_mt_reg, ARRAY_SIZE(group_mt_reg));
+}

diff -Naur iptables-1.4.21_org/include/linux/netfilter/xt_group.h iptables-1.4.21/include/linux/netfilter/xt_group.h
--- iptables-1.4.21_org/include/linux/netfilter/xt_group.h      1970-01-01 05:30:00.000000000 +0530
+++ iptables-1.4.21/include/linux/netfilter/xt_group.h  2017-11-23 09:10:46.668860452 +0530
@@ -0,0 +1,35 @@
+#ifndef __XT_GROUP_H__
+#define __XT_GROUP_H__
+
+#include <linux/types.h>
+
+#define GROUP_NAMESZ   16
+
+/*! \brief     Group information */
+typedef struct xt_group_info {
+       uint32_t groupId;               /*! Group ID */
+       char name[GROUP_NAMESZ];
+} xt_group_info_t;
+
+/*! \brief     Group Listener's callback function
+\param[in] skb Pointer to skb
+\param[in] ct Pointer to conntrack
+\param[in] info Group information  
+*/
+typedef void (*nf_group_callback)(struct sk_buff *skb, 
+                       struct nf_conn *ct, 
+                       const struct xt_group_info *info);
+
+/*! \brief  API to register a listeners 
+\param[in] nf_group_callback Callback function to be called on hitting the target
+\return On Error -1 is returned. On success the registration Id is returned. This ID should be used to unregister the listener.  
+*/
+uint32_t nf_register_groupListener(nf_group_callback nfGroupListener);
+
+/*! \brief  API to unregister a listeners 
+\param[in] regId  Listener's registration ID. This ID is provided by xt_group during registration.
+\return Returns true on success and false on failure.   
+*/
+bool nf_unregister_groupListener(uint32_t regId);
+
+#endif /*__XT_GROUP_H__*/
