diff -Npur compat-wireless-2016-05-12-modi/include/net/cfg80211.h compat-wireless-2016-05-12-modif/include/net/cfg80211.h
--- compat-wireless-2016-05-12-modi/include/net/cfg80211.h	2016-10-18 14:08:30.000000000 +0300
+++ compat-wireless-2016-05-12-modif/include/net/cfg80211.h	2016-10-18 15:16:05.000000000 +0300
@@ -67,6 +67,25 @@ struct wiphy;
  * wireless hardware capability structures
  */
 
+/** enum ieee80211_band - supported frequency bands
+ *
+ * The bands are assigned this way because the supported
+ * bitrates differ in these bands.
+ *
+ * @IEEE80211_BAND_2GHZ: 2.4GHz ISM band
+ * @IEEE80211_BAND_5GHZ: around 5GHz band (4.9-5.7)
+ * @IEEE80211_BAND_60GHZ: around 60 GHz band (58.32 - 64.80 GHz)
+ * @IEEE80211_NUM_BANDS: number of defined bands
+ */
+enum ieee80211_band {
+	IEEE80211_BAND_2GHZ = NL80211_BAND_2GHZ,
+	IEEE80211_BAND_5GHZ = NL80211_BAND_5GHZ,
+	IEEE80211_BAND_60GHZ = NL80211_BAND_60GHZ,
+
+	/* keep last */
+	IEEE80211_NUM_BANDS
+};
+
 /**
  * enum ieee80211_channel_flags - channel flags
  *
@@ -821,6 +840,7 @@ struct station_parameters {
 	u8 ext_capab_len;
 	u8 *resp;
 	size_t resp_len;
+	u32 rssi;
 	const u8 *supported_channels;
 	u8 supported_channels_len;
 	const u8 *supported_oper_classes;
@@ -892,6 +912,48 @@ int cfg80211_check_station_change(struct
 				  struct station_parameters *params,
 				  enum cfg80211_station_type statype);
 
+/** enum station_info_flags - station information flags
+ *
+ * Used by the driver to indicate which info in &struct station_info
+ * it has filled in during get_station() or dump_station().
+ */
+enum station_info_flags {
+	STATION_INFO_INACTIVE_TIME		= 1ULL << NL80211_STA_INFO_INACTIVE_TIME,
+	STATION_INFO_RX_BYTES			= 1ULL << NL80211_STA_INFO_RX_BYTES,
+	STATION_INFO_TX_BYTES			= 1ULL << NL80211_STA_INFO_TX_BYTES,
+	STATION_INFO_LLID			= 1ULL << NL80211_STA_INFO_LLID,
+	STATION_INFO_PLID			= 1ULL << NL80211_STA_INFO_PLID,
+	STATION_INFO_PLINK_STATE		= 1ULL << NL80211_STA_INFO_PLINK_STATE,
+	STATION_INFO_SIGNAL			= 1ULL << NL80211_STA_INFO_SIGNAL,
+	STATION_INFO_TX_BITRATE			= 1ULL << NL80211_STA_INFO_TX_BITRATE,
+	STATION_INFO_RX_PACKETS			= 1ULL << NL80211_STA_INFO_RX_PACKETS,
+	STATION_INFO_TX_PACKETS			= 1ULL << NL80211_STA_INFO_TX_PACKETS,
+	STATION_INFO_TX_RETRIES			= 1ULL << NL80211_STA_INFO_TX_RETRIES,
+	STATION_INFO_TX_FAILED			= 1ULL << NL80211_STA_INFO_TX_FAILED,
+	STATION_INFO_SIGNAL_AVG			= 1ULL << NL80211_STA_INFO_SIGNAL_AVG,
+	STATION_INFO_RX_BITRATE			= 1ULL << NL80211_STA_INFO_RX_BITRATE,
+	STATION_INFO_BSS_PARAM			= 1ULL << NL80211_STA_INFO_BSS_PARAM,
+	STATION_INFO_CONNECTED_TIME		= 1ULL << NL80211_STA_INFO_CONNECTED_TIME,
+	STATION_INFO_STA_FLAGS			= 1ULL << NL80211_STA_INFO_STA_FLAGS,
+	STATION_INFO_BEACON_LOSS_COUNT		= 1ULL << NL80211_STA_INFO_BEACON_LOSS,
+	STATION_INFO_T_OFFSET			= 1ULL << NL80211_STA_INFO_T_OFFSET,
+	STATION_INFO_LOCAL_PM			= 1ULL << NL80211_STA_INFO_LOCAL_PM,
+	STATION_INFO_PEER_PM			= 1ULL << NL80211_STA_INFO_PEER_PM,
+	STATION_INFO_NONPEER_PM			= 1ULL << NL80211_STA_INFO_NONPEER_PM,
+	STATION_INFO_RX_BYTES64			= 1ULL << NL80211_STA_INFO_RX_BYTES64,
+	STATION_INFO_TX_BYTES64			= 1ULL << NL80211_STA_INFO_TX_BYTES64,
+	STATION_INFO_CHAIN_SIGNAL		= 1ULL << NL80211_STA_INFO_CHAIN_SIGNAL,
+	STATION_INFO_CHAIN_SIGNAL_AVG		= 1ULL << NL80211_STA_INFO_CHAIN_SIGNAL_AVG,
+	STATION_INFO_MAX_RSSI			= 1ULL << NL80211_STA_INFO_MAX_RSSI,
+	STATION_INFO_EXPECTED_THROUGHPUT	= 1ULL << NL80211_STA_INFO_EXPECTED_THROUGHPUT,
+	STATION_INFO_RX_DROP_MISC		= 1ULL << NL80211_STA_INFO_RX_DROP_MISC,
+	STATION_INFO_BEACON_RX			= 1ULL << NL80211_STA_INFO_BEACON_RX,
+	STATION_INFO_BEACON_SIGNAL_AVG		= 1ULL << NL80211_STA_INFO_BEACON_SIGNAL_AVG,
+	STATION_INFO_TID_STATS			= 1ULL << NL80211_STA_INFO_TID_STATS,
+	STATION_INFO_RX_DURATION		= 1ULL << NL80211_STA_INFO_RX_DURATION,
+	STATION_INFO_PAD			= 1ULL << NL80211_STA_INFO_PAD,
+};
+
 /**
  * enum station_info_rate_flags - bitrate info flags
  *
@@ -1097,6 +1181,8 @@ struct station_info {
 	u64 rx_duration;
 	u8 rx_beacon_signal_avg;
 	struct cfg80211_tid_stats pertid[IEEE80211_NUM_TIDS + 1];
+
+	u32 max_rssi;
 };
 
 /**
@@ -2857,9 +2943,9 @@ struct cfg80211_ops {
  *	beaconing mode (AP, IBSS, Mesh, ...).
  */
 enum wiphy_flags {
-	/* use hole at 0 */
-	/* use hole at 1 */
-	/* use hole at 2 */
+	WIPHY_FLAG_CUSTOM_REGULATORY		= BIT(0),
+	WIPHY_FLAG_STRICT_REGULATORY		= BIT(1),
+	WIPHY_FLAG_DISABLE_BEACON_HINTS		= BIT(2),
 	WIPHY_FLAG_NETNS_OK			= BIT(3),
 	WIPHY_FLAG_PS_ON_BY_DEFAULT		= BIT(4),
 	WIPHY_FLAG_4ADDR_AP			= BIT(5),
diff -Npur compat-wireless-2016-05-12-modi/include/uapi/linux/nl80211.h compat-wireless-2016-05-12-modif/include/uapi/linux/nl80211.h
--- compat-wireless-2016-05-12-modi/include/uapi/linux/nl80211.h	2016-10-18 13:28:23.000000000 +0300
+++ compat-wireless-2016-05-12-modif/include/uapi/linux/nl80211.h	2016-10-18 13:00:57.000000000 +0300
@@ -1700,6 +1700,8 @@ enum nl80211_commands {
  *	data is in the format defined for the payload of the QoS Map Set element
  *	in IEEE Std 802.11-2012, 8.4.2.97.
  *
+ * @NL80211_ATTR_STA_RSSI: Received signal strength indication (u32)
+ *
  * @NL80211_ATTR_MAC_HINT: MAC address recommendation as initial BSS
  * @NL80211_ATTR_WIPHY_FREQ_HINT: frequency of the recommended initial BSS
  *
@@ -2151,6 +2153,8 @@ enum nl80211_attrs {
 
 	NL80211_ATTR_QOS_MAP,
 
+	NL80211_ATTR_STA_RSSI,
+
 	NL80211_ATTR_MAC_HINT,
 	NL80211_ATTR_WIPHY_FREQ_HINT,
 
@@ -2554,6 +2558,7 @@ enum nl80211_sta_info {
 	NL80211_STA_INFO_TX_BYTES64,
 	NL80211_STA_INFO_CHAIN_SIGNAL,
 	NL80211_STA_INFO_CHAIN_SIGNAL_AVG,
+	NL80211_STA_INFO_MAX_RSSI,
 	NL80211_STA_INFO_EXPECTED_THROUGHPUT,
 	NL80211_STA_INFO_RX_DROP_MISC,
 	NL80211_STA_INFO_BEACON_RX,
diff -Npur compat-wireless-2016-05-12-modi/net/wireless/nl80211.c compat-wireless-2016-05-12-modif/net/wireless/nl80211.c
--- compat-wireless-2016-05-12-modi/net/wireless/nl80211.c	2016-10-18 13:28:50.000000000 +0300
+++ compat-wireless-2016-05-12-modif/net/wireless/nl80211.c	2016-10-18 13:19:12.000000000 +0300
@@ -254,6 +254,7 @@ static const struct nla_policy nl80211_p
 	[NL80211_ATTR_BEACON_TAIL] = { .type = NLA_BINARY,
 				       .len = IEEE80211_MAX_DATA_LEN },
 	[NL80211_ATTR_STA_AID] = { .type = NLA_U16 },
+	[NL80211_ATTR_STA_RSSI] = { .type = NLA_U32 },
 	[NL80211_ATTR_STA_FLAGS] = { .type = NLA_NESTED },
 	[NL80211_ATTR_STA_LISTEN_INTERVAL] = { .type = NLA_U16 },
 	[NL80211_ATTR_STA_SUPPORTED_RATES] = { .type = NLA_BINARY,
@@ -3791,6 +3792,11 @@ static int nl80211_send_station(struct s
 	PUT_SINFO(CONNECTED_TIME, connected_time, u32);
 	PUT_SINFO(INACTIVE_TIME, inactive_time, u32);
 
+	if (sinfo->filled & BIT(NL80211_STA_INFO_MAX_RSSI) &&
+	    nla_put_u32(msg, NL80211_STA_INFO_MAX_RSSI,
+			sinfo->max_rssi))
+		goto nla_put_failure;
+
 	if (sinfo->filled & (BIT(NL80211_STA_INFO_RX_BYTES) |
 			     BIT(NL80211_STA_INFO_RX_BYTES64)) &&
 	    nla_put_u32(msg, NL80211_STA_INFO_RX_BYTES,
@@ -4461,6 +4467,9 @@ static int nl80211_new_station(struct sk
 	    !info->attrs[NL80211_ATTR_PEER_AID])
 		return -EINVAL;
 
+	if (!info->attrs[NL80211_ATTR_STA_RSSI])
+		return -EINVAL;
+
 	mac_addr = nla_data(info->attrs[NL80211_ATTR_MAC]);
 	params.supported_rates =
 		nla_data(info->attrs[NL80211_ATTR_STA_SUPPORTED_RATES]);
@@ -4498,6 +4507,8 @@ static int nl80211_new_station(struct sk
 	if (!params.aid || params.aid > IEEE80211_MAX_AID)
 		return -EINVAL;
 
+	params.rssi = nla_get_u32(info->attrs[NL80211_ATTR_STA_RSSI]);
+
 	if (info->attrs[NL80211_ATTR_STA_CAPABILITY]) {
 		params.capability =
 			nla_get_u16(info->attrs[NL80211_ATTR_STA_CAPABILITY]);
