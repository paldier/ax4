
user  root;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    log_format  logger '"$http_user_agent" "$http_x_forwarded_for"';

#    access_log  logs/access.log;
    #access_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx,severity=info;
#    error_log syslog:server=127.0.0.1:514,facility=local7,tag=nginx,severity=info info;
    #error_log syslog:server=127.0.0.1 info main;

    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    client_max_body_size 4096m;

    push_stream_shared_memory_size                32m;
    #max messages to store in memory
    push_stream_max_messages_stored_per_channel   20;
    #message ttl
    push_stream_message_ttl                       5m;

    server {
        listen       8282;
        server_name  localhost;

        sendfile off;

        #charset koi8-r;

        location / {
            #content_by_lua "
            #    ngx.status = ngx.HTTP_OK
            #    ngx.header.content_type = 'text/plain'
            #    ngx.say('test http ok.')
            #    ngx.eof()
            #";
            root   html/haierweb/;
            index  index.html index.htm;
        }

        location /rpc {
            client_body_buffer_size 64k;

            access_by_lua_file /www/html/rpc_auth.lua;

            gearman_server 127.0.0.1:8080;
            gearman_pass;
        }

        location = /api/v1 {
            client_body_buffer_size 64k;

            #authenication
            access_by_lua_file /www/html/rpc_auth.lua;

            gearman_server 127.0.0.1:8080;
            gearman_pass;
        }

        location = /api/v1/router {
            client_body_buffer_size 64k;

            #authenication
            access_by_lua_file /www/html/rpc_auth.lua;

            proxy_pass   http://62.77.253.1:8383;
        }

        location ^~ /api/v1/ {
            add_header Access-Control-Allow-Origin *;
            if ($request_method = OPTIONS ) {
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Headers "origin, content-type, accept";
                return 200;
            }

            client_body_buffer_size 64k;

            #authenication
            access_by_lua_file /www/html/rpc_auth.lua;

            set $gearman_url 'http://127.0.0.1:8080/';

            rewrite_by_lua "
                local type = string.match(ngx.var.uri, '/api/v1/(%a*)')
                if type == '' or type == nil then
                    ngx.log(ngx.ERR, 'request URL error.')
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say('request URL error')
                    ngx.eof()
                else
                    ngx.var.gearman_url = ngx.var.gearman_url .. type
                    ngx.log(ngx.INFO, ngx.var.gearman_url)
                end

                ngx.req.set_header('X-Gearman-Unique', math.random(1000000))
                ngx.req.set_header('X-Gearman-Background', 'false')
                ngx.req.set_header('X-Gearman-Priority', 'high')
            ";
            proxy_pass $gearman_url;
        }

        location /api/v1/download {
            #authenication
            access_by_lua_file /www/html/auth.lua;

            set $path '/home/homecloud/files';

            #rewrite resource path
            rewrite_by_lua "
                local args = ngx.decode_args(ngx.var.args)
                if args['path'] == nil then
                    ngx.status = ngx.HTTP_BAD_REQUEST
                    ngx.say('URL error.')
                    ngx.eof()
                end

                if args['root'] ~= nil then
                    ngx.var.path = '/'
                end
                ngx.var.path = ngx.var.path .. args['path']

                package.path = '/usr/lib/lua/?.lua;/www/html/?.lua;./?.lua;'
                package.cpath = '/usr/lib/lua/?.so;/www/html/?.so;./?.so;'

		local fs = require('nixio.fs')
 		local stat = fs.stat(ngx.var.path)
		local size = stat['size']
		local path = args['path']
		local filename

		_, filename = string.match(path, '(.*)/(.*)')

		ngx.log(ngx.INFO, '{download;'..filename..';'..
            		path..';'..size..';}')
            ";

            #download file
            #header_filter_by_lua "
            #    ngx.header.content_type = 'text/plain'
            #";

            root /;
            try_files $path @downloadhanler;
        }

        location @downloadhanler{
            content_by_lua_file /www/html/download.lua;
        }

        location /api/v1/upload {
            #authenication
            access_by_lua_file /www/html/auth.lua;

            upload_pass_args on;

            upload_resumable on;

            # Pass altered request body to this location
            upload_pass   @uploadhandler;

            # Store files to this directory
            # The directory is hashed, subdirectories 0 1 2 3 4 5 6 7 8 9 should exist
            upload_store /home/homecloud/tmp/upload ;

            #state files for resumable uploads
            upload_state_store /home/homecloud/tmp/state ;

            # Allow uploaded files to be read only by user
            #upload_store_access user:r;

            # Set specified fields in request body
            upload_set_form_field "${upload_field_name}_name" $upload_file_name;
            upload_set_form_field "${upload_field_name}_content_type" $upload_content_type;
            upload_set_form_field "${upload_field_name}_tmp_path" $upload_tmp_path;

            # Inform backend about hash and size of a file
            upload_aggregate_form_field "${upload_field_name}_md5" $upload_file_md5;
            upload_aggregate_form_field "${upload_field_name}_size" $upload_file_size;

            #upload_pass_form_field "^submit$|^description$";
            upload_pass_form_field "^path$";

            upload_cleanup 400 404 499 500-505;
        }

        location @uploadhandler {
            content_by_lua_file /www/html/upload.lua;
        }

        location /channels-stats {
            #activate channels statistics mode for this location
            push_stream_channels_statistics;

            #query string based channel id
            push_stream_channels_path       $arg_id;
        }

        location /pub {
            #activate publisher mode for this location
            push_stream_publisher;

            #query string based channel id
            push_stream_channels_path       $arg_id;
        }

        location ~ /sub/(.*) {
            #activate subscriber mode for this location
            push_stream_subscriber;

            #positional channel path
            push_stream_channels_path       $1;

            if ($arg_qs = 'on') {
                push_stream_last_received_message_time      $arg_time;
                push_stream_last_received_message_tag       $arg_tag;
                push_stream_last_event_id                   $arg_eventid;
            }
        }

        location ~ /ev/(.*) {
            #activate event source mode for this location
            push_stream_subscriber eventsource;

            #positional channel path
            push_stream_channels_path       $1;

            if ($arg_qs = 'on') {
                push_stream_last_received_message_time      $arg_time;
                push_stream_last_received_message_tag       $arg_tag;
                push_stream_last_event_id                   $arg_eventid;
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    #HTTPS server

    server {
        listen       443 ssl;
        server_name  localhost;

        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;

        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            content_by_lua "
                ngx.status = ngx.HTTP_OK
                ngx.header.content_type = 'text/plain'
                ngx.say('test https ok.')
                ngx.eof()
                ";
        }
    }

}
