diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -80,6 +80,10 @@
 #include <linux/netlink.h>
 #include <linux/tcp.h>
 
+#ifdef CONFIG_MPTCP_FULLMESH_MF
+#include <net/mptcp.h>
+#endif
+
 int sysctl_ip_default_ttl __read_mostly = IPDEFTTL;
 EXPORT_SYMBOL(sysctl_ip_default_ttl);
 
@@ -332,6 +336,9 @@ int ip_queue_xmit(struct sk_buff *skb, s
 	struct rtable *rt;
 	struct iphdr *iph;
 	int res;
+#ifdef CONFIG_MPTCP_FULLMESH_MF
+	struct dst_entry *dst_ent;
+#endif
 
 	/* Skip all of this if the packet is already routed,
 	 * f.e. by something like SCTP.
@@ -399,6 +406,19 @@ packet_routed:
 	skb->priority = sk->sk_priority;
 	skb->mark = sk->sk_mark;
 
+#ifdef CONFIG_MPTCP_FULLMESH_MF
+	dst_ent = &rt->dst;
+	if (sock_flag(sk, SOCK_MPTCP) && dst_ent->dev) {
+		if (dst_ent->dev->flags & IFF_MPMASTER) {
+			if (sysctl_mptcp_fullmesh_tos_primary)
+				iph->tos = sysctl_mptcp_fullmesh_tos_primary;
+		} else {
+			if (sysctl_mptcp_fullmesh_tos_secondary)
+				iph->tos = sysctl_mptcp_fullmesh_tos_secondary;
+		}
+	}
+#endif
+
 	res = ip_local_out(skb);
 	rcu_read_unlock();
 	return res;
