# HG changeset patch
# Parent c25fe8ce4ba36538c99825564bd5e07605fb6949

diff --git a/net/ipv6/sit.c b/net/ipv6/sit.c
--- a/net/ipv6/sit.c
+++ b/net/ipv6/sit.c
@@ -36,7 +36,7 @@
 #include <linux/init.h>
 #include <linux/netfilter_ipv4.h>
 #include <linux/if_ether.h>
-
+#include <linux/inetdevice.h>
 #include <net/sock.h>
 #include <net/snmp.h>
 
@@ -59,6 +59,7 @@
 
 #if (defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE))
 #include <net/ppa_stack_al.h>
+#include <net/arp.h>
 #endif
 /*
    This version of net/ipv6/sit.c is cloned of net/ipv4/ip_gre.c
@@ -82,10 +83,10 @@ static struct rtnl_link_ops sit_link_ops
 
 #if (defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE))
 extern int (*ppa_get_6rd_dmac_fn)(struct net_device *, struct sk_buff *skb,
-				  uint8_t *mac);
+				  uint8_t *mac, uint32_t daddr);
 extern struct net_device * (*ppa_get_6rd_phyif_fn)(struct net_device *);
 static int ppa_get_6rd_dmac(struct net_device *dev, struct sk_buff *skb,
-			    uint8_t *mac);
+			    uint8_t *mac, uint32_t daddr);
 static  struct net_device *ppa_get_6rd_phyif(struct net_device *dev);
 #endif
 
@@ -1670,7 +1671,8 @@ xfrm_tunnel_failed:
 }
 
 #if (defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE))
-int ppa_get_6rd_dmac(struct net_device *dev, struct sk_buff *skb, uint8_t *mac)
+int ppa_get_6rd_dmac(struct net_device *dev, struct sk_buff *skb, uint8_t *mac,
+		     uint32_t daddr)
 {
 	struct ip_tunnel *tunnel;
 	struct iphdr *iph;
@@ -1678,24 +1680,28 @@ int ppa_get_6rd_dmac(struct net_device *
 	struct dst_entry *dst = NULL;
 	struct hh_cache *hh;
 	struct neighbour *neigh;
+	struct flowi4 fl = {0};
 
 	tunnel = netdev_priv(dev);
 	iph = &tunnel->parms.iph;
 
-	if (iph->daddr) {
-		struct flowi4 fl = {0};
+	if (iph->daddr)
+		daddr = iph->daddr;
+
+	if (daddr) {
 		fl.flowi4_tos = RT_TOS(iph->tos);
 		fl.flowi4_oif = tunnel->parms.link;
 		fl.flowi4_proto = IPPROTO_IPV6;
-		fl.daddr = iph->daddr;
+		fl.daddr = daddr;
 		fl.saddr = iph->saddr;
+	}
 
-		rt = ip_route_output_key(dev_net(dev), &fl);
-		if (rt == NULL)
-			return -1;
-		else
-			dst = &rt->dst;
-	}
+	rt = ip_route_output_key(dev_net(dev), &fl);
+	if (rt == NULL)
+		return -1;
+	else
+		dst = &rt->dst;
+
 	if (!dst) {
 		ip_rt_put(rt);
 		return -1;
@@ -1730,6 +1736,22 @@ int ppa_get_6rd_dmac(struct net_device *
 				memcpy(mac, (uint8_t *)hh->hh_data + HH_DATA_ALIGN(hh->hh_len) - hh->hh_len, ETH_ALEN);
 		} while (read_seqretry(&hh->hh_lock, seq));
 	}
+
+	/* In case of Back to Back Setups as 6rd tun don't have mac */
+	if (is_zero_ether_addr(mac)) {
+		neigh_release(neigh);
+		neigh = __ipv4_neigh_lookup(dst->dev, daddr);
+		if (neigh == NULL) {
+			ip_rt_put(rt);
+			return -1;
+		}
+
+		if (is_valid_ether_addr(neigh->ha))
+			memcpy(mac, (uint8_t *)neigh->ha, ETH_ALEN);
+		else
+			goto MAC_ERROR;
+	}
+
 	neigh_release(neigh);
 	ip_rt_put(rt);
 	return 0;
@@ -1765,6 +1787,8 @@ static  struct net_device *ppa_get_6rd_p
 			phydev = rt->dst.dev;
 			ip_rt_put(rt);
 		}
+	} else {
+		phydev = __ip_dev_find(&init_net, iph->saddr, false);
 	}
 	return phydev;
 }
