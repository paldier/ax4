From e6cd5375b002d8825fba3db05fbe30d591da9314 Mon Sep 17 00:00:00 2001
From: sdinkinx <simonx.dinkin@intel.com>
Date: Mon, 23 Oct 2017 15:19:27 +0300
Subject: [PATCH] mac80211: accept key reinstall without changing anything

When a key is reinstalled we can reset the replay counters etc.
which can lead to nonce reuse and/or replay detection being impossible,
breaking security properties, as described in the "KRACK attacks".

In particular, CVE-2017-13080 applies to GTK rekeying that happened in
firmware while the host is in D3, with the second part of the attack
being done after the host wakes up. In this case, the wpa_supplicant
mitigation isn't sufficient since wpa_supplicant doesn't know the GTK material.

In case this happens, simply silently accept the new key coming from userspace
but don't take any action on it since it's the same key; this keeps the PN counter intact.

Signed-off-by: Johannes Berg <johannes.berg@intel.com>
Signed-off-by: sdinkinx <simonx.dinkin@intel.com>
---
 net/mac80211/key.c | 19 ++++++++++++++++---
 1 file changed, 16 insertions(+), 3 deletions(-)

diff --git a/net/mac80211/key.c b/net/mac80211/key.c
index 635d097..00664a5 100644
--- a/net/mac80211/key.c
+++ b/net/mac80211/key.c
@@ -464,9 +464,6 @@ int ieee80211_key_link(struct ieee80211_key *key,
 
 	pairwise = key->conf.flags & IEEE80211_KEY_FLAG_PAIRWISE;
 	idx = key->conf.keyidx;
-	key->local = sdata->local;
-	key->sdata = sdata;
-	key->sta = sta;
 
 	mutex_lock(&sdata->local->key_mtx);
 
@@ -477,6 +474,21 @@ int ieee80211_key_link(struct ieee80211_key *key,
 	else
 		old_key = key_mtx_dereference(sdata->local, sdata->keys[idx]);
 
+	/*
+	 * Silently accept key re-installation without really installing the
+	 * new version of the key to avoid nonce reuse or replay issues.
+	 */
+	if (old_key && key->conf.keylen == old_key->conf.keylen &&
+		!memcmp(key->conf.key, old_key->conf.key, key->conf.keylen)) {
+		ieee80211_key_free_unused(key);
+		ret = 0;
+		goto out;
+	}
+
+	key->local = sdata->local;
+	key->sdata = sdata;
+	key->sta = sta;
+
 	increment_tailroom_need_count(sdata);
 
 	ieee80211_key_replace(sdata, sta, pairwise, old_key, key);
@@ -489,6 +501,7 @@ int ieee80211_key_link(struct ieee80211_key *key,
 	if (ret)
 		ieee80211_key_free(key, true);
 
+out:
 	mutex_unlock(&sdata->local->key_mtx);
 
 	return ret;
-- 
2.10.1

