Repo to hold kernel patches applied for lantiq target

Creating a new Kernel source tree, building, creating and managing patches with External Kernel Tree option
Execute the script:-
	cd <ugw_sw>/ugw/openwrt/core;
	./scripts/ltq_prepare_kernel_tree.sh

	1) Above script creates a new kernel tree under core path named 'kernel_tree' and extract linux tarball, apply files, generic patches and target patches.
	2) This tree is version controlled with mercurial and patches are controlled with mercurial qpatch system.
	3) Patches directory under this is a symlink to actual patch queue repo under UGW/kernel_patches. So any patches created under this kernel_tree can be committed and pushed directly.
	4) target/linux/lantiq/files/ contents will be available as links under kernel_tree. So these changes will be tracked from appropriate repos. Any changes to these links will not be reflected under a patch.

Script options:-
    ./scripts/ltq_prepare_kernel_tree.sh  (without any option creates a kernel tree and assigns in .config to build)
    ./scripts/ltq_prepare_kernel_tree.sh -h (for help)
    ./scripts/ltq_prepare_kernel_tree.sh -o (disables kernel tree in .config)
    ./scripts/ltq_prepare_kernel_tree.sh -e (enables kernel tree in .config)
    ./scripts/ltq_prepare_kernel_tree.sh -u  (update target files links)
    ./scripts/ltq_prepare_kernel_tree.sh -d (deletes kernel tree and disable in .config)
    ./scripts/ltq_prepare_kernel_tree.sh -v (verify uncommitted files and patches)
Command works under tree (To manage patches:- create/modify/delete/push/pop patches like quilt)
All mercurial hg commands works as usual like hg status, hg diff, hg commit etc. Apart from these, quilt commands are integrated to manage patches like:-
	hg qseries  (identical to the command "quilt series"),
	hg qpop  (identical to the command "quilt pop"),
	hg qpush (identical to the command "quilt push"),
	hg qrefresh (identical to the command "quilt refresh"),
	etc.

To fold a new changes to an existing patch
	1) Apply all patches
		hg qpush -a
	2) Create a new temp patch. The name isn't important, it will be deleted when done.
		hg qnew tmp.patch
	3) Edit your source code in the open source tree and make all changes needed. 
		e.g. vi src/drivers/driver_mtlk.c
		Add all local changes to the temp patch
		hg qrefresh
	4) Back out to the patch that should include these changes
		hg qpop 02_hostapd_essid32.patch
	5) "Fold" (merge) the changes into the existing patch. The one argument to give is the name of the temp patch. If the fold succeeds, the temp.patch file will be automatically deleted
		hg qfold tmp.patch
	6) Apply all patches, to make sure that nothing is broken due to the new code changes that are now in the middle of the patch queue
		hg qpush -a
	7) Fix any pushes that failed and run hg qpush -a until reaching the top of the queue.

Note:
=====
	1) Patch sequencing convention need to be followed as mentioned in the below link
		https://wiki.lantiq.com/display/SW/Migration+to+Linux-3.10.x#MigrationtoLinux-3.10.x-DevelopersAttention:target/linux/lantiq/patchesconventions

	2) Newly generated changes/patches needs to be validated against coding style as mentioned in Documentation/CodingStyle 
		run patches through scripts/checkpatch.pl and address the complaints it

	3) ltq_prepare_kernel_tree.sh is still using hg commands as derived from exsisting mercurial port, same will be updated once the new workflow is finalized kernel source maintenance.










