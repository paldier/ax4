# HG changeset patch
# Parent 3cbc57b215ebb68872090d4cee5bca20bf827c7e

diff --git a/include/uapi/linux/if_ether.h b/include/uapi/linux/if_ether.h
--- a/include/uapi/linux/if_ether.h
+++ b/include/uapi/linux/if_ether.h
@@ -31,6 +31,7 @@
 #define ETH_ALEN	6		/* Octets in one ethernet addr	 */
 #define ETH_HLEN	14		/* Total octets in header.	 */
 #define ETH_ZLEN	60		/* Min. octets in frame sans FCS */
+/* Mini-Jumbo Frame support */
 #define ETH_DATA_LEN	1500		/* Max. octets in payload	 */
 #define ETH_FRAME_LEN	1514		/* Max. octets in frame sans FCS */
 #define ETH_FCS_LEN	4		/* Octets in the FCS		 */
diff --git a/net/atm/br2684.c b/net/atm/br2684.c
--- a/net/atm/br2684.c
+++ b/net/atm/br2684.c
@@ -688,17 +688,52 @@ error:
 	return err;
 }
 
+#ifdef CONFIG_LTQ_MINI_JUMBO_FRAME_SUPPORT
+#define MINI_JUMBO_ETH_DATA_LEN    1586            /* Max. octets in payload        */
+#define MINI_JUMBO_ETH_FRAME_LEN   1600            /* Max. octets in frame sans FCS */
+
+/**
+ * eth_change_mtu - set new MTU size
+ * @dev: network device
+ * @new_mtu: new Maximum Transfer Unit
+ *
+ * Allow changing MTU size. Needs to be overridden for devices
+ * supporting jumbo frames.
+ */
+
+
+int br2684_change_mtu(struct net_device *dev, int new_mtu)
+{
+	if (new_mtu < 68 || new_mtu > MINI_JUMBO_ETH_DATA_LEN)
+		return -EINVAL;
+	dev->mtu = new_mtu;
+	return 0;
+}
+EXPORT_SYMBOL(br2684_change_mtu);
+
+#endif
+
+
+
 static const struct net_device_ops br2684_netdev_ops = {
 	.ndo_start_xmit 	= br2684_start_xmit,
 	.ndo_set_mac_address	= br2684_mac_addr,
+#ifdef CONFIG_LTQ_MINI_JUMBO_FRAME_SUPPORT
+	.ndo_change_mtu		= br2684_change_mtu,
+#else
 	.ndo_change_mtu		= eth_change_mtu,
+#endif
 	.ndo_validate_addr	= eth_validate_addr,
 };
 
 static const struct net_device_ops br2684_netdev_ops_routed = {
 	.ndo_start_xmit 	= br2684_start_xmit,
 	.ndo_set_mac_address	= br2684_mac_addr,
+#ifdef CONFIG_LTQ_MINI_JUMBO_FRAME_SUPPORT
+	.ndo_change_mtu		= br2684_change_mtu
+#else
 	.ndo_change_mtu		= eth_change_mtu
+#endif
 };
 
 static int br2684_unregvcc(struct atm_vcc *atmvcc, void __user *arg)
