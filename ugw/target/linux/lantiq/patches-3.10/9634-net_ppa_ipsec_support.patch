# HG changeset patch
# Parent 16e642379b051e6f811d900612d02c6c2d9055b8

diff --git a/include/crypto/ltq_ipsec_ins.h b/include/crypto/ltq_ipsec_ins.h
--- a/include/crypto/ltq_ipsec_ins.h
+++ b/include/crypto/ltq_ipsec_ins.h
@@ -193,24 +193,24 @@ struct ltq_crypto_ipsec_params {
 struct ltq_ipsec_complete {
 	int err;
 	void *data;
-	unsigned int ret_pkt_len;
+	u32 ret_pkt_len;
+	u8 nexthdr;
+	int flag;
 	void (*callback_fn)(struct ltq_ipsec_complete *complete);
 	u32 *token_ptr;
 };
 
 
 /* API - dummy placer */
-
-struct ltq_crypto_ipsec_params *ltq_ipsec_get_params(u32 spi); 
 int ltq_ipsec_setkey(struct ltq_crypto_ipsec_params *ipsec_params); 
 int ltq_get_ipsec_token(struct ltq_crypto_ipsec_params *ipsec_params); 
 void ltq_destroy_ipsec_sa(struct ltq_crypto_ipsec_params *ipsec_params);
-int ltq_ipsec_enc(u32 spi, u8 *in, u8 *out, void (*callback)(struct ltq_ipsec_complete *done),
+int ltq_ipsec_enc(u32 spi, u16 ip_prot, u8 *in, u8 *out, void (*callback)(struct ltq_ipsec_complete *done),
 			unsigned int buflen, void *ip_data);
 int ltq_ipsec_dec(u32 spi, u8 *in, u8 *out, void (*callback)(struct ltq_ipsec_complete *done),
             unsigned int buflen, void *ip_data);
 int ltq_get_length_params(u32 spi, unsigned int *ivsize, unsigned int *ICV_length,
 			unsigned int *blksize);
-
+struct ltq_crypto_ipsec_params *ltq_ipsec_get_params(u32); 
 #endif /* CONFIG_LTQ_PPA_MPE_IP97 */ 
 #endif /* _LTQ_IPSEC_INS_H */
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -526,6 +526,9 @@ struct sk_buff {
 #ifdef CONFIG_NETWORK_EXTMARK
 	__u32			extmark;
 #endif
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+	void 			*ptr_ppa_pitem;
+#endif
 	union {
 		__u32		mark;
 		__u32		dropcount;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -79,6 +79,9 @@
 #include <net/lantiq_cbm_api.h>
 #endif
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+#include <net/ppa_api.h>
+#endif
 #if defined(CONFIG_IMQ) || defined(CONFIG_IMQ_MODULE)
 static struct kmem_cache *skbuff_cb_store_cache __read_mostly;
 #endif
@@ -336,6 +339,11 @@ struct sk_buff *__alloc_skb(unsigned int
 	skb->data = data;
 	skb_reset_tail_pointer(skb);
 	skb->end = skb->tail + size;
+
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+	skb->ptr_ppa_pitem = NULL;
+#endif
+
 #ifdef NET_SKBUFF_DATA_USES_OFFSET
 	skb->mac_header = ~0U;
 	skb->transport_header = ~0U;
@@ -733,6 +741,10 @@ static void skb_release_all(struct sk_bu
 
 void __kfree_skb(struct sk_buff *skb)
 {
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+	if (ppa_hook_pitem_refcnt_dec_fn && skb->ptr_ppa_pitem)
+		ppa_hook_pitem_refcnt_dec_fn(skb);
+#endif
 	skb_release_all(skb);
 	kfree_skbmem(skb);
 }
@@ -848,6 +860,11 @@ void __copy_skb_header(struct sk_buff *n
 #ifdef CONFIG_NETWORK_EXTMARK
 	new->extmark		= old->extmark;
 #endif
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+	new->ptr_ppa_pitem	= old->ptr_ppa_pitem;
+	if (ppa_hook_pitem_refcnt_inc_fn && new->ptr_ppa_pitem)
+		ppa_hook_pitem_refcnt_inc_fn(new);
+#endif
 	new->mark		= old->mark;
 	new->skb_iif		= old->skb_iif;
 	__nf_copy(new, old);
diff --git a/net/ipv4/esp4.c b/net/ipv4/esp4.c
--- a/net/ipv4/esp4.c
+++ b/net/ipv4/esp4.c
@@ -17,16 +17,109 @@
 #include <net/icmp.h>
 #include <net/protocol.h>
 #include <net/udp.h>
+#include <crypto/ltq_ipsec_ins.h>
 
+#ifdef CONFIG_LTQ_PPA_MPE_IP97
+  #include <net/ppa_api.h>
+  #include <net/ppa_api_session.h>
+  #include <net/uapi_ppa_api.h>
+#endif
+
+#if 0
+#define EIP97_DEBUG_INPUT 1	
+#define EIP97_DEBUG_OUTPUT 1	
+//define to enable debug
+#endif
 struct esp_skb_cb {
 	struct xfrm_skb_cb xfrm;
 	void *tmp;
 };
 
+#if defined (EIP97_DEBUG_OUTPUT) || defined (EIP97_DEBUG_INPUT) 
+static void dump_skb_data(u32 len, const char *pData){
+	int i;
+	for(i = 0; i < len; ++i){
+		printk("%2.2x ",(u8)(pData[i]));
+		if (i % 16 == 15)
+			printk("\n");
+	}
+	printk("\n");
+}
+static void dump_skb(struct sk_buff *skb)
+{
+	int elt;
+	struct sk_buff *skb1, **skb_p;
+	printk("======================\n<%s> skb:%x\n"
+	"skb->data_len:%d  headlen:%d skb->len:%d \n"
+	"nr_frags:%d\n Head:%x tail:%x end:%x \nHeadroom:%d tailroom:%d \n"
+	"Data pointer:%x network_header:%x transport_header:%x\n"
+	"network_offset:%x transport_offset:%x\n ",__FUNCTION__, skb,
+	skb->data_len, skb->hdr_len, skb->len, skb_shinfo(skb)->nr_frags,
+	skb->head, skb->tail, skb->end, skb_headroom(skb), skb_tailroom(skb),
+	skb->data, skb_network_header(skb),skb_transport_header(skb),
+	skb_network_offset(skb),skb_transport_offset(skb));
+	elt = 1;
+	skb_p = &skb_shinfo(skb)->frag_list;
+	while ((skb1 = *skb_p) != NULL) {
+		printk("<%s> ++++ Frags:[%d] +++++\n"
+		"skb->data_len:%d  headlen:%d skb->len:%d \n Head:%x tail:%x\n"
+		"Data pointer:%x network_header:%x transport_header:%x\n"
+		"network_offset:%x transport_offset:%x\n",__FUNCTION__, elt,
+		skb->data_len, skb->hdr_len, skb->len, skb->head, skb->tail,
+		skb->data, skb_network_header(skb),skb_transport_header(skb),
+		skb_network_offset(skb),skb_transport_offset(skb));
+		elt++;
+		skb_p = &skb1->next;
+	}
+	printk("Number of Frags: %d\n=====================\n", elt);
+}
+static inline esp_dbg_print_ip(const struct iphdr *iph){
+		u32 saddr, daddr;          
+		saddr = ntohl(iph->saddr);
+		daddr = ntohl(iph->daddr);
+		printk(KERN_INFO "SRC IP: %pI4h\nDST IP: %pI4h\n", &saddr,&daddr);           
+}
+
+static inline esp_dbg_dump_skb(const struct sk_buff *skb, 
+				u32 len,
+				const char* dataPtr,
+				int line,
+				const char* func){
+	printk("<%s> : line %d\n",func,line);
+	dump_skb(skb);
+	dump_skb_data(len, dataPtr);
+}
+#define esp_dbg_input_printip esp_dbg_print_ip
+#else
+#define esp_dbg_input_printip 
+#endif 
+
+
+#ifdef EIP97_DEBUG_OUTPUT
+#define esp_output_dbg printk
+#define esp_dbg_output_dump_skb(skb,len,dataPtr) esp_dbg_dump_skb(skb,len,dataPtr,__LINE__,__func__)
+#else
+#define esp_output_dbg
+#define esp_dbg_output_dump_skb(skb,len,dataPtr) 
+#endif
+
+#ifdef EIP97_DEBUG_INPUT
+#define esp_input_dbg printk
+#define esp_dbg_input_dump_skb(skb,len,dataPtr) esp_dbg_dump_skb(skb,len,dataPtr,__LINE__,__func__)
+#else
+#define esp_input_dbg
+#define esp_dbg_input_dump_skb(skb,len,dataPtr)
+#endif
+
 #define ESP_SKB_CB(__skb) ((struct esp_skb_cb *)&((__skb)->cb[0]))
 
 static u32 esp4_get_mtu(struct xfrm_state *x, int mtu);
 
+static inline void set_noacceleration(struct sk_buff* skb){
+#ifdef CONFIG_NETWORK_EXTMARK
+	SET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK, ACCELSEL_START_BIT_POS, ACCELSEL_NO_OF_BITS);
+#endif
+}
 /*
  * Allocate an AEAD request structure with extra space for SG and IV.
  *
@@ -105,14 +198,88 @@ static inline struct scatterlist *esp_gi
 			     __alignof__(struct scatterlist));
 }
 
+
+
 static void esp_output_done(struct crypto_async_request *base, int err)
 {
 	struct sk_buff *skb = base->data;
 
 	kfree(ESP_SKB_CB(skb)->tmp);
+	
 	xfrm_output_resume(skb, err);
 }
 
+#ifdef CONFIG_LTQ_PPA_MPE_IP97
+static void esp_output_done_fastpath(struct ltq_ipsec_complete *done)
+{
+	struct sk_buff *skb = (struct sk_buff *)(done->data);
+	esp_output_dbg("<%s> skb->len:%d done->ret_pkt_len:%d done->err:%d\n",
+			__FUNCTION__,skb->len, done->ret_pkt_len, done->err);
+	skb->len = done->ret_pkt_len;
+	
+	skb->data = skb_transport_header(skb);
+	skb->tail = skb->data + skb->len;
+
+	esp_output_dbg("<%s> Packet reply from engine %x\n",__FUNCTION__,skb);
+	esp_dbg_output_dump_skb(skb, skb->len, skb->data);
+	skb_push(skb, -skb_network_offset(skb));
+	
+	esp_output_dbg("<%s>Packet reply from engine after push%x\n",__FUNCTION__,skb);
+	esp_dbg_output_dump_skb(skb, skb->len, skb->data);
+	xfrm_output_resume(skb, done->err);
+}
+
+
+static int esp_output(struct xfrm_state *x, struct sk_buff *skb)
+{
+
+	int32_t err;
+	int32_t trailer_len=0; 
+	uint32_t iv_len = 0, icv_len = 0, blk_size = 0;
+	struct sk_buff *trailer;
+	uint16_t nexthdr;
+	
+	ltq_get_length_params(x->id.spi, &iv_len, &icv_len, &blk_size);
+	trailer_len = icv_len + blk_size ;
+
+	esp_output_dbg("<%s> IV Len:[%d] ICV Len:[%d] Blk Size:[%d] \n",__FUNCTION__,iv_len,icv_len,blk_size);
+	esp_dbg_output_dump_skb(skb, skb->len, skb->data);	
+	
+	err = skb_cow_data(skb, trailer_len, &trailer);
+	if (err < 0)
+		goto error;
+
+	skb_linearize(skb);	
+
+	nexthdr = ip_hdr(skb)->protocol;
+	ip_hdr(skb)->protocol = IPPROTO_ESP;
+
+	struct session_list_item* p_item=NULL;
+        if ((x->props.mode == XFRM_MODE_TRANSPORT) && (skb->ptr_ppa_pitem)){
+         	p_item = (struct session_list_item *)(skb->ptr_ppa_pitem);
+         	p_item->flag2 |= SESSION_FLAG2_VALID_ESP_INC_NTC;
+	}
+
+	err = ltq_ipsec_enc(x->id.spi, nexthdr, skb->data, skb_transport_header(skb), esp_output_done_fastpath, skb->len, skb);
+	if (err == -EINPROGRESS)
+		goto error;
+
+	if (err == -EBUSY)
+		err = NET_XMIT_DROP;
+
+	if(err > 0) {
+		skb->data = skb_transport_header(skb);
+		skb->len = err;
+		skb->tail = skb->data + skb->len;
+		skb_push(skb, -skb_network_offset(skb));
+		return 0;
+	}
+
+error:
+	return err;
+}
+
+#else
 static int esp_output(struct xfrm_state *x, struct sk_buff *skb)
 {
 	int err;
@@ -138,11 +305,9 @@ static int esp_output(struct xfrm_state 
 	__be32 *seqhi;
 
 	/* skb is pure payload to encrypt */
-
 	esp = x->data;
 	aead = esp->aead;
 	alen = crypto_aead_authsize(aead);
-
 	tfclen = 0;
 	if (x->tfcpad) {
 		struct xfrm_dst *dst = (struct xfrm_dst *)skb_dst(skb);
@@ -203,7 +368,6 @@ static int esp_output(struct xfrm_state 
 	skb_push(skb, -skb_network_offset(skb));
 	esph = ip_esp_hdr(skb);
 	*skb_mac_header(skb) = IPPROTO_ESP;
-
 	/* this is non-NULL only with UDP Encapsulation */
 	if (x->encap) {
 		struct xfrm_encap_tmpl *encap = x->encap;
@@ -263,6 +427,7 @@ static int esp_output(struct xfrm_state 
 			      XFRM_SKB_CB(skb)->seq.output.low);
 
 	ESP_SKB_CB(skb)->tmp = tmp;
+
 	err = crypto_aead_givencrypt(req);
 	if (err == -EINPROGRESS)
 		goto error;
@@ -275,6 +440,7 @@ static int esp_output(struct xfrm_state 
 error:
 	return err;
 }
+#endif
 
 static int esp_input_done2(struct sk_buff *skb, int err)
 {
@@ -350,13 +516,10 @@ static int esp_input_done2(struct sk_buf
 		skb_reset_transport_header(skb);
 	else
 		skb_set_transport_header(skb, -ihl);
-
 	err = nexthdr[1];
-
 	/* RFC4303: Drop dummy packets without any error */
 	if (err == IPPROTO_NONE)
 		err = -EINVAL;
-
 out:
 	return err;
 }
@@ -368,6 +531,66 @@ static void esp_input_done(struct crypto
 	xfrm_input_resume(skb, esp_input_done2(skb, err));
 }
 
+
+
+#ifdef CONFIG_LTQ_PPA_MPE_IP97
+static void esp_input_done_fastpath(struct ltq_ipsec_complete *done)
+{
+	int ihl;
+	struct iphdr *iph;
+	struct sk_buff *skb = (struct sk_buff *)(done->data);
+	
+	esp_input_dbg("<%s> skb->len:%d done->ret_pkt_len:%d done->err:%d\n",
+			__FUNCTION__,skb->len, done->ret_pkt_len, done->err);
+	
+	skb->len = done->ret_pkt_len;
+	iph = ip_hdr(skb); 
+	ihl = iph->ihl * 4; 
+	
+	esp_dbg_input_printip(iph);
+	esp_input_dbg("IP total len=%d ihl=%d nexthdr=%d\n",iph->tot_len, ihl, done->nexthdr);
+	
+	skb->transport_header = skb->network_header = skb->data  - ihl;
+	skb->tail = skb->data  + skb->len;
+
+	esp_dbg_input_dump_skb(skb, skb->len, skb->data);
+	xfrm_input_resume(skb, done->nexthdr);
+}
+
+
+static int esp_input(struct xfrm_state *x, struct sk_buff *skb)
+{
+	int32_t err;
+	struct sk_buff *trailer;
+
+	if(x->props.mode == XFRM_MODE_TRANSPORT){
+		set_noacceleration(skb);
+	}
+	
+	esp_dbg_input_dump_skb(skb, skb->len, skb->data);
+	err = skb_cow_data(skb, 0, &trailer);
+	if (err < 0)
+		goto error;
+	
+	skb_linearize(skb);	
+	
+	err = ltq_ipsec_dec(x->id.spi, skb->data, skb->data, esp_input_done_fastpath, skb->len, skb);
+	
+	if (err == -EINPROGRESS)
+		goto error;
+		
+	if(err > 0)
+	{
+		skb->len = err;
+		skb->tail = skb->data  + skb->len;
+		return 0;
+	}
+
+error:
+	return err;
+}
+
+#else
 /*
  * Note: detecting truncated vs. non-truncated authentication data is very
  * expensive, so we only support truncated data, which is the recommended
@@ -380,6 +603,7 @@ static int esp_input(struct xfrm_state *
 	struct crypto_aead *aead = esp->aead;
 	struct aead_request *req;
 	struct sk_buff *trailer;
+	
 	int elen = skb->len - sizeof(*esph) - crypto_aead_ivsize(aead);
 	int nfrags;
 	int assoclen;
@@ -442,20 +666,21 @@ static int esp_input(struct xfrm_state *
 		sg_set_buf(asg + 2, &esph->seq_no, sizeof(__be32));
 	} else
 		sg_init_one(asg, esph, sizeof(*esph));
-
+	
 	aead_request_set_callback(req, 0, esp_input_done, skb);
 	aead_request_set_crypt(req, sg, sg, elen, iv);
 	aead_request_set_assoc(req, asg, assoclen);
 
 	err = crypto_aead_decrypt(req);
+
 	if (err == -EINPROGRESS)
 		goto out;
 
 	err = esp_input_done2(skb, err);
-
 out:
 	return err;
 }
+#endif
 
 static u32 esp4_get_mtu(struct xfrm_state *x, int mtu)
 {
diff --git a/net/ipv4/icmp.c b/net/ipv4/icmp.c
--- a/net/ipv4/icmp.c
+++ b/net/ipv4/icmp.c
@@ -848,7 +848,6 @@ int icmp_rcv(struct sk_buff *skb)
 	struct icmphdr *icmph;
 	struct rtable *rt = skb_rtable(skb);
 	struct net *net = dev_net(rt->dst.dev);
-
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_IN, skb)) {
 		struct sec_path *sp = skb_sec_path(skb);
 		int nh;
diff --git a/net/ipv4/ip_forward.c b/net/ipv4/ip_forward.c
--- a/net/ipv4/ip_forward.c
+++ b/net/ipv4/ip_forward.c
@@ -132,9 +132,10 @@ int ip_forward(struct sk_buff *skb)
 	if (skb_warn_if_lro(skb))
 		goto drop;
 
+/*Policy check disabled for IPSec DS MPE accelerated traffic */
+
 	if (!xfrm4_policy_check(NULL, XFRM_POLICY_FWD, skb))
 		goto drop;
-
 	if (IPCB(skb)->opt.router_alert && ip_call_ra_chain(skb))
 		return NET_RX_SUCCESS;
 
diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -201,6 +201,11 @@ static inline int ip_finish_output2(stru
 	}
 
 #if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+    struct iphdr *hdr = ip_hdr(skb);
+    if(hdr->protocol != 50)
+    {
+#endif
         if ( ppa_hook_session_add_fn != NULL )
         {
             struct nf_conn *ct;
@@ -215,6 +220,10 @@ static inline int ip_finish_output2(stru
     
             ppa_hook_session_add_fn(skb, ct, flags);
         }
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+    }
+#endif
+	
 #endif
 
 	rcu_read_lock_bh();
diff --git a/net/ipv4/raw.c b/net/ipv4/raw.c
--- a/net/ipv4/raw.c
+++ b/net/ipv4/raw.c
@@ -313,6 +313,7 @@ int raw_rcv(struct sock *sk, struct sk_b
 		kfree_skb(skb);
 		return NET_RX_DROP;
 	}
+
 	nf_reset(skb);
 
 	skb_push(skb, skb->data - skb_network_header(skb));
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1732,7 +1732,6 @@ process:
 		NET_INC_STATS_BH(net, LINUX_MIB_TCPMINTTLDROP);
 		goto discard_and_relse;
 	}
-
 	if (!xfrm4_policy_check(sk, XFRM_POLICY_IN, skb))
 		goto discard_and_relse;
 	nf_reset(skb);
diff --git a/net/ipv4/xfrm4_output.c b/net/ipv4/xfrm4_output.c
--- a/net/ipv4/xfrm4_output.c
+++ b/net/ipv4/xfrm4_output.c
@@ -17,6 +17,9 @@
 #include <net/ip.h>
 #include <net/xfrm.h>
 #include <net/icmp.h>
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
 
 static int xfrm4_tunnel_check_size(struct sk_buff *skb)
 {
@@ -94,6 +97,7 @@ int xfrm4_output(struct sk_buff *skb)
 	struct dst_entry *dst = skb_dst(skb);
 	struct xfrm_state *x = dst->xfrm;
 
+
 	return NF_HOOK_COND(NFPROTO_IPV4, NF_INET_POST_ROUTING, skb,
 			    NULL, dst->dev,
 			    x->outer_mode->afinfo->output_finish,
diff --git a/net/key/af_key.c b/net/key/af_key.c
--- a/net/key/af_key.c
+++ b/net/key/af_key.c
@@ -33,6 +33,10 @@
 
 #include <net/sock.h>
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
+
 #define _X2KEY(x) ((x) == XFRM_INF ? 0 : (x))
 #define _KEY2X(x) ((x) == 0 ? XFRM_INF : (x))
 
@@ -1520,6 +1524,7 @@ static int pfkey_delete(struct sock *sk,
 
 	err = xfrm_state_delete(x);
 
+
 	if (err < 0)
 		goto out;
 
diff --git a/net/xfrm/xfrm_output.c b/net/xfrm/xfrm_output.c
--- a/net/xfrm/xfrm_output.c
+++ b/net/xfrm/xfrm_output.c
@@ -19,6 +19,12 @@
 #include <net/dst.h>
 #include <net/xfrm.h>
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+  #include <net/ppa_api_session.h>
+  #include <net/uapi_ppa_api.h>
+#endif
+
 static int xfrm_output2(struct sk_buff *skb);
 
 static int xfrm_skb_check_space(struct sk_buff *skb)
@@ -121,8 +127,53 @@ error_nolock:
 int xfrm_output_resume(struct sk_buff *skb, int err)
 {
 	while (likely((err = xfrm_output_one(skb, err)) == 0)) {
+#if !defined(CONFIG_LTQ_PPA_MPE_IP97)
 		nf_reset(skb);
+#endif
 
+
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+  		struct session_list_item* p_item=NULL;
+		struct net_device *dev_org = skb->dev;
+		skb->dev = skb_dst(skb)->dev;
+
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+        if ( ppa_hook_session_add_fn != NULL )
+        {
+#if defined(CONFIG_LANTIQ_IPQOS_CLASS_ACCELERATION_DISABLE)
+	   /* check for 13th bit in NFMARK set by IPQOS classifier */
+          /* If this bit is set, dont call PPA session add fn*/
+          bool accel_st;
+#ifdef CONFIG_NETWORK_EXTMARK
+          GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK, ACCELSEL_START_BIT_POS, accel_st);
+#endif
+          if (accel_st == 0) {
+#endif
+
+            struct nf_conn *ct;
+
+            enum ip_conntrack_info ctinfo;
+            uint32_t flags;
+    
+            ct = nf_ct_get(skb, &ctinfo);
+    
+            flags = 0;  //  post routing
+            flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ? PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
+            if (skb->ptr_ppa_pitem){
+         		p_item = (struct session_list_item *)(skb->ptr_ppa_pitem);
+         		p_item->flag2 &= (~SESSION_FLAG2_VALID_ESP_INC_NTC);
+            }
+            ppa_hook_session_add_fn(skb, ct, flags);
+#if defined(CONFIG_LANTIQ_IPQOS_CLASS_ACCELERATION_DISABLE)
+	   }
+#endif
+
+        }
+	
+#endif
+		skb->dev = dev_org;
+		nf_reset(skb);
+#endif
 		err = skb_dst(skb)->ops->local_out(skb);
 		if (unlikely(err != 1))
 			goto out;
diff --git a/net/xfrm/xfrm_policy.c b/net/xfrm/xfrm_policy.c
--- a/net/xfrm/xfrm_policy.c
+++ b/net/xfrm/xfrm_policy.c
@@ -2426,6 +2426,14 @@ int __xfrm_policy_check(struct sock *sk,
 		 * some barriers, but at the moment barriers
 		 * are implied between each two transformations.
 		 */
+                 /* Mask for ENC and DNC is 0x30000 */
+	        //printk("\nskb->DW1=0x%x\n",skb->DW1);
+
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+		if( (skb->DW1 & 0x30000) ==  0x0)
+		{
+#endif
+	
 		for (i = xfrm_nr-1, k = 0; i >= 0; i--) {
 			k = xfrm_policy_ok(tpp[i], sp, k, family);
 			if (k < 0) {
@@ -2442,6 +2450,9 @@ int __xfrm_policy_check(struct sock *sk,
 			goto reject;
 		}
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+		}
+#endif
 		xfrm_pols_put(pols, npols);
 		return 1;
 	}
diff --git a/net/xfrm/xfrm_state.c b/net/xfrm/xfrm_state.c
--- a/net/xfrm/xfrm_state.c
+++ b/net/xfrm/xfrm_state.c
@@ -27,6 +27,10 @@
 #include <linux/kernel.h>
 
 #include "xfrm_hash.h"
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+  #include <crypto/ltq_ipsec_ins.h>
+#endif
 
 /* Each xfrm_state may be linked to two tables:
 
@@ -470,6 +474,23 @@ expired:
 		goto resched;
 	}
 
+#if defined(CONFIG_LTQ_PPA_MPE_IP97)
+        if ( ppa_hook_session_ipsec_del_fn != NULL )
+        {
+            ppa_hook_session_ipsec_del_fn(x);
+        }
+
+        struct ltq_crypto_ipsec_params *params = NULL;
+        params = ltq_ipsec_get_params(x->id.spi);
+        if (!params) {
+                     pr_err("No entry found for spi=0x%08x\n",x->id.spi);
+                        return -EINVAL;
+        }
+        ltq_destroy_ipsec_sa(params);
+
+#endif
+
+
 	err = __xfrm_state_delete(x);
 	if (!err && x->id.spi)
 		km_state_expired(x, 1, 0);
@@ -621,6 +642,7 @@ restart:
 				spin_unlock_bh(&xfrm_state_lock);
 
 				err = xfrm_state_delete(x);
+
 				xfrm_audit_state_delete(x, err ? 0 : 1,
 							audit_info->loginuid,
 							audit_info->sessionid,
@@ -1884,7 +1906,9 @@ void xfrm_state_delete_tunnel(struct xfr
 		struct xfrm_state *t = x->tunnel;
 
 		if (atomic_read(&t->tunnel_users) == 2)
+		{
 			xfrm_state_delete(t);
+                }
 		atomic_dec(&t->tunnel_users);
 		xfrm_state_put(t);
 		x->tunnel = NULL;
diff --git a/net/xfrm/xfrm_user.c b/net/xfrm/xfrm_user.c
--- a/net/xfrm/xfrm_user.c
+++ b/net/xfrm/xfrm_user.c
@@ -32,6 +32,12 @@
 #include <linux/in6.h>
 #endif
 
+#if defined(CONFIG_LTQ_PPA_API) || defined(CONFIG_LTQ_PPA_API_MODULE)
+  #include <net/ppa_api.h>
+#endif
+
+
+
 static inline int aead_len(struct xfrm_algo_aead *alg)
 {
 	return sizeof(*alg) + ((alg->alg_key_len + 7) / 8);
@@ -695,6 +701,7 @@ static int xfrm_del_sa(struct sk_buff *s
 
 	err = xfrm_state_delete(x);
 
+
 	if (err < 0)
 		goto out;
 
