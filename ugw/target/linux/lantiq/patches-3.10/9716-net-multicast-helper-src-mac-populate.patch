# HG changeset patch
# Parent d05ded2c9baf1307134fb4a2c3a0ff45ba548eba

diff --git a/net/lantiq/mcast_helper.c b/net/lantiq/mcast_helper.c
--- a/net/lantiq/mcast_helper.c
+++ b/net/lantiq/mcast_helper.c
@@ -457,8 +457,9 @@ static void mcast_helper_five_tuple_br_i
 	struct list_head *gimc_list;
 	IP_Addr_t saddr;
 	IP_Addr_t daddr;
+	const unsigned char *dest = eth_hdr(skb)->h_dest;
 
-	if (skb->protocol == htons(ETH_P_IP)) {
+	if ((skb->protocol == htons(ETH_P_IP)) && (is_multicast_ether_addr(dest))) {
 		struct iphdr *iph = ip_hdr(skb);
 		struct udphdr *udph = (struct udphdr *)((u8 *)iph +(iph->ihl << 2));
 		mcast_helper_init_ipaddr(&saddr, IPV4, &iph->saddr);	
@@ -492,9 +493,9 @@ static void mcast_helper_five_tuple_br_i
 			}
 
 		}
-		else {
-			mch_br_capture_pkt = 0;
-		}
+		//else {
+		//	mch_br_capture_pkt = 0;
+		//}
 	} else if (skb->protocol == htons(ETH_P_IPV6)) {
 		struct ipv6hdr *iph6 = ipv6_hdr(skb);
 		struct udphdr *udph6 = udp_hdr(skb);
@@ -655,6 +656,25 @@ static void mcast_helper_show_gimc_entry
 	}
 	
 }
+static void mcast_helper_show_mcstream(unsigned int grpidx,MCAST_STREAM_t *mc_stream,unsigned int flag)
+{
+	unsigned int index = 0;
+	printk(KERN_INFO   " mc_stream->num_joined_macs: %d flag%d\n",mc_stream->num_joined_macs,flag);
+	
+	printk(KERN_INFO   "%6s %6s %8s\n", 
+			   "sPort", "dPort","mac addr");
+	printk(KERN_INFO  "%3d %3d ",
+			   mc_stream->sPort,
+		           mc_stream->dPort);
+	for(index =0 ; index < mc_stream->num_joined_macs;index++ ) {
+		printk(KERN_INFO "%02x:%02x:%02x:%02x:%02x:%02x",
+			   mc_stream->macaddr[index][0],mc_stream->macaddr[index][1],mc_stream->macaddr[index][2],mc_stream->macaddr[index][3],mc_stream->macaddr[index][4],mc_stream->macaddr[index][5]);
+		printk(KERN_INFO "::");
+	}
+	
+}
+
+
 #endif
 
 
@@ -692,7 +712,8 @@ static MCAST_GIMC_t * mcast_helper_add_g
 	gimc_rec->oifbitmap = 0;
 	gimc_rec->probeFlag = 0;
 
-	
+	memset(gimc_rec->mc_stream.macaddr,0, MAX_MAC*(sizeof(char)*ETH_ALEN));
+        gimc_rec->mc_stream.num_joined_macs =0 ;	
 	INIT_LIST_HEAD(&gimc_rec->list);
 	INIT_LIST_HEAD(&gimc_rec->mc_mem_list);
 	list_add_tail(&gimc_rec->list,head);
@@ -822,39 +843,81 @@ static MCAST_MEMBER_t *mcast_helper_add_
 
 
 /*=============================================================================
+ * function name : mcast_helper_update_mac_list
+ * description   : function updates the mac list which will be passed to registered call back
+		
+ *===========================================================================*/
+
+
+static unsigned int mcast_helper_update_mac_list(MCAST_MEMBER_t *gitxmc_rec,MCAST_GIMC_t *gimc_rec,unsigned char *macaddr,unsigned int action)
+{
+	MCAST_MAC_t *mac_rec = NULL;
+	struct list_head *liter = NULL;
+	struct list_head *tliter = NULL;
+	unsigned int flag = 0;
+	unsigned int index = 0;
+
+	memset(gimc_rec->mc_stream.macaddr,0, MAX_MAC*(sizeof(char)*ETH_ALEN));
+        gimc_rec->mc_stream.num_joined_macs =0 ;	
+
+	if((gitxmc_rec->macaddr_count == 1) && (action == MC_F_DEL)) {
+		if (macaddr != NULL) {
+			memcpy(&(gimc_rec->mc_stream.macaddr[0][0]),macaddr,sizeof(char)*ETH_ALEN);
+			gimc_rec->mc_stream.num_joined_macs = 1;
+		}
+		flag = MC_F_DEL ; 
+
+	}
+	else {
+		list_for_each_safe(liter, tliter, &gitxmc_rec->macaddr_list) {
+			mac_rec = list_entry(liter, MCAST_MAC_t, list);
+              		if(mac_rec) {
+				if(gimc_rec->mc_stream.num_joined_macs < 64 ) {
+					memcpy(&(gimc_rec->mc_stream.macaddr[index][0]),mac_rec->macaddr,sizeof(char)*ETH_ALEN);
+					index ++;
+				}
+			}
+			
+		}
+
+		gimc_rec->mc_stream.num_joined_macs = gitxmc_rec->macaddr_count;
+		flag = action ;
+	}
+	return flag;
+}
+
+
+
+/*=============================================================================
  * Function Name : mcast_helper_delete_gitxmc_record
  * Description	 : Function  which delete the entry in gitxmc record 
  *===========================================================================*/
 
-static void mcast_helper_delete_gitxmc_record(MCAST_MEMBER_t * gitxmc_rec, unsigned char *macaddr)
+static void mcast_helper_delete_gitxmc_record(MCAST_MEMBER_t * gitxmc_rec,MCAST_GIMC_t *gimc_rec,struct net_device *netdev,unsigned char *macaddr, unsigned int action) 
 {
-	MCAST_MAC_t *mac = NULL;
-	struct list_head *liter = NULL;
-        struct list_head *tliter = NULL;
+	unsigned int flag = 0;
 
 	if (gitxmc_rec == NULL)
 	  return;
+	
+	if (gimc_rec->mc_stream.sIP.ipType == IPV4) {
+		if(mch_acl_enabled){
+			if (gitxmc_rec->aclBlocked !=1) {
+				flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,macaddr,action);
+				mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
+			}
+		} else {
+			flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,macaddr,action);
+			mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
 
-	if(macaddr != NULL) {
-		mac = mcast_helper_search_mac_record(gitxmc_rec, macaddr); 
+		}
+		
 	}
+	else if(gimc_rec->mc_stream.sIP.ipType == IPV6) {
+		flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,macaddr,action);
+		mcast_helper_invoke_return_callback(gimc_rec->grpIdx, netdev, (MCAST_STREAM_t *)&(gimc_rec->mc_stream), flag, gitxmc_rec->macaddr_count);
+	} 
 
-	if(mac && gitxmc_rec->macaddr_count <= 1) {
-		list_for_each_safe(liter, tliter, &gitxmc_rec->macaddr_list) {
-                        MCAST_MAC_t *mac_all = list_entry(liter, MCAST_MAC_t, list);
-                        if(mac_all) {
-                                list_del(&mac_all->list);
-                                kfree(mac_all);
-				gitxmc_rec->macaddr_count--;
-                        }
-                }
-		list_del(&gitxmc_rec->list);
-		kfree(gitxmc_rec);
-	} else if (mac) {
-		list_del(&mac->list);
-		kfree(mac);
-		gitxmc_rec->macaddr_count--;
-	}
 }
 
 /*=============================================================================
@@ -1274,7 +1337,11 @@ static int mcast_helper_update_entry(str
 	MCAST_GIMC_t *gimc_rec = NULL;
 	MCAST_MEMBER_t *gitxmc_rec = NULL;
 	MCAST_MAC_t *mac_rec = NULL;
+	struct list_head *liter = NULL;
+	struct list_head *tliter = NULL;
+	MCAST_MAC_t *mac = NULL;
 	int ret=0;
+	unsigned int flag = MC_F_UPD ;
 
 	struct list_head *gimc_list = mcast_helper_list_p(mc_rec->groupIP.ipType) ;
 	gimc_rec = mcast_helper_search_gimc_record(&(mc_rec->groupIP),&(mc_rec->srcIP),gimc_list);
@@ -1293,6 +1360,7 @@ static int mcast_helper_update_entry(str
 			mac_rec = mcast_helper_update_macaddr_record(gitxmc_rec, mc_rec->macaddr);
 			if (mac_rec == NULL)
 				return FAILURE;
+
 		}
 	}
 
@@ -1322,8 +1390,8 @@ static int mcast_helper_update_entry(str
 			return FAILURE;
 	}
       } else {
-		memcpy(gimc_rec->mc_stream.macaddr,mc_rec->macaddr,sizeof(char)*ETH_ALEN);
-		mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_ADD, gitxmc_rec->macaddr_count);
+		flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,mc_rec->macaddr,flag);
+		mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
 			
 	}
 	
@@ -1343,9 +1411,10 @@ static int mcast_helper_add_entry(struct
 {
 	MCAST_GIMC_t *gimc_rec = NULL;
 	MCAST_MEMBER_t *gitxmc_rec = NULL;
-	int ret=0;
 	struct net_device *upper_dev = NULL;
 	struct list_head *gimc_list = mcast_helper_list_p(mc_rec->groupIP.ipType) ;
+	int ret=0;
+	unsigned int flag = 0;
 	
 	gimc_rec = mcast_helper_search_gimc_record(&(mc_rec->groupIP),&(mc_rec->srcIP),gimc_list);
 	if (gimc_rec == NULL) {
@@ -1367,6 +1436,7 @@ static int mcast_helper_add_entry(struct
                 upper_dev = netdev_master_upper_dev_get(rxnetdev);
                 rtnl_unlock();
                 if (upper_dev && (upper_dev->priv_flags & IFF_EBRIDGE)) {
+                        flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,mc_rec->macaddr,MC_F_ADD);
                         mch_br_capture_pkt = 1;
                 } else {
 
@@ -1396,7 +1466,7 @@ static int mcast_helper_add_entry(struct
 						return FAILURE;
 				}
 			}else {
-				memcpy(gimc_rec->mc_stream.macaddr,mc_rec->macaddr,sizeof(char)*ETH_ALEN);
+				flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,mc_rec->macaddr,MC_F_ADD);
 	        		mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_ADD, gitxmc_rec->macaddr_count);
 		        }
 		}
@@ -1416,6 +1486,10 @@ static int mcast_helper_delete_entry(str
 	MCAST_GIMC_t *gimc_rec = NULL;
 	MCAST_MEMBER_t *gitxmc_rec = NULL;
 	struct list_head *gimc_list = mcast_helper_list_p(mc_mem->groupIP.ipType);
+	MCAST_MAC_t *mac = NULL;
+	struct list_head *liter = NULL;
+        struct list_head *tliter = NULL;
+	unsigned int flag = 0;
 
 	gimc_rec = mcast_helper_search_gimc_record(&(mc_mem->groupIP),&(mc_mem->srcIP),gimc_list);
 	if(gimc_rec == NULL)
@@ -1425,25 +1499,31 @@ static int mcast_helper_delete_entry(str
 	gitxmc_rec = mcast_helper_search_gitxmc_record(gimc_rec->grpIdx,netdev,&gimc_rec->mc_mem_list);	
 	if (gitxmc_rec == NULL)
 		return FAILURE;
+	
+	if(mc_mem->macaddr != NULL) {
+		mac = mcast_helper_search_mac_record(gitxmc_rec,mc_mem-> macaddr); 
+	}
 
-	if (gimc_rec->mc_stream.sIP.ipType == IPV4) {
-		if(mch_acl_enabled){
-			if (gitxmc_rec->aclBlocked !=1) {
-				memcpy(gimc_rec->mc_stream.macaddr,mc_mem->macaddr,sizeof(char)*ETH_ALEN);
-				mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_DEL, gitxmc_rec->macaddr_count);
-			}
-		} else{
-			memcpy(gimc_rec->mc_stream.macaddr,mc_mem->macaddr,sizeof(char)*ETH_ALEN);
-			mcast_helper_invoke_return_callback(gimc_rec->grpIdx,netdev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_DEL, gitxmc_rec->macaddr_count);
-		}
-		
+	if(mac && gitxmc_rec->macaddr_count <= 1) {
+		mcast_helper_delete_gitxmc_record(gitxmc_rec,gimc_rec,netdev,mc_mem->macaddr,MC_F_DEL);
+		list_for_each_safe(liter, tliter, &gitxmc_rec->macaddr_list) {
+                        MCAST_MAC_t *mac_all = list_entry(liter, MCAST_MAC_t, list);
+                        if(mac_all) {
+                                list_del(&mac_all->list);
+                                kfree(mac_all);
+				gitxmc_rec->macaddr_count--;
+                        }
+                }
+		list_del(&gitxmc_rec->list);
+		kfree(gitxmc_rec);
+	} else if (mac) {
+		list_del(&mac->list);
+		kfree(mac);
+		gitxmc_rec->macaddr_count--;
+		flag = MC_F_DEL_UPD ;
+		mcast_helper_delete_gitxmc_record(gitxmc_rec,gimc_rec,netdev,mc_mem->macaddr,flag);
 	}
-	else if(gimc_rec->mc_stream.sIP.ipType == IPV6) {
-		memcpy(gimc_rec->mc_stream.macaddr,mc_mem->macaddr,sizeof(char)*ETH_ALEN);
-		mcast_helper_invoke_return_callback(gimc_rec->grpIdx, netdev, (MCAST_STREAM_t *)&(gimc_rec->mc_stream), MC_F_DEL, gitxmc_rec->macaddr_count);
-	} 
-	mcast_helper_delete_gitxmc_record(gitxmc_rec, mc_mem->macaddr);
-	
+
 	if (list_empty(&gimc_rec->mc_mem_list))
 		mcast_helper_delete_gimc_record(gimc_rec);
 	
@@ -1513,6 +1593,8 @@ static long mcast_helper_ioctl(struct fi
 	        	netdev = mcast_helper_dev_get_by_name(&init_net,mcast_mem.memIntrfName);
 	        	rxnetdev = mcast_helper_dev_get_by_name(&init_net,mcast_mem.rxIntrfName);
 		#endif
+               if(rxnetdev == NULL || netdev == NULL)
+                       return -ENXIO;
 
 		rtnl_lock();
 		upper_dev = netdev_master_upper_dev_get(rxnetdev);
@@ -2038,9 +2120,7 @@ int mcast_helper_sig_check_update_ip(str
 	struct list_head *gimc_list = mcast_helper_list_p(IPV4) ;
 	MCAST_GIMC_t *gimc_rec = NULL;
 	MCAST_MEMBER_t *gitxmc_rec = NULL;
-	struct list_head *liter = NULL;
-	struct list_head *tliter = NULL;
-	MCAST_MAC_t *mac_rec = NULL;
+	unsigned int flag = 0;
 
 
 	if (ip_hdr(skb)->protocol == IPPROTO_UDP) {
@@ -2060,14 +2140,9 @@ int mcast_helper_sig_check_update_ip(str
 				gitxmc_rec = mcast_helper_search_gitxmc_record(gimc_rec->grpIdx,skb->dev,&gimc_rec->mc_mem_list);	
 				if (gitxmc_rec != NULL) {
 					gitxmc_rec->aclBlocked=0;
-					list_for_each_safe(liter,tliter,&gitxmc_rec->macaddr_list) {
-						mac_rec = list_entry(liter, MCAST_MAC_t, list);
-						if(mac_rec) {
-							memcpy(gimc_rec->mc_stream.macaddr,mac_rec->macaddr,sizeof(char)*ETH_ALEN);
-							mcast_helper_invoke_return_callback(gimc_rec->grpIdx,skb->dev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_ADD, gitxmc_rec->macaddr_count);
-						}
-					}
-
+					flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,NULL,MC_F_ADD);
+					mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
+	
 				}
 
 			}
@@ -2097,9 +2172,7 @@ int mcast_helper_sig_check_update_ip6(st
 	struct list_head *gimc_list = mcast_helper_list_p(IPV6) ;
 	MCAST_GIMC_t *gimc_rec = NULL;
 	MCAST_MEMBER_t *gitxmc_rec = NULL;
-  	struct list_head *liter = NULL;
-	struct list_head *tliter = NULL;
-	MCAST_MAC_t *mac_rec = NULL;
+	unsigned int flag = 0;
 
 	data = (unsigned char *)udp_hdr(skb)+UDP_HDR_LEN;
 
@@ -2117,13 +2190,8 @@ int mcast_helper_sig_check_update_ip6(st
 			gitxmc_rec = mcast_helper_search_gitxmc_record(gimc_rec->grpIdx,skb->dev,&gimc_rec->mc_mem_list);	
 			if (gitxmc_rec != NULL) {
 				gitxmc_rec->aclBlocked=0;
-				list_for_each_safe(liter,tliter,&gitxmc_rec->macaddr_list) {
-                                	mac_rec = list_entry(liter, MCAST_MAC_t, list);
-	                        	if(mac_rec) {
-						memcpy(gimc_rec->mc_stream.macaddr,mac_rec->macaddr,sizeof(char)*ETH_ALEN);
-						mcast_helper_invoke_return_callback(gimc_rec->grpIdx,skb->dev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_ADD, gitxmc_rec->macaddr_count);
-					} 
-				}
+				flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,NULL,MC_F_UPD);
+				mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
 			}
 
 		}
@@ -2186,9 +2254,7 @@ static void mcast_helper_timer_handler(u
 	unsigned int i=0;
 	unsigned int delflag=1;
 	unsigned long long int oifbitmap = 0;
-	struct list_head *liter_mac = NULL;
-	struct list_head *tliter_mac = NULL;
-	MCAST_MAC_t *mac_rec = NULL;
+	unsigned int flag = 0;
 
 	if (mch_iptype == IPV6)
 		gimc_list = mcast_helper_list_p(IPV6) ;
@@ -2213,13 +2279,9 @@ static void mcast_helper_timer_handler(u
         			        if (oifbitmap & 0x1) {
 						if (gitxmc_rec->memDev->ifindex == i) {
 							if (gitxmc_rec->aclBlocked==1) {
-								list_for_each_safe(liter_mac,tliter_mac,&gitxmc_rec->macaddr_list) {
-			                                                mac_rec = list_entry(liter_mac, MCAST_MAC_t, list);
-                        			                        if(mac_rec) {	
-										memcpy(gimc_rec->mc_stream.macaddr,mac_rec->macaddr,sizeof(char)*ETH_ALEN);
-										mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_ADD, gitxmc_rec->macaddr_count);
-									}
-								}
+
+								flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,NULL,MC_F_ADD);
+								mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
 								gitxmc_rec->aclBlocked=0;
 	
 							}
@@ -2233,13 +2295,9 @@ static void mcast_helper_timer_handler(u
 
 				if (delflag == 1) {
 					/* delete this interface from the gitxmc list and invoke registered call back for this if any */
-					list_for_each_safe(liter_mac,tliter_mac,&gitxmc_rec->macaddr_list) {
-                                        	mac_rec = list_entry(liter_mac, MCAST_MAC_t, list);
-                                                if(mac_rec) {
-							memcpy(gimc_rec->mc_stream.macaddr,mac_rec->macaddr,sizeof(char)*ETH_ALEN);
-							mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),MC_F_DEL, gitxmc_rec->macaddr_count);
-						}
-					}
+
+					flag = mcast_helper_update_mac_list(gitxmc_rec,gimc_rec,NULL,MC_F_DEL);
+					mcast_helper_invoke_return_callback(gimc_rec->grpIdx,gitxmc_rec->memDev,(MCAST_STREAM_t *)&(gimc_rec->mc_stream),flag, gitxmc_rec->macaddr_count);
 					gitxmc_rec->aclBlocked=1;
 				}
 	
diff --git a/net/lantiq/mcast_helper.h b/net/lantiq/mcast_helper.h
--- a/net/lantiq/mcast_helper.h
+++ b/net/lantiq/mcast_helper.h
@@ -67,9 +67,11 @@ typedef void (*Mcast_module_callback_t)(
 
 #define MC_F_ADD 0x01
 #define MC_F_DEL 0x02
-
+#define MC_F_UPD 0x03
+#define MC_F_DEL_UPD 0x08
 #define FTUPLE_ARR_SIZE 10
 #define IFSIZE 20
+#define MAX_MAC 64
 
 /** Protocol type */
 typedef enum {
@@ -94,8 +96,10 @@ typedef struct  _mcast_stream_t{
 	uint32_t proto; /* Protocol Type */
 	uint32_t sPort; /* Source Port */
 	uint32_t dPort; /* Destination Port */
-	unsigned char macaddr[ETH_ALEN]; /* Lan/wlan Mac Address */
-	unsigned char src_mac[ETH_ALEN];/* source Mac address for grx5xx */
+	unsigned char src_mac[ETH_ALEN];/* LAN/WLAN source Mac address  */
+	uint32_t num_joined_macs; /* Number of Joined MACs */
+	unsigned char macaddr[MAX_MAC][ETH_ALEN]; /* Lan/wlan array of joined Mac Address */
+
 } MCAST_STREAM_t;
 
 typedef struct _mcast_mac_t {
