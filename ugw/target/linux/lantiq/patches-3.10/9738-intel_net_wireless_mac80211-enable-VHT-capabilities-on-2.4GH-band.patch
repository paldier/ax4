From d4b6104e0fb7f24b0917f7d7bea8d0f19b841e08 Mon Sep 17 00:00:00 2001
From: grishche <a.grishchenko@intel.com>
Date: Tue, 6 Jun 2017 14:54:05 +0300
Subject: [PATCH 9738/9740] mac80211-enable-VHT-capabilities-on-2.4GH-band

---
 include/linux/ieee80211.h  |  6 +++++
 net/mac80211/ieee80211_i.h | 12 ++++++++-
 net/mac80211/mlme.c        | 22 ++++++++++++++++
 net/mac80211/scan.c        |  8 ++++++
 net/mac80211/util.c        | 63 ++++++++++++++++++++++++++++++++--------------
 5 files changed, 91 insertions(+), 20 deletions(-)

diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index 06b0ed0..35a56c7 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2054,6 +2054,12 @@ enum ieee80211_sa_query_action {
 #define WLAN_OUI_TYPE_MICROSOFT_WMM	2
 #define WLAN_OUI_TYPE_MICROSOFT_WPS	4
 
+#define WLAN_OUI_BROADCOM 			0x00904c /* Broadcom (Epigram) */
+#define WLAN_VENDOR_VHT_TYPE		0x04
+#define WLAN_VENDOR_VHT_SUBTYPE		0x08
+#define WLAN_VENDOR_VHT_SUBTYPE2	0x00
+#define WLAN_VENDOR_VHT_SUBTYPE3	0x18
+
 /*
  * WMM/802.11e Tspec Element
  */
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 3de72de..8a9ebca 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -120,6 +120,9 @@ struct ieee80211_bss {
 
 	/* Keep track of what bits of information we have valid info for. */
 	u8 valid_data;
+
+	const u8 *vendor_vht;
+	u8 vendor_vht_len;
 };
 
 /**
@@ -140,6 +143,7 @@ enum ieee80211_bss_corrupt_data_flags {
  * @IEEE80211_BSS_VALID_WMM: WMM/UAPSD data was gathered from non-corrupt IE
  * @IEEE80211_BSS_VALID_RATES: Supported rates were gathered from non-corrupt IE
  * @IEEE80211_BSS_VALID_ERP: ERP flag was gathered from non-corrupt IE
+ * @IEEE80211_BSS_VALID_VENDOR_VHT: vendor vht was gathered from non-corrupt IE
  *
  * These are bss flags that are attached to a bss in the
  * @valid_data field of &struct ieee80211_bss.  They show which parts
@@ -149,7 +153,8 @@ enum ieee80211_bss_corrupt_data_flags {
 enum ieee80211_bss_valid_data_flags {
 	IEEE80211_BSS_VALID_WMM			= BIT(1),
 	IEEE80211_BSS_VALID_RATES		= BIT(2),
-	IEEE80211_BSS_VALID_ERP			= BIT(3)
+	IEEE80211_BSS_VALID_ERP			= BIT(3),
+	IEEE80211_BSS_VALID_VENDOR_VHT	= BIT(4)
 };
 
 typedef unsigned __bitwise__ ieee80211_tx_result;
@@ -386,6 +391,9 @@ struct ieee80211_mgd_assoc_data {
 
 	struct ieee80211_vht_cap ap_vht_cap;
 
+	const u8 *vendor_vht;
+	u8 vendor_vht_len;
+
 	size_t ie_len;
 	u8 ie[];
 };
@@ -1206,6 +1214,7 @@ struct ieee802_11_elems {
 	const struct ieee80211_timeout_interval_ie *timeout_int;
 	const u8 *opmode_notif;
 	const struct ieee80211_sec_chan_offs_ie *sec_chan_offs;
+	const u8 *vendor_vht;
 
 	/* length of them, respectively */
 	u8 ssid_len;
@@ -1222,6 +1231,7 @@ struct ieee802_11_elems {
 	u8 prep_len;
 	u8 perr_len;
 	u8 country_elem_len;
+	u8 vendor_vht_len;
 
 	/* whether a parse error occurred while retrieving these elements */
 	bool parse_error;
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index d5d9413..c92d251 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -897,6 +897,20 @@ static void ieee80211_send_assoc(struct ieee80211_sub_if_data *sdata)
 		*pos++ = qos_info;
 	}
 
+	if (assoc_data->vendor_vht && sband->vht_cap.vht_supported) {
+		struct ieee80211_vht_cap *ap_vht_cap =
+				(struct ieee80211_vht_cap *) (assoc_data->vendor_vht + 7);
+		pos = skb_put(skb, 7);
+		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+		*pos++ = 5 + 2 + sizeof(struct ieee80211_vht_cap);
+		*pos++ = 0x00; /* Broadcom (Epigram) (00:90:4C) */
+		*pos++ = 0x90;
+		*pos++ = 0x4C;
+		*pos++ = WLAN_VENDOR_VHT_TYPE;
+		*pos++ = WLAN_VENDOR_VHT_SUBTYPE;
+		ieee80211_add_vht_ie(sdata, skb, sband, ap_vht_cap);
+	}
+
 	/* add any remaining custom (i.e. vendor specific here) IEs */
 	if (assoc_data->ie_len && assoc_data->ie) {
 		noffset = assoc_data->ie_len;
@@ -2711,6 +2725,12 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
 						    elems.vht_cap_elem, sta);
 
+	if (elems.vendor_vht) {
+		struct ieee80211_vht_cap *vht_cap_ie =
+				(struct ieee80211_vht_cap *) (elems.vendor_vht + 7);
+		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband, vht_cap_ie, sta);
+	}
+
 	/*
 	 * Some APs, e.g. Netgear WNDR3700, report invalid HT operation data
 	 * in their association response, so ignore that data for our own
@@ -4398,6 +4418,8 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 			  (local->hw.queues >= IEEE80211_NUM_ACS);
 	assoc_data->supp_rates = bss->supp_rates;
 	assoc_data->supp_rates_len = bss->supp_rates_len;
+	assoc_data->vendor_vht = bss->vendor_vht;
+	assoc_data->vendor_vht_len = bss->vendor_vht_len;
 
 	rcu_read_lock();
 	ht_ie = ieee80211_bss_get_ie(req->bss, WLAN_EID_HT_OPERATION);
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index a30049d..96898d3 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -140,6 +140,14 @@ ieee80211_bss_info_update(struct ieee80211_local *local,
 			bss->valid_data |= IEEE80211_BSS_VALID_WMM;
 	}
 
+	if (elems->vendor_vht && (!elems->parse_error ||
+			!(bss->valid_data & IEEE80211_BSS_VALID_VENDOR_VHT))) {
+		bss->vendor_vht = elems->vendor_vht;
+		bss->vendor_vht_len = elems->vendor_vht_len;
+		if (!elems->parse_error)
+			bss->valid_data |= IEEE80211_BSS_VALID_VENDOR_VHT;
+	}
+
 	return bss;
 }
 
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index a875a0a..a718297 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -755,6 +755,46 @@ void ieee80211_queue_delayed_work(struct ieee80211_hw *hw,
 }
 EXPORT_SYMBOL(ieee80211_queue_delayed_work);
 
+static u32 ieee802_11_parse_vendor_specific(const u8 *pos, u8 elen,
+		struct ieee802_11_elems *elems, bool calc_crc, u32 crc)
+{
+	if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x50 && pos[2] == 0xf2) {
+		/* Microsoft OUI (00:50:F2) */
+
+		if (calc_crc)
+			crc = crc32_be(crc, pos - 2, elen + 2);
+
+		if (elen >= 5 && pos[3] == 2) {
+			/* OUI Type 2 - WMM IE */
+			if (pos[4] == 0) {
+				elems->wmm_info = pos;
+				elems->wmm_info_len = elen;
+			} else if (pos[4] == 1) {
+				elems->wmm_param = pos;
+				elems->wmm_param_len = elen;
+			}
+		}
+	}
+
+	if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x90 && pos[2] == 0x4c) {
+		/* Broadcom (Epigram) (00:90:4C) */
+
+		if (calc_crc)
+			crc = crc32_be(crc, pos - 2, elen + 2);
+
+		if (elen >= 5 && pos[3] == WLAN_VENDOR_VHT_TYPE) {
+			if ((pos[4] == WLAN_VENDOR_VHT_SUBTYPE  ||
+			     pos[4] == WLAN_VENDOR_VHT_SUBTYPE2 ||
+			     pos[4] == WLAN_VENDOR_VHT_SUBTYPE3)) {
+				elems->vendor_vht = pos;
+				elems->vendor_vht_len = elen;
+			}
+		}
+	}
+
+	return crc;
+}
+
 u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 			       struct ieee802_11_elems *elems,
 			       u64 filter, u32 crc)
@@ -858,24 +898,8 @@ u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 			elems->challenge_len = elen;
 			break;
 		case WLAN_EID_VENDOR_SPECIFIC:
-			if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x50 &&
-			    pos[2] == 0xf2) {
-				/* Microsoft OUI (00:50:F2) */
-
-				if (calc_crc)
-					crc = crc32_be(crc, pos - 2, elen + 2);
-
-				if (elen >= 5 && pos[3] == 2) {
-					/* OUI Type 2 - WMM IE */
-					if (pos[4] == 0) {
-						elems->wmm_info = pos;
-						elems->wmm_info_len = elen;
-					} else if (pos[4] == 1) {
-						elems->wmm_param = pos;
-						elems->wmm_param_len = elen;
-					}
-				}
-			}
+			crc = ieee802_11_parse_vendor_specific(pos, elen, elems,
+					calc_crc, crc);
 			break;
 		case WLAN_EID_RSN:
 			elems->rsn = pos;
@@ -1383,7 +1407,8 @@ int ieee80211_build_preq_ies(struct ieee80211_local *local, u8 *buffer,
 		pos += noffset - offset;
 	}
 
-	if (sband->vht_cap.vht_supported) {
+	/* in 2GHZ, don't add vht cap, event if we support it */
+	if (sband->vht_cap.vht_supported && band != IEEE80211_BAND_2GHZ) {
 		if (end - pos < 2 + sizeof(struct ieee80211_vht_cap))
 			goto out_err;
 		pos = ieee80211_ie_build_vht_cap(pos, &sband->vht_cap,
-- 
2.10.1

