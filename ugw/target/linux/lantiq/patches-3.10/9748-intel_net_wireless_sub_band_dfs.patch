From 09927caafcdd5eb5c8a0375234c2236553662f8c Mon Sep 17 00:00:00 2001
From: vulsmike <mikelis.vuls@intel.com>
Date: Fri, 23 Feb 2018 13:26:31 +0200
Subject: [PATCH 30/36] sub_band_dfs

---
 include/net/cfg80211.h |  9 +++++--
 net/mac80211/util.c    |  2 +-
 net/wireless/chan.c    |  2 +-
 net/wireless/core.h    |  1 +
 net/wireless/mlme.c    | 64 ++++++++++++++++++++++++++++++++++++++++++--------
 net/wireless/nl80211.c | 15 +++++++++++-
 net/wireless/nl80211.h |  3 ++-
 7 files changed, 80 insertions(+), 16 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index dcb88b8..e7af6b9 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -632,6 +632,7 @@ struct cfg80211_csa_settings {
 	bool radar_required;
 	bool block_tx;
 	u8 count;
+	u8 sb_dfs_bw; /* from enum nl80211_sb_dfs_bw */
 };
 
 /**
@@ -4201,12 +4202,13 @@ void cfg80211_cqm_rssi_notify(struct net_device *dev,
  * cfg80211_radar_event - radar detection event
  * @wiphy: the wiphy
  * @chandef: chandef for the current channel
+ * @radar_bit_map: Bit map of channels, on which radar was detected
  * @gfp: context flags
  *
  * This function is called when a radar is detected on the current chanenl.
  */
-void cfg80211_radar_event(struct wiphy *wiphy,
-			  struct cfg80211_chan_def *chandef, gfp_t gfp);
+void cfg80211_radar_event(struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+			  u8 radar_bit_map, gfp_t gfp);
 
 /**
  * cfg80211_cac_event - Channel availability check (CAC) event
@@ -4486,6 +4488,9 @@ void cfg80211_report_wowlan_wakeup(struct wireless_dev *wdev,
  * by .crit_proto_start() has expired.
  */
 void cfg80211_crit_proto_stopped(struct wireless_dev *wdev, gfp_t gfp);
+void cfg80211_set_dfs_state_bit_map(struct wiphy *wiphy,
+				    struct cfg80211_chan_def *chandef,
+				    u8 radar_bit_map, enum nl80211_dfs_state dfs_state);
 
 /* Logging, debugging and troubleshooting/diagnostic helpers. */
 
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 1312ee3..41ba15a 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -2355,7 +2355,7 @@ void ieee80211_dfs_radar_detected_work(struct work_struct *work)
 		WARN_ON(1);
 	else {
 		chandef = local->hw.conf.chandef;
-		cfg80211_radar_event(local->hw.wiphy, &chandef, GFP_KERNEL);
+		cfg80211_radar_event(local->hw.wiphy, &chandef, 0, GFP_KERNEL);
 	}
 }
 
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index 7fb1313..caf16aa 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -147,7 +147,7 @@ static void chandef_primary_freqs(const struct cfg80211_chan_def *c,
 	}
 }
 
-static int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c)
+int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c)
 {
 	int width;
 
diff --git a/net/wireless/core.h b/net/wireless/core.h
index 7fc97ca..99c743f 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -432,6 +432,7 @@ int cfg80211_can_use_iftype_chan(struct cfg80211_registered_device *rdev,
 				 struct ieee80211_channel *chan,
 				 enum cfg80211_chan_mode chanmode,
 				 u8 radar_detect);
+int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c);
 
 /**
  * cfg80211_chandef_dfs_required - checks if radar detection is required
diff --git a/net/wireless/mlme.c b/net/wireless/mlme.c
index afeb4f0..ad911e3 100644
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -876,7 +876,7 @@ void cfg80211_dfs_channels_update_work(struct work_struct *work)
 
 				nl80211_radar_notify(rdev, &chandef,
 						     NL80211_RADAR_NOP_FINISHED,
-						     NULL, GFP_ATOMIC);
+						     NULL, 0, GFP_ATOMIC);
 				continue;
 			}
 
@@ -895,27 +895,71 @@ void cfg80211_dfs_channels_update_work(struct work_struct *work)
 				   next_time);
 }
 
+static void cfg80211_set_chans_dfs_state_bit_map (struct wiphy *wiphy, u32 center_freq,
+						  u32 bandwidth, u8 radar_bit_map, u8 *bit_idx,
+						  enum nl80211_dfs_state dfs_state)
+{
+	struct ieee80211_channel *c;
+	u32 freq;
+
+	for (freq = center_freq - bandwidth/2 + 10;
+	     freq <= center_freq + bandwidth/2 - 10;
+	     freq += 20) {
+		if (radar_bit_map & (1 << *bit_idx)) {
+			c = ieee80211_get_channel(wiphy, freq);
+			if (!c || !(c->flags & IEEE80211_CHAN_RADAR)) {
+				(*bit_idx)++;
+				continue;
+			}
+
+			c->dfs_state = dfs_state;
+			c->dfs_state_entered = jiffies;
+		}
+		(*bit_idx)++;
+	}
+}
+
+void cfg80211_set_dfs_state_bit_map (struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+				     u8 radar_bit_map, enum nl80211_dfs_state dfs_state)
+{
+	u8 bit_idx = 0;
+	u32 center_freq, bandwidth;
+
+	center_freq = chandef->center_freq1;
+	bandwidth   = cfg80211_chandef_get_width(chandef);
+
+	cfg80211_set_chans_dfs_state_bit_map(wiphy, center_freq, bandwidth,
+					     radar_bit_map, &bit_idx, dfs_state);
+
+	if (NL80211_CHAN_WIDTH_80P80 != bandwidth)
+		return;
+
+	center_freq = chandef->center_freq2;
+	cfg80211_set_chans_dfs_state_bit_map(wiphy, center_freq, bandwidth,
+					     radar_bit_map, &bit_idx, dfs_state);
+}
+EXPORT_SYMBOL(cfg80211_set_dfs_state_bit_map);
 
 void cfg80211_radar_event(struct wiphy *wiphy,
 			  struct cfg80211_chan_def *chandef,
-			  gfp_t gfp)
+			  u8 radar_bit_map, gfp_t gfp)
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_dev(wiphy);
 	unsigned long timeout;
 
 	trace_cfg80211_radar_event(wiphy, chandef);
 
-	/* only set the chandef supplied channel to unavailable, in
-	 * case the radar is detected on only one of multiple channels
-	 * spanned by the chandef.
-	 */
-	cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_UNAVAILABLE);
+	if (radar_bit_map)
+		cfg80211_set_dfs_state_bit_map(wiphy, chandef, radar_bit_map,
+					       NL80211_DFS_UNAVAILABLE);
+	else
+		cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_UNAVAILABLE);
 
 	timeout = msecs_to_jiffies(IEEE80211_DFS_MIN_NOP_TIME_MS);
 	queue_delayed_work(cfg80211_wq, &rdev->dfs_update_channels_wk,
 			   timeout);
 
-	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, NULL, gfp);
+	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, NULL, radar_bit_map, gfp);
 }
 EXPORT_SYMBOL(cfg80211_radar_event);
 
@@ -953,7 +997,7 @@ void cfg80211_cac_event(struct net_device *netdev,
 	}
 	wdev->cac_started = false;
 
-	nl80211_radar_notify(rdev, &chandef, event, netdev, gfp);
+	nl80211_radar_notify(rdev, &chandef, event, netdev, 0, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event);
 
@@ -989,7 +1033,7 @@ void cfg80211_cac_event_2(struct net_device *netdev,
 	}
 	wdev->cac_started = false;
 
-	nl80211_radar_notify(rdev, chandef, event, netdev, gfp);
+	nl80211_radar_notify(rdev, chandef, event, netdev, 0, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event_2);
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 7e1272f..df28fd9 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -5770,6 +5770,12 @@ skip_beacons:
 	err = nl80211_parse_chandef(rdev, info, &params.chandef);
 	if (err)
 		return err;
+	
+	if (info->attrs[NL80211_ATTR_SB_DFS_BW])
+		params.sb_dfs_bw = nla_get_u8(info->attrs[NL80211_ATTR_SB_DFS_BW]);
+
+	if (params.sb_dfs_bw)
+		cfg80211_set_dfs_state(&rdev->wiphy, &params.chandef, NL80211_DFS_AVAILABLE);
 
 	if (!cfg80211_reg_can_beacon(&rdev->wiphy, &params.chandef))
 		return -EINVAL;
@@ -10744,7 +10750,8 @@ void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp)
+		     struct net_device *netdev,
+		     u8 radar_bit_map, gfp_t gfp)
 {
 	struct sk_buff *msg;
 	void *hdr;
@@ -10777,6 +10784,12 @@ nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 	if (nl80211_send_chandef(msg, chandef))
 		goto nla_put_failure;
 
+	if (radar_bit_map) {
+		if (NL80211_RADAR_DETECTED == event &&
+		    nla_put_u8(msg, NL80211_ATTR_RADAR_BIT_MAP, radar_bit_map))
+			goto nla_put_failure;
+	}
+
 	if (genlmsg_end(msg, hdr) < 0) {
 		nlmsg_free(msg);
 		return;
diff --git a/net/wireless/nl80211.h b/net/wireless/nl80211.h
index 1e7d07d..9d05205 100644
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -72,6 +72,7 @@ void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp);
+		     struct net_device *netdev,
+		     u8 radar_bit_map, gfp_t gfp);
 
 #endif /* __NET_WIRELESS_NL80211_H */
-- 
2.10.1

