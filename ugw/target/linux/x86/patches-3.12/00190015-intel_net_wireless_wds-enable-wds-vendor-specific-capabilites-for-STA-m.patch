From e46d063535d8b316cc382fd0c5c415e1f42c4fe6 Mon Sep 17 00:00:00 2001
From: grishche <a.grishchenko@intel.com>
Date: Tue, 6 Jun 2017 15:05:51 +0300
Subject: [PATCH 16/20] wds-enable-wds-vendor-specific-capabilites-for-STA-m

---
 include/net/cfg80211.h       | 2 ++
 include/net/mac80211.h       | 3 +++
 net/mac80211/ieee80211_i.h   | 2 ++
 net/mac80211/mlme.c          | 4 ++++
 net/wireless/nl80211.c       | 5 +++++
 6 files changed, 18 insertions(+)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 50f048d..ed00d74 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -1579,6 +1579,7 @@ enum cfg80211_assoc_req_flags {
  * @ht_capa_mask:  The bits of ht_capa which are to be used.
  * @vht_capa: VHT capability override
  * @vht_capa_mask: VHT capability mask indicating which fields to use
+ * @vendor_wds: use wds vendor specific capabilities
  */
 struct cfg80211_assoc_request {
 	struct cfg80211_bss *bss;
@@ -1590,6 +1591,7 @@ struct cfg80211_assoc_request {
 	struct ieee80211_ht_cap ht_capa;
 	struct ieee80211_ht_cap ht_capa_mask;
 	struct ieee80211_vht_cap vht_capa, vht_capa_mask;
+	int vendor_wds;
 };
 
 /**
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index ccbda39..fe631be 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1385,6 +1385,8 @@ struct ieee80211_sta_rates {
  * @smps_mode: current SMPS mode (off, static or dynamic)
  * @rates: rate control selection table
  * @mfp: indicates whether the STA uses management frame protection or not.
+ * @vendor_wds: indicates whether the STA supports
+ *	wds vendor specific capabilities
  */
 struct ieee80211_sta {
 	u32 supp_rates[IEEE80211_NUM_BANDS];
@@ -1400,6 +1402,7 @@ struct ieee80211_sta {
 	enum ieee80211_smps_mode smps_mode;
 	struct ieee80211_sta_rates __rcu *rates;
 	bool mfp;
+	int vendor_wds;
 
 	/* must be last */
 	u8 drv_priv[0] __aligned(sizeof(void *));
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 09d4201..6ca8a31 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -495,6 +495,8 @@ struct ieee80211_if_managed {
 	struct ieee80211_ht_cap ht_capa_mask; /* Valid parts of ht_capa */
 	struct ieee80211_vht_cap vht_capa; /* configured VHT overrides */
 	struct ieee80211_vht_cap vht_capa_mask; /* Valid parts of vht_capa */
+
+	int vendor_wds;
 };
 
 struct ieee80211_if_ibss {
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index c14c1cb..0bf1283 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -2722,6 +2722,8 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 	if (elems.wmm_param)
 		set_sta_flag(sta, WLAN_STA_WME);
 
+	sta->sta.vendor_wds = ifmgd->vendor_wds;
+
 	err = sta_info_move_state(sta, IEEE80211_STA_ASSOC);
 	if (!err && !(ifmgd->flags & IEEE80211_STA_CONTROL_PORT))
 		err = sta_info_move_state(sta, IEEE80211_STA_AUTHORIZED);
@@ -4364,6 +4366,8 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 		ifmgd->flags &= ~IEEE80211_STA_MFP_ENABLED;
 	}
 
+	ifmgd->vendor_wds = req->vendor_wds;
+
 	if (req->crypto.control_port)
 		ifmgd->flags |= IEEE80211_STA_CONTROL_PORT;
 	else
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 563e4ea..c23344a 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -360,6 +360,7 @@ static const struct nla_policy nl80211_policy[NL80211_ATTR_MAX+1] = {
 	[NL80211_ATTR_CSA_IES] = { .type = NLA_NESTED },
 	[NL80211_ATTR_CSA_C_OFF_BEACON] = { .type = NLA_U16 },
 	[NL80211_ATTR_CSA_C_OFF_PRESP] = { .type = NLA_U16 },
+	[NL80211_ATTR_VENDOR_WDS] = { .type = NLA_U32 },
 };
 
 /* policy for the key attributes */
@@ -6349,6 +6350,10 @@ static int nl80211_associate(struct sk_buff *skb, struct genl_info *info)
 			return -EINVAL;
 	}
 
+	if (info->attrs[NL80211_ATTR_VENDOR_WDS]) {
+		req.vendor_wds = nla_get_u32(info->attrs[NL80211_ATTR_VENDOR_WDS]);
+	}
+
 	if (info->attrs[NL80211_ATTR_PREV_BSSID])
 		req.prev_bssid = nla_data(info->attrs[NL80211_ATTR_PREV_BSSID]);
 
-- 
2.10.1

