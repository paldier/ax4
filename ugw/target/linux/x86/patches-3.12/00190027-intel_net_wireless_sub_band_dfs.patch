From 6c3369fc4108c16cc7a6e69739e2cf93783ba084 Mon Sep 17 00:00:00 2001
From: vulsmike <mikelis.vuls@intel.com>
Date: Fri, 8 Dec 2017 15:55:00 +0200
Subject: [PATCH 28/28] sub_band_dfs

---
 include/net/cfg80211.h       |  9 +++++--
 net/mac80211/util.c          |  2 +-
 net/wireless/chan.c          |  2 +-
 net/wireless/core.h          |  1 +
 net/wireless/mlme.c          | 64 +++++++++++++++++++++++++++++++++++++-------
 net/wireless/nl80211.c       | 15 ++++++++++-
 net/wireless/nl80211.h       |  3 ++-
 8 files changed, 93 insertions(+), 16 deletions(-)

diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 4708844..8740313 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -687,6 +687,7 @@ struct cfg80211_csa_settings {
 	bool radar_required;
 	bool block_tx;
 	u8 count;
+	u8 sb_dfs_bw; /* from enum nl80211_sb_dfs_bw */
 };
 
 /**
@@ -4351,12 +4352,13 @@ void cfg80211_cqm_rssi_notify(struct net_device *dev,
  * cfg80211_radar_event - radar detection event
  * @wiphy: the wiphy
  * @chandef: chandef for the current channel
+ * @radar_bit_map: Bit map of channels, on which radar was detected
  * @gfp: context flags
  *
  * This function is called when a radar is detected on the current chanenl.
  */
-void cfg80211_radar_event(struct wiphy *wiphy,
-			  struct cfg80211_chan_def *chandef, gfp_t gfp);
+void cfg80211_radar_event(struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+			  u8 radar_bit_map, gfp_t gfp);
 
 /**
  * cfg80211_cac_event - Channel availability check (CAC) event
@@ -4637,6 +4639,9 @@ void cfg80211_report_wowlan_wakeup(struct wireless_dev *wdev,
  * by .crit_proto_start() has expired.
  */
 void cfg80211_crit_proto_stopped(struct wireless_dev *wdev, gfp_t gfp);
+void cfg80211_set_dfs_state_bit_map(struct wiphy *wiphy,
+				    struct cfg80211_chan_def *chandef,
+				    u8 radar_bit_map, enum nl80211_dfs_state dfs_state);
 
 /* Logging, debugging and troubleshooting/diagnostic helpers. */
 
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index 9790f23..06a9bfb 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -2419,7 +2419,7 @@ void ieee80211_dfs_radar_detected_work(struct work_struct *work)
 		WARN_ON(1);
 	else {
 		chandef = local->hw.conf.chandef;
-		cfg80211_radar_event(local->hw.wiphy, &chandef, GFP_KERNEL);
+		cfg80211_radar_event(local->hw.wiphy, &chandef, 0, GFP_KERNEL);
 	}
 }
 
diff --git a/net/wireless/chan.c b/net/wireless/chan.c
index 5d62ff7..ee44440 100644
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -149,7 +149,7 @@ static void chandef_primary_freqs(const struct cfg80211_chan_def *c,
 	}
 }
 
-static int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c)
+int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c)
 {
 	int width;
 
diff --git a/net/wireless/core.h b/net/wireless/core.h
index 17fb93c..5733f17 100644
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -381,6 +381,7 @@ int cfg80211_can_use_iftype_chan(struct cfg80211_registered_device *rdev,
 				 struct ieee80211_channel *chan,
 				 enum cfg80211_chan_mode chanmode,
 				 u8 radar_detect);
+int cfg80211_chandef_get_width(const struct cfg80211_chan_def *c);
 
 /**
  * cfg80211_chandef_dfs_required - checks if radar detection is required
diff --git a/net/wireless/mlme.c b/net/wireless/mlme.c
index 32e7c4d..43f2ec6 100644
--- a/net/wireless/mlme.c
+++ b/net/wireless/mlme.c
@@ -723,7 +723,7 @@ void cfg80211_dfs_channels_update_work(struct work_struct *work)
 
 				nl80211_radar_notify(rdev, &chandef,
 						     NL80211_RADAR_NOP_FINISHED,
-						     NULL, GFP_ATOMIC);
+						     NULL, 0, GFP_ATOMIC);
 				continue;
 			}
 
@@ -742,27 +742,71 @@ void cfg80211_dfs_channels_update_work(struct work_struct *work)
 				   next_time);
 }
 
+static void cfg80211_set_chans_dfs_state_bit_map (struct wiphy *wiphy, u32 center_freq,
+						  u32 bandwidth, u8 radar_bit_map, u8 *bit_idx,
+						  enum nl80211_dfs_state dfs_state)
+{
+	struct ieee80211_channel *c;
+	u32 freq;
+
+	for (freq = center_freq - bandwidth/2 + 10;
+	     freq <= center_freq + bandwidth/2 - 10;
+	     freq += 20) {
+		if (radar_bit_map & (1 << *bit_idx)) {
+			c = ieee80211_get_channel(wiphy, freq);
+			if (!c || !(c->flags & IEEE80211_CHAN_RADAR)) {
+				(*bit_idx)++;
+				continue;
+			}
+
+			c->dfs_state = dfs_state;
+			c->dfs_state_entered = jiffies;
+		}
+		(*bit_idx)++;
+	}
+}
+
+void cfg80211_set_dfs_state_bit_map (struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+				     u8 radar_bit_map, enum nl80211_dfs_state dfs_state)
+{
+	u8 bit_idx = 0;
+	u32 center_freq, bandwidth;
+
+	center_freq = chandef->center_freq1;
+	bandwidth   = cfg80211_chandef_get_width(chandef);
+
+	cfg80211_set_chans_dfs_state_bit_map(wiphy, center_freq, bandwidth,
+					     radar_bit_map, &bit_idx, dfs_state);
+
+	if (NL80211_CHAN_WIDTH_80P80 != bandwidth)
+		return;
+
+	center_freq = chandef->center_freq2;
+	cfg80211_set_chans_dfs_state_bit_map(wiphy, center_freq, bandwidth,
+					     radar_bit_map, &bit_idx, dfs_state);
+}
+EXPORT_SYMBOL(cfg80211_set_dfs_state_bit_map);
 
 void cfg80211_radar_event(struct wiphy *wiphy,
 			  struct cfg80211_chan_def *chandef,
-			  gfp_t gfp)
+			  u8 radar_bit_map, gfp_t gfp)
 {
 	struct cfg80211_registered_device *rdev = wiphy_to_dev(wiphy);
 	unsigned long timeout;
 
 	trace_cfg80211_radar_event(wiphy, chandef);
 
-	/* only set the chandef supplied channel to unavailable, in
-	 * case the radar is detected on only one of multiple channels
-	 * spanned by the chandef.
-	 */
-	cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_UNAVAILABLE);
+	if (radar_bit_map)
+		cfg80211_set_dfs_state_bit_map(wiphy, chandef, radar_bit_map,
+					       NL80211_DFS_UNAVAILABLE);
+	else
+		cfg80211_set_dfs_state(wiphy, chandef, NL80211_DFS_UNAVAILABLE);
 
 	timeout = msecs_to_jiffies(IEEE80211_DFS_MIN_NOP_TIME_MS);
 	queue_delayed_work(cfg80211_wq, &rdev->dfs_update_channels_wk,
 			   timeout);
 
-	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, NULL, gfp);
+	nl80211_radar_notify(rdev, chandef, NL80211_RADAR_DETECTED, NULL, radar_bit_map, gfp);
 }
 EXPORT_SYMBOL(cfg80211_radar_event);
 
@@ -800,7 +844,7 @@ void cfg80211_cac_event(struct net_device *netdev,
 	}
 	wdev->cac_started = false;
 
-	nl80211_radar_notify(rdev, &chandef, event, netdev, gfp);
+	nl80211_radar_notify(rdev, &chandef, event, netdev, 0, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event);
 
@@ -836,7 +880,7 @@ void cfg80211_cac_event_2(struct net_device *netdev,
 	}
 	wdev->cac_started = false;
 
-	nl80211_radar_notify(rdev, chandef, event, netdev, gfp);
+	nl80211_radar_notify(rdev, chandef, event, netdev, 0, gfp);
 }
 EXPORT_SYMBOL(cfg80211_cac_event_2);
 
diff --git a/net/wireless/nl80211.c b/net/wireless/nl80211.c
index 177b40a..c2cb0c2 100644
--- a/net/wireless/nl80211.c
+++ b/net/wireless/nl80211.c
@@ -5808,6 +5808,12 @@ static int nl80211_channel_switch(struct sk_buff *skb, struct genl_info *info)
 	err = nl80211_parse_chandef(rdev, info, &params.chandef);
 	if (err)
 		return err;
+	
+	if (info->attrs[NL80211_ATTR_SB_DFS_BW])
+		params.sb_dfs_bw = nla_get_u8(info->attrs[NL80211_ATTR_SB_DFS_BW]);
+
+	if (params.sb_dfs_bw)
+		cfg80211_set_dfs_state(&rdev->wiphy, &params.chandef, NL80211_DFS_AVAILABLE);
 
 	if (!cfg80211_reg_can_beacon(&rdev->wiphy, &params.chandef))
 		return -EINVAL;
@@ -11101,7 +11107,8 @@ void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp)
+		     struct net_device *netdev,
+		     u8 radar_bit_map, gfp_t gfp)
 {
 	struct sk_buff *msg;
 	void *hdr;
@@ -11134,6 +11141,12 @@ nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 	if (nl80211_send_chandef(msg, chandef))
 		goto nla_put_failure;
 
+	if (radar_bit_map) {
+		if (NL80211_RADAR_DETECTED == event &&
+		    nla_put_u8(msg, NL80211_ATTR_RADAR_BIT_MAP, radar_bit_map))
+			goto nla_put_failure;
+	}
+
 	genlmsg_end(msg, hdr);
 
 	genlmsg_multicast_netns(wiphy_net(&rdev->wiphy), msg, 0,
diff --git a/net/wireless/nl80211.h b/net/wireless/nl80211.h
index b1b2313..058ef6c 100644
--- a/net/wireless/nl80211.h
+++ b/net/wireless/nl80211.h
@@ -72,7 +72,8 @@ void
 nl80211_radar_notify(struct cfg80211_registered_device *rdev,
 		     const struct cfg80211_chan_def *chandef,
 		     enum nl80211_radar_event event,
-		     struct net_device *netdev, gfp_t gfp);
+		     struct net_device *netdev,
+		     u8 radar_bit_map, gfp_t gfp);
 
 void cfg80211_rdev_free_coalesce(struct cfg80211_registered_device *rdev);
 
-- 
2.10.1

