From 40db81a5caa12bfeb620129fbdc5ce43211e4be9 Mon Sep 17 00:00:00 2001
From: avishalo <avi1.shalom@intel.com>
Date: Mon, 21 Mar 2016 10:22:36 -0700
Subject: [PATCH 371/639] drop sessions creation - kernel changes

Signed-off-by: avishalo <avi1.shalom@intel.com>

Change-Id: I7a7b22ccb5405685c02c348611a0476f567c30c2
Signed-off-by: avishalo <avi1.shalom@intel.com>
---
 include/linux/ti_hil.h   |  44 +++++++++++++++++++
 net/Kconfig              |   6 +--
 net/netfilter/core.c     |  40 +++++++++++++++--
 net/netfilter/nf_queue.c |  36 +++++++++++++++-
 net/ti/pp/ti_hil_core.c  | 110 +++++++++++++++++++++++++++++++++++++++++++++--
 5 files changed, 224 insertions(+), 12 deletions(-)

diff --git a/include/linux/ti_hil.h b/include/linux/ti_hil.h
index 9a80135..5fdca07 100755
--- a/include/linux/ti_hil.h
+++ b/include/linux/ti_hil.h
@@ -32,7 +32,15 @@
 #endif /* CONFIG_TI_PACKET_PROCESSOR_STATS */
 #endif /* KERNEL*/
 
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+struct hil_core_notifier_param
+{
+    struct sk_buff    *skb;
+};
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
+
 #define TI_HIL_PACKET_FLAG_PP_SESSION_BYPASS                    0x00000002
+#define TI_HIL_PACKET_FLAG_PP_SESSION_DROP_OFFSET               24
 
 /**************************************************************************
  **************************** PP Event Identifiers ************************
@@ -74,6 +82,42 @@
 /* Event generated when a packet is flooded onto all interfaces */
 #define TI_BRIDGE_PACKET_FLOODED     (TI_BRIDGE_EVENT + 0x6)
 
+/**************************************************************************
+ ********************* PP Connection Tracking Event Identifiers ***********
+ **************************************************************************/
+
+/* Base for all connection tracking PP Event identifiers. */
+#define TI_CT_EVENT                  0x30
+
+/* Event generated when a connection tracking entry has been created. */
+#define TI_CT_ENTRY_CREATED          (TI_CT_EVENT + 0x1)
+
+/* Event generated when a connection tracking entry has timed-out */
+#define TI_CT_DEATH_BY_TIMEOUT       (TI_CT_EVENT + 0x2)
+
+/* Event generated when a Netfilter table is being updated. */
+#define TI_CT_NETFILTER_TABLE_UPDATE (TI_CT_EVENT + 0x3)
+
+/* Event generated once Netfilter decides to drop the packet */
+#define TI_CT_NETFILTER_DISCARD_PKT  (TI_CT_EVENT + 0x4)
+
+/* Event generated once Netfilter decides to cancel drop acceleration */
+#define TI_CT_NETFILTER_CANCEL_DISCARD_ACCELERATION     (TI_CT_EVENT + 0x5)
+
+/* Event generated once Netfilter decides to delete a session */
+#define TI_CT_NETFILTER_DELETE_SESSION     (TI_CT_EVENT + 0x6)
+
+/**************************************************************************
+ ************************* PP IP Event Identifiers ************************
+ **************************************************************************/
+
+/* Base for all IP PP Event identifiers. */
+#define TI_IP_EVENT                 0x80
+
+/* Event generated for general packet drop */
+#define TI_IP_DISCARD_PKT_IPV4   (TI_IP_EVENT + 0x1)
+#define TI_IP_DISCARD_PKT_IPV6   (TI_IP_EVENT + 0x2)
+
 #ifdef CONFIG_TI_PACKET_PROCESSOR
 extern int ti_hil_pp_event(unsigned long val, void *v);
 #else
diff --git a/net/Kconfig b/net/Kconfig
index 0707a98..e24094a 100644
--- a/net/Kconfig
+++ b/net/Kconfig
@@ -326,10 +326,10 @@ endmenu
 
 endmenu
 
-#Enable packet processor handling for GW on Atom
+#Enable packet processor handling for GW on ATOM
 config APPCPU_GW_PP_HANDLE
-	boolean
-	default n
+       bool "Enable packet processor handling for GW on ATOM"
+       default n 
 
 source "net/ax25/Kconfig"
 source "net/can/Kconfig"
diff --git a/net/netfilter/core.c b/net/netfilter/core.c
index 593b16e..2f906cf 100644
--- a/net/netfilter/core.c
+++ b/net/netfilter/core.c
@@ -23,7 +23,9 @@
 #include <linux/slab.h>
 #include <net/net_namespace.h>
 #include <net/sock.h>
-
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#include <linux/ti_hil.h>
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
 #include "nf_internals.h"
 
 static DEFINE_MUTEX(afinfo_mutex);
@@ -184,11 +186,41 @@ int nf_hook_slow(u_int8_t pf, unsigned int hook, struct sk_buff *skb,
 next_hook:
 	verdict = nf_iterate(&nf_hooks[pf][hook], skb, hook, indev,
 			     outdev, &elem, okfn, hook_thresh);
-	if (verdict == NF_ACCEPT || verdict == NF_STOP) {
+        if (verdict == NF_ACCEPT || verdict == NF_STOP) {
 		ret = 1;
 	} else if ((verdict & NF_VERDICT_MASK) == NF_DROP) {
-		kfree_skb(skb);
-		ret = NF_DROP_GETERR(verdict);
+
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#define MAC_ISMULTICAST( pa, hw )    ( ((pa)->hw[0] & 0x01)  )
+#define MAC_ISBROADCAST( pa, hw ) ( ~0xFF ==( (~(pa)->hw[0]) | \
+                                              (~(pa)->hw[1]) | \
+                                              (~(pa)->hw[2]) | \
+                                              (~(pa)->hw[3]) | \
+                                              (~(pa)->hw[4]) | \
+                                              (~(pa)->hw[5]) ))
+
+		int skip_pp_discard=0;
+		struct ethhdr* ptr_ethhdr = NULL;
+		ptr_ethhdr = eth_hdr(skb);
+
+		if (  ptr_ethhdr)
+		{
+			/* Check if the package is the multicast type, but not a broadcast */
+			if (  ( ! (MAC_ISBROADCAST (ptr_ethhdr, h_dest)) )  &&
+				  (   MAC_ISMULTICAST (ptr_ethhdr, h_dest))  )
+			{
+				skip_pp_discard=1;
+				printk(KERN_DEBUG "NF_DROP :Multicast pkg, Do not create PP drop session\n" );
+			}
+		}
+
+		if ( likely( ! skip_pp_discard ) )
+		{
+			ti_hil_pp_event (TI_CT_NETFILTER_DISCARD_PKT, (void *)skb);
+		}
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
+                kfree_skb(skb);
+                ret = NF_DROP_GETERR(verdict);
 		if (ret == 0)
 			ret = -EPERM;
 	} else if ((verdict & NF_VERDICT_MASK) == NF_QUEUE) {
diff --git a/net/netfilter/nf_queue.c b/net/netfilter/nf_queue.c
index 5d24b1f..b28e427 100644
--- a/net/netfilter/nf_queue.c
+++ b/net/netfilter/nf_queue.c
@@ -15,7 +15,9 @@
 #include <net/protocol.h>
 #include <net/netfilter/nf_queue.h>
 #include <net/dst.h>
-
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#include <linux/ti_hil.h>
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
 #include "nf_internals.h"
 
 /*
@@ -220,6 +222,38 @@ void nf_reinject(struct nf_queue_entry *entry, unsigned int verdict)
 	case NF_STOLEN:
 		break;
 	default:
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+                {
+			int skip_pp_discard=0;
+			struct ethhdr* ptr_ethhdr = NULL;
+
+#define MAC_ISMULTICAST( pa, hw )    ( ((pa)->hw[0] & 0x01)  )
+#define MAC_ISBROADCAST( pa, hw ) ( ~0xFF ==( (~(pa)->hw[0]) | \
+                                              (~(pa)->hw[1]) | \
+                                              (~(pa)->hw[2]) | \
+                                              (~(pa)->hw[3]) | \
+                                              (~(pa)->hw[4]) | \
+                                              (~(pa)->hw[5]) ))
+
+			ptr_ethhdr = eth_hdr(skb);
+
+			if (  ptr_ethhdr)
+			{
+				/* Check if the package is the multicast type, but not a broadcast */
+				if (  ( ! (MAC_ISBROADCAST (ptr_ethhdr, h_dest)) )  &&
+					  (   MAC_ISMULTICAST (ptr_ethhdr, h_dest))  )
+				{
+					skip_pp_discard=1;
+					printk(KERN_DEBUG "NF_DROP :Multicast pkg, Do not create PP drop session\n" );
+				}
+			}
+
+			if ( ! skip_pp_discard )
+			{
+				ti_hil_pp_event (TI_CT_NETFILTER_DISCARD_PKT, (void *)skb);
+			}
+		}
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
 		kfree_skb(skb);
 	}
 	rcu_read_unlock();
diff --git a/net/ti/pp/ti_hil_core.c b/net/ti/pp/ti_hil_core.c
index 03451d5..51c25be5 100644
--- a/net/ti/pp/ti_hil_core.c
+++ b/net/ti/pp/ti_hil_core.c
@@ -40,13 +40,74 @@
 #include <linux/byteorder/generic.h>
 #include <linux/ti_hil.h>
 
-int ti_hil_pp_event(unsigned long val, void *v)
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#include <linux/skbuff.h>
+#include <linux/netdevice.h>
+
+static unsigned int notifier_list_was_init = 0;
+static struct   atomic_notifier_head notifier_list;
+static unsigned int dropped_packets_bit_map;
+
+#define DROPPED_PACKETS_BITMAP_IS_SET(__n)          ((dropped_packets_bit_map & (1 << (__n))) != 0)
+
+static int hil_core_register_notifier_block(struct notifier_block *nb)
+{
+    if(!notifier_list_was_init)
+    {
+        notifier_list_was_init = 1;
+        ATOMIC_INIT_NOTIFIER_HEAD(&notifier_list);
+    }
+    atomic_notifier_chain_register(&notifier_list, nb);
+    return 0;
+}
+EXPORT_SYMBOL(hil_core_register_notifier_block);
+
+static int hil_core_unregister_notifier_block(struct notifier_block *nb)
+{
+    if(!notifier_list_was_init)
+    {
+        return 0;
+    }
+
+    atomic_notifier_chain_unregister(&notifier_list, nb);
+    return 0;
+}
+EXPORT_SYMBOL(hil_core_unregister_notifier_block);
+
+/*!
+ * \fn create_drop_session
+ * \brief store the event in the pp info and send the packet to the ARM using data pipe
+ *
+ * \param sk_buff* skb to be sent
+ * \param event    the specific drop event value
+*/
+int create_drop_session(struct sk_buff* skb, unsigned long event)
+{
+    struct hil_core_notifier_param param;
+    unsigned int flags;
+
+    /* Read current flags */
+    flags = ntohl(skb->pp_packet_info->flags);
+
+    /* Store event in flags */
+    flags |= (event << TI_HIL_PACKET_FLAG_PP_SESSION_DROP_OFFSET );
+
+    /* Convert new flags back to network byte order */
+    skb->pp_packet_info->flags = htonl(flags);
+
+    param.skb = skb;
+    atomic_notifier_call_chain(&notifier_list, 0, &param);
+    return 0;
+}
+#endif /* CONFIG_APPCPU_GW_PP_HANDLE */
+
+int ti_hil_pp_event(unsigned long event, void *v)
 {
     struct sk_buff*              skb;
     unsigned int                 flags;
 
     /* Handle only the events currently supported in Atom SDK */
-    switch (val)
+    switch (event)
     {
         case TI_BRIDGE_PACKET_FLOODED:
         {
@@ -67,13 +128,54 @@ int ti_hil_pp_event(unsigned long val, void *v)
 
             break;
         }
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+        case TI_IP_DISCARD_PKT_IPV4:
+        case TI_IP_DISCARD_PKT_IPV6:
+            if (((event == TI_IP_DISCARD_PKT_IPV4) && DROPPED_PACKETS_BITMAP_IS_SET(4)) ||
+                ((event == TI_IP_DISCARD_PKT_IPV6) && DROPPED_PACKETS_BITMAP_IS_SET(6)))
+            {
+                	/* Hanlde event*/
+            }
+            else
+            {
+	   	break;  /* Appropriate bit is not set, discard event */
+            }
+#ifdef CONFIG_NETFILTER
+        case TI_CT_NETFILTER_DISCARD_PKT:
+#endif
+        {
+            struct sk_buff* new_skb  = NULL;
+            skb = (struct sk_buff *)v;
 
+            new_skb  = dev_alloc_skb(2048);
+            if(0 == skb->len)
+            {
+                break;
+            }
+
+            if(!new_skb)
+            {
+               printk(KERN_NOTICE "%s[%u]: failed to alloc skb \n", __FUNCTION__, __LINE__);
+               break;
+            }
+            if(new_skb == skb)
+            {
+                break;
+            }
+
+            memcpy(new_skb->pp_packet_info, skb->pp_packet_info, sizeof(PP_PACKET_INFO_t));
+            memcpy(new_skb->data, skb->data, skb->len);
+            skb_put(new_skb, skb->len);
+            create_drop_session(new_skb, event);
+            break;
+	}
+#endif /*  CONFIG_APPCPU_GW_PP_HANDLE */
         default:
         {
-            printk ("Intrusive -> Does not handle event 0x%x\n", val);
+            printk (KERN_NOTICE "Intrusive -> Does not handle event 0x%x\n", event);
             break;
         }
 
     }
-    return 0; 
+    return 0;
 }
-- 
2.10.1

