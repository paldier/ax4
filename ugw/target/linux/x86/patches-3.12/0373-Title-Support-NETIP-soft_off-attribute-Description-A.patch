From c2c1df576dbb8123229ebe2344e6f98863d99987 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Mon, 28 Mar 2016 16:33:49 -0700
Subject: [PATCH 373/639] Title: Support NETIP soft_off attribute Description:
 Add sysfs attribute through which power manager can put netip in off state
 during low battery condition and netip initiated reset. Issue: Jira CPM-269
 IssueType: Feature Symptom: Resolution: Add sysfs attribute to put netip in
 off state without going to suspend state. Impact: Power Manager cannot NetIP
 soft off

---
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c    | 41 ++++++++++++++++++++++--
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c | 15 ++++++++-
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h |  6 ++++
 3 files changed, 58 insertions(+), 4 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index 9b26b1a..26e4495 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -112,6 +112,9 @@ static bool g_onBattery = false;
 /*Current NetIP power state */
 static netss_power_level_t g_current_netip_power_state = NETSS_POWER_LEVEL_INVALID;
 
+/**Netip is in soft off state, NetIP is in off state but not clock gated */
+static bool g_is_netip_in_soft_off_state =  false;
+
 /*Indicated if the bootime hand shake with NetIP is done or not */
 static bool g_netss_boot_handshake_done = false;
 
@@ -529,10 +532,30 @@ static void netss_update_sysfs_attributes(netss_sysfs_attributes_info_t *sysfs_i
       if(g_current_netip_power_state == NETSS_POWER_LEVEL_DEEP_STANDBY)
       {
 #ifdef CONFIG_PM_RUNTIME
-         /**Let the usage counter go to zero */
-         pm_runtime_put(&pnetss_drv_data->dev->dev);
+	 /**We are not suspending meaning not clocking gating etc,  but doing a netip soft off */
+	 if(sysfs_info->netip_soft_off)
+	 {
+	    /**Indicate that netip_soft_off exectution is complete, as we got reply for all service requests */
+	    sysfs_info->netip_soft_off = 0;
+	    /**Indicate that netip is in soft off state */
+	    g_is_netip_in_soft_off_state = true;
+	 }
+	 else
+	 {
+	    /**Let the usage counter go to zero */
+	    pm_runtime_put(&pnetss_drv_data->dev->dev);
+	 }
 #endif
       }
+      else if (g_current_netip_power_state == NETSS_POWER_LEVEL_ENABLE && temp == NETSS_POWER_LEVEL_DEEP_STANDBY)
+      {
+	 /**NetIP came out of soft off state to active */
+	 if(g_is_netip_in_soft_off_state)
+	 {
+	    g_is_netip_in_soft_off_state = false;
+	 }
+      }
+
       if(temp < g_current_netip_power_state && g_current_netip_power_state != NETSS_POWER_LEVEL_DEEP_STANDBY)
       {
          /* No need to call if going to deepstandby, because netss_runtime_suspend will call.
@@ -936,6 +959,9 @@ uint32_t netss_get_attribute(uint32_t attr_id, uint32_t service_id)
       case NETSS_SERVICE_READY_ATTR:
          value = (g_netss_sysfs_attributes_info.service_ready & service_id_mask) >> bit_offset;
       break;
+      case NETSS_NETIP_SOFT_OFF_ATTR:
+	 value = g_netss_sysfs_attributes_info.netip_soft_off;
+      break;
       case NETSS_ENABLE_DEBUG_ATTR:
          value = g_netss_sysfs_attributes_info.enable_debug;
       break;
@@ -957,6 +983,10 @@ int netss_set_attribute(uint32_t attr_id, uint32_t value, uint32_t service_id)
       case NETSS_SERVICE_LEVEL_ATTR:
          ret = __netss_set_service_level(value);
       break;
+      case NETSS_NETIP_SOFT_OFF_ATTR:
+	 g_netss_sysfs_attributes_info.netip_soft_off = (value != 0);
+	 ret = __netss_set_service_level(0xAFFFFFF3);
+      break;
       case NETSS_ENABLE_DEBUG_ATTR:
          g_netss_sysfs_attributes_info.enable_debug = (value != 0);
          ret = 0;
@@ -1008,9 +1038,14 @@ int __netss_set_service_level(uint32_t level)
           * 1. Call the platform driver api
           */
          puma_netip_notify_state(((level & NETSS_BIT_MASK_ON_BATTERY)? 1:0));
+	 if(g_is_netip_in_soft_off_state) {
+	    /**We are coming out of netip soft off state to active */
+	    ret = netss_send_service_request_msg(level);
+	 } else {
 #ifdef CONFIG_PM_RUNTIME
-         pm_runtime_get(&pnetss_drv_data->dev->dev);
+	    pm_runtime_get(&pnetss_drv_data->dev->dev);
 #endif
+	 }
       } else if(new_state > g_current_netip_power_state) {
          /*Going to lower power state Ex: Active to BBU, Active to Standby
           *BBU to standby */
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
index 52180b3..df8a3ad 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
@@ -79,6 +79,10 @@ static ssize_t service_show(struct device * dev, struct device_attribute *attr,
    {
       attribute_value = netss_get_attribute(NETSS_SERVICE_READY_ATTR, NETSS_SERVICE_ID_MAX);
    }
+   else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0)
+   {
+      attribute_value = netss_get_attribute(NETSS_NETIP_SOFT_OFF_ATTR, 0);
+   }
    else
    {
       attribute_value = netss_get_attribute(NETSS_ENABLE_DEBUG_ATTR, 0);
@@ -93,7 +97,11 @@ static ssize_t service_store(struct device * dev, struct device_attribute *attr,
    {
       attribute_value = netss_set_attribute(NETSS_SERVICE_LEVEL_ATTR, attribute_value, NETSS_SERVICE_ID_MAX);
    }
-  else
+  else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0)
+   {
+      attribute_value = netss_set_attribute(NETSS_NETIP_SOFT_OFF_ATTR, attribute_value, 0);
+   }
+   else
    {
       attribute_value = netss_set_attribute(NETSS_ENABLE_DEBUG_ATTR, attribute_value, 0);
    }
@@ -105,6 +113,7 @@ static DEVICE_ATTR(service_level, S_IWUSR, NULL, service_store);
 static DEVICE_ATTR(service_status, S_IRUGO, service_show, NULL);
 static DEVICE_ATTR(service_available, S_IRUGO, service_show, NULL);
 static DEVICE_ATTR(enable_debug,  S_IRUGO | S_IWUSR, service_show, service_store);
+static DEVICE_ATTR(netip_soft_off, S_IRUGO | S_IWUSR, service_show, service_store);
 
 char * get_netss_service_name(int i)
 {
@@ -177,6 +186,10 @@ static int __init netss_sysfs_create_netip_attributes(void)
          {
             printk("NetIP subsystem service_available sysfs could not be created\n");
          } 
+	 else if( 0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_netip_soft_off)))
+	 {
+	    printk("NetIP subsystem netip_soft_off sysfs could not be created\n");
+	 }
          else if( 0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_enable_debug)))
          {
             printk("NetIP subsystem enable_debug sysfs could not be created\n");
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
index 8976133..20a1919 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
@@ -35,6 +35,7 @@ typedef enum
    NETSS_SERVICE_LEVEL_ATTR,
    NETSS_SERVICE_STATE_ATTR,
    NETSS_SERVICE_READY_ATTR,
+   NETSS_NETIP_SOFT_OFF_ATTR,
    NETSS_ENABLE_DEBUG_ATTR
 } netss_attribute_id_t;
 
@@ -48,6 +49,11 @@ typedef struct netss_sysfs_attributes_info {
    uint32_t service_ready;    /** Vector that represents the ready NetIP services.
                                   This is updated during boot time, while handshake is done between cores
                                   This is read-only from user space. */
+   uint32_t netip_soft_off;   /** This is used by power manager while handling the NETIP initiated rest and
+				  low battery events.
+				  It is used to gracefully turn OFF all the NETIP services.
+				  The NETIP subsystem will not be clock gated or suspended.
+				  This is read-write from user space. */
    bool enable_debug;         /** Flag to indicate whether to enable or disable the debug prints */
    struct mutex lock;         /** to synchronise between the thread that is writing to service_level and thread that is sending message
                                   This lock may be needed only during boot time. */
-- 
2.10.1

