From 202a1389f734d641cec0ce7400f3b342359ae940 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Tue, 29 Mar 2016 17:23:20 -0700
Subject: [PATCH 377/639] Title: NETIP HW dependent SW on Atom to be aware of
 NETIP state Description: Support suspend/resume in HW Mailbox. This checkin
 address only HW Mailbox driver Issue: Jira CPM-260 IssueType: Feature
 Symptom: Hard Hang is observed if HW Mailbox is used when NetIP is off
 Resolution: Return error when NetIP is off Impact: Hard hang is observed if
 HW Mailbox is used when NetIP is off

---
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c |   7 ++
 arch/x86/hw_mailbox/hw_mbox_drv.c             | 104 ++++++++++++++++++++++++++
 2 files changed, 111 insertions(+)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index 26e4495..5b008b5 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -48,6 +48,7 @@ extern int RCE_Floor;
 extern int RCE_Filter;
 
 void hw_mutex_handle_suspend_resume(bool suspending);
+void hwMbox_handle_suspend_resume(bool suspending);
 void netss_sysfs_clean_up(uint32_t available_services);
 
 int __netss_set_service_level(uint32_t level);
@@ -1115,6 +1116,9 @@ int netss_runtime_suspend(struct device *dev)
    /**Indicate that NetIP is suspending. 
     * Save the HW Mutex locks acquired by Atom locally, while NetIP is off */
    hw_mutex_handle_suspend_resume(1); 
+   /*Indicate that HW Mailbox cannot be used as we are suspending NetIP  */
+   hwMbox_handle_suspend_resume(1);
+
    /** 1. Call the platform driver API */
    puma_netip_notify_state(3);
    /** 2. Turn off NetIP clock */
@@ -1135,6 +1139,9 @@ int netss_runtime_resume(struct device *dev)
    /** Indicate that NetIP is resuming from suspend state
     * Acquire the HW Mutexes that are being held by Atom*/
    hw_mutex_handle_suspend_resume(0);
+   /*Indicate that HW Mailbox can be used as we are resuming NetIP  */
+   hwMbox_handle_suspend_resume(0);
+
    level = g_netss_sysfs_attributes_info.service_level;
    netss_send_service_request_msg(level);
    mutex_unlock(&g_netss_sysfs_attributes_info.lock);
diff --git a/arch/x86/hw_mailbox/hw_mbox_drv.c b/arch/x86/hw_mailbox/hw_mbox_drv.c
index ee71368..2b87fb6 100644
--- a/arch/x86/hw_mailbox/hw_mbox_drv.c
+++ b/arch/x86/hw_mailbox/hw_mbox_drv.c
@@ -387,6 +387,17 @@ do{ \
     }                                           \
 } while (0)
 
+/*! \def CHECK_IS_HW_MBOX_DEV_OFF( )
+    \brief use to check if hw mailbox device is off or on.
+	   valid only for app cpu
+    \return 1 if hw mailbox is off, 0 if it is on.
+*/
+#ifdef HW_MBOX_IS_APP_CPU
+#define CHECK_IS_HW_MBOX_DEV_OFF() atomic_read(&hwMboxDriverData.is_dev_off)
+#else
+#define CHECK_IS_HW_MBOX_DEV_OFF() 0
+#endif
+
 /*! \var static Bool isInitComplete
     \brief to be set when supervisor finishes initial configuration of
            the HW MBOX.
@@ -643,6 +654,7 @@ typedef struct hw_mbox_drv_data
 
 #ifdef HW_MBOX_IS_APP_CPU
     void __iomem *reg_base;     /* Mapped io reg base address */
+    atomic_t is_dev_off;        /* Indicates the HW Mailbox is off or on, because of whether NetIP is off/suspended or on/resumed */
 #ifdef HW_MBOX_EXTENDED_MEMORY
     void __iomem *extMem_base;  /* Mapped io extended memory base address */
 #endif /* HW_MBOX_EXTENDED_MEMORY */
@@ -1316,6 +1328,35 @@ int hwMbox_isReady(void)
 }
 EXPORT_SYMBOL(hwMbox_isReady);
 
+#ifdef HW_MBOX_IS_APP_CPU
+/**************************************************************************/
+/*! \fn int hwMbox_suspend_resume(bool suspending)
+ **************************************************************************
+ *  \brief Handles Hw Mailbox driver suspend and resume
+ *  \param[in] suspending - true indicates suspending false indicates resume
+ *  \return void
+ **************************************************************************/
+
+void hwMbox_handle_suspend_resume(bool suspending)
+{
+   int i=0;
+
+   /**Take all the channel semaphores */
+   for(i=0; i<HW_MBOX_CHANNEL_COUNT; i++)
+   {
+      down(&CHN_LOCK(i));
+   }
+   /*If suspending, suspending = 1, if resuming suspending=0 */
+   atomic_set(&hwMboxDriverData.is_dev_off,suspending);
+   /**Release all channel semaphores */
+   for(i=0; i<HW_MBOX_CHANNEL_COUNT; i++)
+   {
+      up(&CHN_LOCK(i));
+   }
+   return;
+}
+#endif
+
 /**************************************************************************/
 /*! \fn int hwMbox_getChannelConfig(hw_mbox_Masters_e peer,
                                     hw_mbox_type_e mboxType,
@@ -1402,6 +1443,15 @@ int hwMbox_sendCommand(hw_mbox_Masters_e subject,
         return -ERESTARTSYS;
     }
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     if ((dataBuf != NULL) && (dataLen > 0))
     {
         /* command has data! save to SRAM: */
@@ -1518,6 +1568,15 @@ int hwMbox_recvCommand(hw_mbox_Masters_e commander,
         return -ERESTARTSYS;
     }
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     DPRINTK("receive Command from %s(%d) - start waiting for commands...",
             HW_MBOX_MASTER_GET_NAME(commander), commander);
 
@@ -1598,6 +1657,15 @@ int hwMbox_sendReplyCommand(hw_mbox_Masters_e commander,
         return -ERESTARTSYS;
     }
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     if ((dataBuf != NULL) && (dataLen > 0))
     {
         /* reply has data! save to SRAM: */
@@ -1670,6 +1738,15 @@ int hwMbox_sendAckCommand(hw_mbox_Masters_e commander)
         return -ERESTARTSYS;
     }
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     /* write the current command (command that was sent),
        to better assist the HW_MBOX Monitor... */
 
@@ -1818,6 +1895,15 @@ int hwMbox_sendOpcode(hw_mbox_Masters_e subject,
         return -ERESTARTSYS;
     }
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     /* Save Opcode data to SRAM: */
 
     /* verify SRAM size: */
@@ -2047,6 +2133,13 @@ int hwMbox_sendReplyOpcode(hw_mbox_Masters_e commander,
 
     CHECK_FIND_CID_IN_LUT(commander, hw_mbox_opcode, CID_LUT_PEER_IS_COMMANDER, return (-1), paramCID);
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       return (-ENODEV);
+    }
+
     if ((dataBuf != NULL) && (dataLen > 0))
     {
         /* Opcode Reply has data! save to SRAM: */
@@ -2121,6 +2214,15 @@ int hwMbox_sendAckOpcode(hw_mbox_Masters_e commander)
 
     CHECK_FIND_CID_IN_LUT(commander, hw_mbox_opcode, CID_LUT_PEER_IS_COMMANDER, return (-1), paramCID);
 
+    /**If hw mailbox is off, it should not be used */
+    if(CHECK_IS_HW_MBOX_DEV_OFF())
+    {
+       PRINTK_ERR("HW MAILBOX CANT BE USED, AS NETIP IS OFF");
+       /* release Lock... */
+       up(&CHN_LOCK(paramCID));
+       return (-ENODEV);
+    }
+
     /* To send an ACK to the Commander we send back
        a HW MBOX opcode message of type STATUS with STATUS_OK. */
 
@@ -4368,6 +4470,8 @@ static int __init hwMbox_drv_init(void)
         PRINTK_ERR("Failed to register driver with Net Subsystem!!!");
         return -ENODEV;
     }
+    /**Indicate that hw mailbox device is on */
+    atomic_set(&hwMboxDriverData.is_dev_off,0);
 #endif /* HW_MBOX_IS_APP_CPU */
 
     /* Create Channel interrupt Devices: */
-- 
2.10.1

