From d21ce0629c84d34083e240f4d4a7dc42eff2108d Mon Sep 17 00:00:00 2001
From: avelayux <arunkumar.velayutham@intel.com>
Date: Mon, 4 Apr 2016 23:49:22 -0700
Subject: [PATCH 379/639] adding support to PP session flush from ATOM using
 MRPC Owner: Arunkumar Velayutham HSD: 1363763 Desc: GW on ATOM required to
 flush the PP sessions when there is a firewall nat table update happens due
 to system configuration changes.Flush ARM PP sessions is enabled using MRPC
 between ATOM and ARM.

---
 drivers/mrpc/Kconfig                |  15 ++
 drivers/mrpc/core/Makefile          |   2 +
 drivers/mrpc/core/hil_cmds_client.c | 277 ++++++++++++++++++++++++++++++++
 drivers/mrpc/core/pp_client.c       | 307 ++++++++++++++++++++++++++++++++++++
 include/linux/mrpc.h                |   3 +-
 net/ipv4/netfilter/ip_tables.c      |   6 +-
 net/ti/pp/ti_hil_core.c             |  26 ++-
 7 files changed, 633 insertions(+), 3 deletions(-)
 create mode 100644 drivers/mrpc/core/hil_cmds_client.c
 create mode 100644 drivers/mrpc/core/pp_client.c

diff --git a/drivers/mrpc/Kconfig b/drivers/mrpc/Kconfig
index 1eaf628..314fd59 100755
--- a/drivers/mrpc/Kconfig
+++ b/drivers/mrpc/Kconfig
@@ -32,3 +32,18 @@ config MRPC_CONNTRACK_CLIENT
     default n
     help
        Enable Puma7 conntrack MRPC between ATOM and ARM
+
+config MRPC_PP_CLIENT
+    bool "ATOM to ARM PP PROC over HW Mailbox"
+    depends on MRPC
+    default n
+    help
+       Enable Puma7 PP MRPC between ATOM and ARM
+
+config MRPC_HIL_CMDS_CLIENT
+    bool "ATOM to ARM HIL commands over HW Mailbox"
+    depends on MRPC
+    default n
+    help
+       Enable Puma7 HIL command handle MRPC between ATOM and ARM
+
diff --git a/drivers/mrpc/core/Makefile b/drivers/mrpc/core/Makefile
index dd6eee3..b63e978 100644
--- a/drivers/mrpc/core/Makefile
+++ b/drivers/mrpc/core/Makefile
@@ -1,2 +1,4 @@
 obj-$(CONFIG_MRPC) += mrpc.o
 obj-$(CONFIG_MRPC_CONNTRACK_CLIENT) += conntrack_client.o
+obj-$(CONFIG_MRPC_PP_CLIENT) += pp_client.o
+obj-$(CONFIG_MRPC_HIL_CMDS_CLIENT) += hil_cmds_client.o
diff --git a/drivers/mrpc/core/hil_cmds_client.c b/drivers/mrpc/core/hil_cmds_client.c
new file mode 100644
index 0000000..79a80a2
--- /dev/null
+++ b/drivers/mrpc/core/hil_cmds_client.c
@@ -0,0 +1,277 @@
+/*
+ *
+ * hil_cmds_client.c
+ * Description:
+ * hil command handle mrpc client driver
+ *
+ *
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2016 Intel Corporation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *  Intel Corporation
+ *  2200 Mission College Blvd.
+ *  Santa Clara, CA  97052
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ":%s:%d " fmt "\n", __func__, __LINE__
+
+/************************************************/
+/**                    Includes                 */
+/************************************************/
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/err.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mrpc.h>
+#include <linux/avalanche/generic/avalanche_pp_api.h>
+
+#ifdef DEBUG
+#define DBG(fmt, ...) pr_err(fmt, ##__VA_ARGS__)
+#else
+#define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
+#endif
+
+#define CMD_LEN 200
+
+/************************************************/
+/* PROC Functions                               */
+/************************************************/
+static ssize_t hil_write_cmds(struct file *file, const char *buffer, size_t count, loff_t *data);
+
+/* driver private database */
+struct hil_cmds_private {
+    struct platform_device *pdev;   /* platform device */
+    struct mrpc_client *mrpc;       /* mrpc client handle */
+};
+
+static struct hil_cmds_private *this;
+
+struct hil_cmds_args {
+    Int8 pp_cmd[CMD_LEN];
+    unsigned int count;
+};
+
+static const struct file_operations ti_pp_proc_fops = {
+    .write = hil_write_cmds
+};
+
+enum {
+    HIL_CMDS_HANDLE_PROC = 0,
+};
+
+/* args must be in network byte order ! */
+static inline int hil_cmds_mrpc_call(__u8 procid, struct hil_cmds_args *args)
+{
+    struct hil_cmds_private *priv = this;
+    int ret, errcode;
+
+    if (!priv) {
+        pr_err("ERROR: mrpc hill cmd handle not initialized");
+        return PP_RC_FAILURE;
+    }
+
+    ret = mrpc_call(priv->mrpc, procid, args, sizeof(*args), NULL, 0, 0, &errcode);
+
+    if (ret || errcode) {
+        pr_err("ERROR: ret=%d, errcode=%d", ret, errcode);
+        return PP_RC_FAILURE;
+    }
+
+    return PP_RC_SUCCESS;
+}
+
+static ssize_t hil_write_cmds(struct file *file, const char *buffer, size_t count, loff_t *data)
+{
+   struct hil_cmds_args ti_pp_cmds;
+
+   memset(&ti_pp_cmds.pp_cmd,0,CMD_LEN);
+
+   if (count > CMD_LEN) {
+      return -EINVAL;
+   }
+       /* Copy from user space. */
+   if (copy_from_user (&ti_pp_cmds.pp_cmd, buffer, count)) {
+        return -EFAULT;
+   }
+   ti_pp_cmds.count = htonl(count);
+   if (hil_cmds_mrpc_call(HIL_CMDS_HANDLE_PROC, &ti_pp_cmds) == PP_RC_FAILURE) {
+      /*command not supported or failed at ARM */
+      return -EINVAL;
+   }
+   return count;
+}
+
+/* sysfs for future use */
+static ssize_t status_show(struct device *dev,
+                           struct device_attribute *attr, char *buf)
+{
+    struct hil_cmds_private *priv = dev_get_drvdata(dev);
+
+    if (!priv)
+        return -EINVAL;
+
+    return scnprintf(buf, PAGE_SIZE, "status ok");
+}
+
+static DEVICE_ATTR(status, S_IRUGO, status_show, NULL);
+
+static struct attribute *hil_cmds_attrs[] = {
+    &dev_attr_status.attr,
+    NULL
+};
+
+static struct attribute_group hil_cmds_attrs_group = {
+    .attrs = hil_cmds_attrs,
+};
+
+/**
+ * hil_cmds_mrpc_probe
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int hil_cmds_mrpc_probe(struct platform_device *pdev)
+{
+    struct hil_cmds_private *priv;
+    struct proc_dir_entry*  ptr_dir_entry;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv) {
+        pr_err("memory allocation failed");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+    priv->pdev = pdev;
+
+    ret = sysfs_create_group(&priv->pdev->dev.kobj, &hil_cmds_attrs_group);
+    if (ret) {
+        pr_err("sysfs_create_group failed (ret=%d)", ret);
+        return ret;
+    }
+
+    priv->mrpc = mrpc_client_register(MRPC_RESERVED_ID_HILCMDS,
+                                      "Hill Command Handler");
+    if (!priv->mrpc) {
+        pr_err("failed to register hil cmds handle");
+        ret = -ENODEV;
+        goto out_remove_group;
+    }
+
+    ptr_dir_entry = proc_create("ti_pp" ,0644, init_net.proc_net, &ti_pp_proc_fops);
+    if(!ptr_dir_entry)
+    {
+        printk ("Error: Unable to create Packet Processor proc entry.\n");
+        goto out_remove_mrpc_client;
+    }
+
+    this = priv;
+    return 0;
+
+out_remove_group:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &hil_cmds_attrs_group);
+    return 0;
+out_remove_mrpc_client:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &hil_cmds_attrs_group);
+    mrpc_client_unregister(priv->mrpc);
+    return 0;
+
+}
+
+/**
+ * pp_mrpc_remove
+ *
+ * This function is called when the hil cmds handle mrpc driver is
+ * removed.
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int hil_cmds_mrpc_remove(struct platform_device *pdev)
+{
+    struct hil_cmds_private *priv = platform_get_drvdata(pdev);
+    mrpc_client_unregister(priv->mrpc);
+    sysfs_remove_group(&priv->pdev->dev.kobj, &hil_cmds_attrs_group);
+    dev_set_drvdata(&pdev->dev, NULL);
+    this = NULL;
+
+    return 0;
+}
+
+static struct platform_driver hil_cmds_driver = {
+    .driver = {
+        .name   = "hil_cmds_mrpc_client",
+    },
+    .probe = hil_cmds_mrpc_probe,
+    .remove = hil_cmds_mrpc_remove,
+};
+
+static struct platform_device *hil_cmds_device;
+
+static int __init hil_cmds_mrpc_init(void)
+{
+    int ret;
+
+    ret = platform_driver_register(&hil_cmds_driver);
+    if (ret < 0) {
+        pr_err("Failed to register hil cmds handle platform driver: %d\n", ret);
+        return ret;
+    }
+
+    hil_cmds_device = platform_device_register_simple("hil_cmds_mrpc_client", -1, NULL, 0);
+    if (IS_ERR(hil_cmds_device)) {
+        pr_err("Failed to register hil cmds handle platform device\n");
+        platform_driver_unregister(&hil_cmds_driver);
+        return PTR_ERR(hil_cmds_device);
+    }
+
+    return 0;
+}
+
+static void __exit hil_cmds_mrpc_exit(void)
+{
+    platform_device_unregister(hil_cmds_device);
+    platform_driver_unregister(&hil_cmds_driver);
+}
+
+/******************************************************/
+/**    Module Declarations                           **/
+/******************************************************/
+module_init(hil_cmds_mrpc_init);
+module_exit(hil_cmds_mrpc_exit);
+
+MODULE_AUTHOR("Intel Corporation");
+MODULE_AUTHOR("Arunkumar Velayutham arunkumar.velayutham@intel.com");
+MODULE_DESCRIPTION("Hil cmds handle mrpc client");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
diff --git a/drivers/mrpc/core/pp_client.c b/drivers/mrpc/core/pp_client.c
new file mode 100644
index 0000000..a8b8df2
--- /dev/null
+++ b/drivers/mrpc/core/pp_client.c
@@ -0,0 +1,307 @@
+/*
+ *
+ * pp_client.c
+ * Description:
+ * pp mrpc client driver
+ *
+ *
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2016 Intel Corporation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *  Intel Corporation
+ *  2200 Mission College Blvd.
+ *  Santa Clara, CA  97052
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ":%s:%d " fmt "\n", __func__, __LINE__
+
+/************************************************/
+/**                    Includes                 */
+/************************************************/
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/err.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mrpc.h>
+#include <linux/avalanche/generic/avalanche_pp_api.h>
+
+#ifdef DEBUG
+#define DBG(fmt, ...) pr_err(fmt, ##__VA_ARGS__)
+#else
+#define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
+#endif
+
+/* driver private database */
+struct pp_private {
+    struct platform_device *pdev;   /* platform device */
+    struct mrpc_client *mrpc;       /* mrpc client handle */
+    unsigned int call_success_count;/* number of successful MRPC calls made */
+    unsigned int call_failure_count;/* number of failure  MRPC calls made */
+};
+
+static struct pp_private *this;
+
+struct pp_args {
+    AVALANCHE_PP_PID_t pid;
+    AVALANCHE_PP_PID_RANGE_t pid_range;
+    __u8 pid_number;
+    unsigned int flags;
+    Uint8 vpid_handle;
+    Uint8 list_id; 
+};
+
+enum {
+    PP_PID_CREATE_PROC = 0,
+    PP_PID_SET_FLAGS_PROC,
+    PP_PID_CONFIG_RANGE_PROC,
+    PP_FLUSH_SESSION_PROC,
+};
+
+/* args must be in network byte order ! */
+static inline int pp_mrpc_call(__u8 procid, struct pp_args *args)
+
+{
+    struct pp_private *priv = this;
+    int ret, errcode;
+
+    if (!priv) {
+        pr_err("ERROR: mrpc pp not initialized");
+        return PP_RC_FAILURE;
+    }
+
+    ret = mrpc_call(priv->mrpc, procid, args, sizeof(*args), NULL, 0, 5000, &errcode);
+
+    if (ret || errcode) {
+        pr_err("ERROR: ret=%d, errcode=%d", ret, errcode);
+        priv->call_failure_count++;
+        return PP_RC_FAILURE;
+    }
+    /*count the number of successful MRPC calls*/
+    priv->call_success_count++;
+    return PP_RC_SUCCESS;
+}
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_create(AVALANCHE_PP_PID_t *ptr_pid, void *ptr_netdev)
+{
+    struct pp_args args;
+    AVALANCHE_PP_PID_t *pid = &args.pid;
+    int i;
+
+    /* copy pid from network */
+    pid->pid_handle = ptr_pid->pid_handle; 
+    pid->priv_flags = ptr_pid->priv_flags;
+    pid->type = ptr_pid->type;
+    pid->ingress_framing = ptr_pid->ingress_framing;
+    pid->dflt_pri_drp = ptr_pid->dflt_pri_drp;
+    pid->pri_mapping = ptr_pid->pri_mapping;
+    pid->dflt_fwd_q = htons(ptr_pid->dflt_fwd_q);
+    pid->dflt_dst_tag = htons(ptr_pid->dflt_dst_tag);
+    for (i = 0; i < ARRAY_SIZE(pid->tx_pri_q_map); i++)
+        pid->tx_pri_q_map[i] = htons(ptr_pid->tx_pri_q_map[i]);
+    memcpy(pid->tx_hw_data, ptr_pid->tx_hw_data, ARRAY_SIZE(pid->tx_hw_data));
+    pid->tx_hw_data_len = ptr_pid->tx_hw_data_len;
+
+    pr_info("call avalanche_pp_pid_create");
+    return pp_mrpc_call(PP_PID_CREATE_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_create);
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_set_flags(Uint8 pid_handle, Uint32  new_flags)
+{
+    struct pp_args args;
+
+    args.pid_number = pid_handle;
+    args.flags = htonl(new_flags);
+    pr_info("call avalanche_pp_pid_set_flags(pid_number=%d, flags=%x)",
+            args.pid_number, ntohl(args.flags));
+    return pp_mrpc_call(PP_PID_SET_FLAGS_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_set_flags);
+
+AVALANCHE_PP_RET_e avalanche_pp_pid_config_range(AVALANCHE_PP_PID_RANGE_t *pid_range)
+{
+    struct pp_args args;
+
+    args.pid_range = *pid_range;
+    pr_info("call avalanche_pp_pid_config_range(port_num=%d, type=%d, count=%d, base_index=%d)",
+            args.pid_range.port_num, args.pid_range.type,
+            args.pid_range.count, args.pid_range.base_index);
+    return pp_mrpc_call(PP_PID_CONFIG_RANGE_PROC, &args);
+}
+EXPORT_SYMBOL(avalanche_pp_pid_config_range);
+
+AVALANCHE_PP_RET_e avalanche_pp_flush_sessions(Uint8  vpid_handle, PP_LIST_ID_e  list_id)
+{
+    struct pp_args flush_args;
+   
+    flush_args.vpid_handle = vpid_handle;
+    flush_args.list_id     = list_id;
+    pr_info("call avalanche_pp_flush_sessions(vpid_handle=%d, list_id=%d)",
+            flush_args.vpid_handle, flush_args.list_id);
+    return pp_mrpc_call(PP_FLUSH_SESSION_PROC, &flush_args);
+}
+EXPORT_SYMBOL(avalanche_pp_flush_sessions);
+
+/* sysfs for future use */
+static ssize_t status_show(struct device *dev,
+                           struct device_attribute *attr, char *buf)
+{
+    struct pp_private *priv = dev_get_drvdata(dev);
+
+    if (!priv)
+        return -EINVAL;
+
+    return scnprintf(buf, PAGE_SIZE, "status ok.\nMRPC Success : %d\nMRPC Failure : %d\n",
+                                       priv->call_success_count,priv->call_failure_count);
+}
+
+static DEVICE_ATTR(status, S_IRUGO, status_show, NULL);
+
+static struct attribute *pp_attrs[] = {
+    &dev_attr_status.attr,
+    NULL
+};
+
+static struct attribute_group pp_attrs_group = {
+    .attrs = pp_attrs,
+};
+
+/**
+ * pp_mrpc_probe
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int pp_mrpc_probe(struct platform_device *pdev)
+{
+    struct pp_private *priv;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv) {
+        pr_err("memory allocation failed");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+    priv->pdev = pdev;
+
+    ret = sysfs_create_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    if (ret) {
+        pr_err("sysfs_create_group failed (ret=%d)", ret);
+        return ret;
+    }
+
+    priv->mrpc = mrpc_client_register(MRPC_RESERVED_ID_PP_FUNC_CALL,
+                                      "Packet Processor");
+    if (!priv->mrpc) {
+        pr_err("failed to register pp");
+        ret = -ENODEV;
+        goto out_remove_group;
+    }
+    priv->call_success_count=0;
+    priv->call_failure_count=0;
+    this = priv;
+    return 0;
+
+out_remove_group:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    return 0;
+}
+
+/**
+ * pp_mrpc_remove
+ *
+ * This function is called when the pp mrpc driver is
+ * removed.
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int pp_mrpc_remove(struct platform_device *pdev)
+{
+    struct pp_private *priv = platform_get_drvdata(pdev);
+    mrpc_client_unregister(priv->mrpc);
+    sysfs_remove_group(&priv->pdev->dev.kobj, &pp_attrs_group);
+    dev_set_drvdata(&pdev->dev, NULL);
+    this = NULL;
+
+    return 0;
+}
+
+static struct platform_driver pp_driver = {
+    .driver = {
+        .name   = "pp_mrpc_client",
+    },
+    .probe = pp_mrpc_probe,
+    .remove = pp_mrpc_remove,
+};
+
+static struct platform_device *pp_device;
+
+static int __init pp_mrpc_init(void)
+{
+    int ret;
+
+    ret = platform_driver_register(&pp_driver);
+    if (ret < 0) {
+        pr_err("Failed to register pp platform driver: %d\n", ret);
+        return ret;
+    }
+
+    pp_device = platform_device_register_simple("pp_mrpc_client", -1, NULL, 0);
+    if (IS_ERR(pp_device)) {
+        pr_err("Failed to register pp platform device\n");
+        platform_driver_unregister(&pp_driver);
+        return PTR_ERR(pp_device);
+    }
+
+    return 0;
+}
+
+static void __exit pp_mrpc_exit(void)
+{
+    platform_device_unregister(pp_device);
+    platform_driver_unregister(&pp_driver);
+}
+
+/******************************************************/
+/**    Module Declarations                           **/
+/******************************************************/
+module_init(pp_mrpc_init);
+module_exit(pp_mrpc_exit);
+
+MODULE_AUTHOR("Intel Corporation");
+MODULE_AUTHOR("Tomer Eliyahu tomer.b.eliyahu@intel.com");
+MODULE_DESCRIPTION("pp mrpc client");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
diff --git a/include/linux/mrpc.h b/include/linux/mrpc.h
index 95957fe..f49828c 100644
--- a/include/linux/mrpc.h
+++ b/include/linux/mrpc.h
@@ -73,12 +73,13 @@ struct mrpc_procinfo {
 enum {
     MRPC_RESERVED_ID_PP_CONTROL = 0,
     MRPC_RESERVED_ID_PP_DEBUG,
-    MRPC_RESERVED_ID_PP_PID, /* temporary until PP core and PP HAL are ready */
+    MRPC_RESERVED_ID_PP_FUNC_CALL, /* temporary until PP core and PP HAL are ready */
     MRPC_RESERVED_ID_NETEVENTS,
     MRPC_RESERVED_ID_NETHOOKS,
     MRPC_RESERVED_ID_MODPHY,
     MRPC_RESERVED_ID_HANDSHAKE,
     MRPC_RESERVED_ID_CONNTRACK,
+    MRPC_RESERVED_ID_HILCMDS,
     MRPC_RESERVED_ID_LAST,
 };
 
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index a5bd3c8..2d70654 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -25,7 +25,7 @@
 #include <linux/proc_fs.h>
 #include <linux/err.h>
 #include <linux/cpumask.h>
-
+#include <linux/ti_hil.h>
 #include <linux/netfilter/x_tables.h>
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <net/netfilter/nf_log.h>
@@ -1231,6 +1231,10 @@ __do_replace(struct net *net, const char *name, unsigned int valid_hooks,
 	}
 	vfree(counters);
 	xt_table_unlock(t);
+#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+        ti_hil_pp_event (TI_CT_NETFILTER_TABLE_UPDATE, (void *)t);
+#endif
+
 	return ret;
 
  put_module:
diff --git a/net/ti/pp/ti_hil_core.c b/net/ti/pp/ti_hil_core.c
index 978f5a8..7cb827a 100644
--- a/net/ti/pp/ti_hil_core.c
+++ b/net/ti/pp/ti_hil_core.c
@@ -39,6 +39,12 @@
 #include <linux/kernel.h>
 #include <linux/byteorder/generic.h>
 #include <linux/ti_hil.h>
+#ifdef CONFIG_NETFILTER
+#include <linux/netfilter.h>
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+#endif
 
 #ifdef CONFIG_APPCPU_GW_PP_HANDLE
 #include <linux/skbuff.h>
@@ -105,7 +111,7 @@ int ti_hil_pp_event(unsigned long event, void *v)
 {
     struct sk_buff*              skb;
     unsigned int                 flags;
-
+    struct xt_table              *xt;
     /* Handle only the events currently supported in Atom SDK */
     switch (event)
     {
@@ -177,6 +183,24 @@ int ti_hil_pp_event(unsigned long event, void *v)
             create_drop_session(new_skb, event);
             break;
 	}
+
+        case TI_CT_NETFILTER_TABLE_UPDATE:
+        {
+            xt = (struct xt_table *)v; /* Get the netfilter table */
+
+            /* Flush all sessions only for NAT... No need to do anything for Mangle and Firewall */
+            if (strcmp (xt->name, "nat") == 0 || strcmp (xt->name, "filter") == 0)
+            {
+                /*pp_client MRPC call to invoke flush avalanche API on ARM to flush the session*/
+                if (avalanche_pp_flush_sessions( AVALANCHE_PP_MAX_VPID, PP_LIST_ID_ALL ) != PP_RC_SUCCESS)
+                {
+                    printk ("Error: Unable to flush all sessions\n");
+                    return 0;
+                }
+                printk ("NAT Table update all sessions flushed\n");
+            }
+            break;
+        }
 #endif /*  CONFIG_APPCPU_GW_PP_HANDLE */
         default:
         {
-- 
2.10.1

