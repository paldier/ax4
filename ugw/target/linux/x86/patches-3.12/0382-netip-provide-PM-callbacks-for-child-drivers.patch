From 972532c4034b8f9688af9d86caf1e54c63298365 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Wed, 13 Apr 2016 17:17:21 -0700
Subject: [PATCH 382/639] netip: provide PM callbacks for child drivers

NetIP SubSystem driver should notify the NetIP power state to the child
drivers accessing NetIP HW, through the callbacks provided by the child
drivers. And the child drivers should not access NetIP HW when it is
OFF. Otherwise hard hang is observed.

hw_mutex driver uses soft locks when NetIP is OFF and hw mailbox apis
return -ENODEV when NetIP is OFF.

NetIP_SubSystem: define power management callbacks that NetSS child
 drivers can register.

hw_mutex: register suspend resume handling callback with NetIP
 subsystem driver.

hw_mailbox: register suspend resume handling call back with NetIP
 subsystem driver.
---
 arch/x86/NetIP_SubSystem/netip_subsystem_defs.h |   7 +-
 arch/x86/NetIP_SubSystem/netip_subsystem_lld.c  |  67 ++++++++-------
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c   | 108 ++++++++++++++++++++----
 arch/x86/hw_mailbox/hw_mbox_drv.c               |  31 +++++--
 include/linux/netip_subsystem.h                 |  28 +++++-
 kernel/hwmutex.c                                |  42 ++++++---
 6 files changed, 210 insertions(+), 73 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
index 4708577..98e35d0 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
@@ -40,7 +40,7 @@
 #ifdef NETSS_DRV_DBG
 #define NETSS_DBG_PRINT(fmt, args...) printk(fmt, ##args)
 #else
-#define NETSS_DBG_PRINT(fmt, args...) ; 
+#define NETSS_DBG_PRINT(fmt, args...) ;
 #endif
 
 #define NETSS_MAX_ARM11_INTR 96
@@ -55,14 +55,15 @@ struct net_subsystem_drv_data {
    netss_dev_info_t subdev_mmios[NETSS_DEV_MAX];
    netss_interrupt_info_t irqs[NETSS_INTERUPT_MAX];
    netss_interrupt_info_t arm11_irqs[NETSS_INTERUPT_ARM11_MAX];
+   netss_power_state_callback_info_t power_state_change_cbinfo[NETSS_DEV_MAX];
    struct pci_dev *dev;
    spinlock_t irq_lock;
    struct mutex netss_lock;
    struct task_struct * handshake_thread; /* Thread that exchange messages with netip during boot */
    acpi_handle acpi_h;
    netss_msg_info_t netip_msg;
-   
-    
+
+
 }__attribute__((aligned(4)));
 
 typedef struct net_ip_mmios {
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
index 91e8ac8..c9d9f81 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -26,7 +26,7 @@
  *    Santa Clara, CA  97052
  *
  */
- 
+
 #include <linux/interrupt.h>
 #include <linux/init.h>
 #include <linux/pci.h>
@@ -88,13 +88,13 @@ void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_
       spin_unlock(&pnetss_drv_data->irq_lock);
       return;
    }
-   if(intrpt != NETSS_INTERUPT_ARM11) 
+   if(intrpt != NETSS_INTERUPT_ARM11)
    {
         pnetss_drv_data->irqs[intrpt].func = irq_info->func;
         pnetss_drv_data->irqs[intrpt].args = irq_info->args;
     }
     else
-    {   
+    {
         pnetss_drv_data->arm11_irqs[arm11_int_id].func = irq_info->func;
         pnetss_drv_data->arm11_irqs[arm11_int_id].args = irq_info->args;
     }
@@ -107,8 +107,8 @@ void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
                 netss_interrupt_ack(intrpt);
                 pnetss_drv_data->pending_interrupts &= ~(1<<intrpt);
-                NETSS_DBG_PRINT("Cleared pending interrupt for device %d IIR %08x pending %08x\n", intrpt, 
-                                 __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET), 
+                NETSS_DBG_PRINT("Cleared pending interrupt for device %d IIR %08x pending %08x\n", intrpt,
+                                 __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET),
                                                                      pnetss_drv_data->pending_interrupts);
              }
         }
@@ -117,16 +117,16 @@ void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_
             if(pnetss_drv_data->pending_arm11_interrupts & (1<<arm11_int_id))
             {
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
-                /*Clear interrupt in bridge only if it is present 
+                /*Clear interrupt in bridge only if it is present
                  *For ARM11 interrupt bundle this might hvae got cleared by some other irq handle */
                 if( __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET) & (1<<intrpt))
                 {
-                    netss_interrupt_ack(intrpt);   
+                    netss_interrupt_ack(intrpt);
                 }
 
                 pnetss_drv_data->pending_arm11_interrupts &= ~(1<<arm11_int_id);
-                NETSS_DBG_PRINT("Cleared pending interrupt for armm11 %d IIR %08x pending %08x\n", arm11_int_id, 
-                                        __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET), 
+                NETSS_DBG_PRINT("Cleared pending interrupt for armm11 %d IIR %08x pending %08x\n", arm11_int_id,
+                                        __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET),
                                                                      pnetss_drv_data->pending_arm11_interrupts);
             }
         }
@@ -167,7 +167,7 @@ int netss_device_get_info(netss_dev_t subdevice, netss_dev_info_t *mmio)
          mmio->base = net_ip_mmios.region1_base + NETSS_DEV_PP1_MMIO_OFFSET;
          mmio->size = NETSS_DEV_PP1_MMIO_SIZE;
          ret = 0;
-      break; 
+      break;
       case NETSS_DEV_PACKET_PROCESSOR2:
          mmio->base = net_ip_mmios.region1_base + NETSS_DEV_PP2_MMIO_OFFSET;
          mmio->size = NETSS_DEV_PP2_MMIO_SIZE;
@@ -211,7 +211,7 @@ int netss_device_get_info(netss_dev_t subdevice, netss_dev_info_t *mmio)
       default:
          ret = -1;
    }
-   return ret;  
+   return ret;
 }
 
 EXPORT_SYMBOL(netss_device_get_info);
@@ -219,7 +219,7 @@ EXPORT_SYMBOL(netss_device_get_info);
 void netss_interrupt_enable(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTERUPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX)
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -228,14 +228,14 @@ void netss_interrupt_enable(netss_interrupt_t intrpt)
    if(!(reg_val & (1 << intrpt))) {
       __raw_writel((reg_val | (1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
       NETSS_DBG_PRINT("Enabling Net IP subdevice %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
-   } 
+   }
 }
 EXPORT_SYMBOL(netss_interrupt_enable);
 
 void netss_interrupt_disable(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTERUPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX)
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -244,14 +244,14 @@ void netss_interrupt_disable(netss_interrupt_t intrpt)
    if(reg_val & (1 << intrpt)) {
       __raw_writel((reg_val & ~(1<<intrpt)), pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET);
       NETSS_DBG_PRINT("Disabling Net IP interrupt id %d interrupts reg %x\n", intrpt, __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IER_OFFSET));
-   } 
+   }
 }
 EXPORT_SYMBOL(netss_interrupt_disable);
 
 void netss_interrupt_ack(netss_interrupt_t intrpt)
 {
    uint32_t reg_val;
-   if(intrpt > NETSS_INTERUPT_MAX) 
+   if(intrpt > NETSS_INTERUPT_MAX)
    {
       printk("Invalid NetIP interrupt %d\n", intrpt);
       return;
@@ -294,11 +294,11 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
                 }
             } else {
                 int j;
-                for( j = 0 ; j< NETSS_INTERUPT_ARM11_MAX; j++) 
+                for( j = 0 ; j< NETSS_INTERUPT_ARM11_MAX; j++)
                 {
                     if(avalanche_intc_get_status(j))
                     {
-                        if(pnet_ss->arm11_irqs[j].func != NULL) 
+                        if(pnet_ss->arm11_irqs[j].func != NULL)
                         {
                             pnet_ss->arm11_irqs[j].func(irq, pnet_ss->arm11_irqs[j].args);
                             /*Arm11 bottom half will clear the NetIP bridge interrupt */
@@ -323,7 +323,7 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
     }
     /* Acknowledge the interrupts that are processed */
     if(ack_intr != 0) {
-        __raw_writel(reg_val|ack_intr, pnet_ss->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET); 
+        __raw_writel(reg_val|ack_intr, pnet_ss->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
     }
 
     ret = IRQ_HANDLED;
@@ -332,7 +332,7 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
     return ret;
 }
 
-/* 
+/*
  * driver entry point
  */
 static int netss_probe(struct pci_dev *pdev,
@@ -342,7 +342,7 @@ static int netss_probe(struct pci_dev *pdev,
    unsigned int reg_val;
    int i;
    //DEBUG_PRINT;
-    
+
    ret = pci_enable_device(pdev);
    if (ret) {
       dev_err(&pdev->dev, "pci_enable_device failed.\n");
@@ -369,7 +369,7 @@ static int netss_probe(struct pci_dev *pdev,
 #endif
    NETSS_DBG_PRINT(KERN_INFO "1: mem_iobase = 0x%x, mem_iosize = 0x%x\n",(unsigned int)net_ip_mmios.region1_base,(unsigned int)net_ip_mmios.region1_size);
    NETSS_DBG_PRINT(KERN_INFO "2: mem_iobase = 0x%x, mem_iosize = 0x%x\n",(unsigned int)net_ip_mmios.region2_base,(unsigned int)net_ip_mmios.region2_size);
-   
+
    if (pci_request_regions(pdev, "net-subsytem")){
       dev_err(&pdev->dev, "Cannot obtain PCI resources\n");
       ret = -EBUSY;
@@ -395,14 +395,14 @@ static int netss_probe(struct pci_dev *pdev,
 
    reg_val = __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IMR_OFFSET);
    if((reg_val & NETIP_BRIDGE_IRQ_MASK)) {
-      __raw_writel((reg_val & ~NETIP_BRIDGE_IRQ_MASK) , pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IMR_OFFSET); 
+      __raw_writel((reg_val & ~NETIP_BRIDGE_IRQ_MASK) , pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IMR_OFFSET);
       printk(KERN_INFO "Unmasking NetIP interrupts IMR = %x\n", __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IMR_OFFSET));
-   }    
+   }
 
    pnetss_drv_data->irq_num = pdev->irq;
    pnetss_drv_data->dev = pdev;
    spin_lock_init(&pnetss_drv_data->irq_lock);
-   
+
    if (request_irq(pnetss_drv_data->irq_num, net_subsystem_isr, 0, NET_SUBSYSTEM_IRQ_NAME, (void *)pnetss_drv_data)){
       printk(KERN_ERR "HW Mutex: Unable to allocate IRQ\n");
       ret = -ENODEV;
@@ -421,6 +421,13 @@ static int netss_probe(struct pci_dev *pdev,
    }
    mutex_init(&pnetss_drv_data->netss_lock);
    mutex_init(&pnetss_drv_data->netip_msg.lock);
+
+   /**Initalize NetIP power state change handler callback function info */
+   for(i=0; i<NETSS_DEV_MAX; i++)
+   {
+      pnetss_drv_data->power_state_change_cbinfo[i].func = NULL;
+      pnetss_drv_data->power_state_change_cbinfo[i].args = NULL;
+   }
    /**Get the ACPI handle */
    pnetss_drv_data->acpi_h = ACPI_HANDLE(&pdev->dev);
    pci_set_drvdata(pnetss_drv_data->dev,pnetss_drv_data);
@@ -445,13 +452,13 @@ free_mem:
 free_resource:
    pci_release_regions(pdev);
 free_dev:
-   //pci_disable_msi(pdev); 
+   //pci_disable_msi(pdev);
    pci_disable_device(pdev);
 
    return ret;
 }
-/* 
- * driver exit point 
+/*
+ * driver exit point
  */
 static void netss_remove(struct pci_dev *pdev)
 {
@@ -466,11 +473,11 @@ static void netss_remove(struct pci_dev *pdev)
    iounmap(pnetss_drv_data->bridge_reg_base);
    kfree(pnetss_drv_data);
    pci_release_regions(pdev);
-   //pci_disable_msi(pnetss_drv_data->dev); 
+   //pci_disable_msi(pnetss_drv_data->dev);
    pci_disable_device(pdev);
    //DEBUG_PRINT;
    NETSS_DBG_PRINT(KERN_INFO "NET SubSytem driver: device exit \n");
- 
+
    return;
 }
 
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index 5b008b5..a451567 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -47,8 +47,6 @@ extern int cm_mode;
 extern int RCE_Floor;
 extern int RCE_Filter;
 
-void hw_mutex_handle_suspend_resume(bool suspending);
-void hwMbox_handle_suspend_resume(bool suspending);
 void netss_sysfs_clean_up(uint32_t available_services);
 
 int __netss_set_service_level(uint32_t level);
@@ -1087,10 +1085,58 @@ int netss_turn_off_netip_clock(void)
    }
    return ret;
 }
+/**Notify power state to all NetSS child drivers, return 0 on success, bitmask of
+ * failure sub device ids on failure */
+int netss_notify_netip_power_state_to_child_drivers(netss_power_state_t state)
+{
+   int ret = 0;
+   int i = 0, j = 0;
+
+   for(i=0; i<NETSS_DEV_MAX; i++)
+   {
+      netss_subdevice_power_state_change_cb func = pnetss_drv_data->power_state_change_cbinfo[i].func;
+      void * args = pnetss_drv_data->power_state_change_cbinfo[i].args;
 
+      if(func != NULL)
+      {
+         if(state == NETSS_NETIP_POWER_STATE_OFF)
+         {
+            j=0;
+            /**While suspending notify the power state, if it fails
+             * repeat 10 times sleeping 10msec before trying. */
+            while(j < 10)
+            {
+               /**Callback returns 0 on success, -1 on failure */
+               if( 0 != func(args, state))
+               {
+                  j++;
+                  ret |= (1<<i);
+               }
+               else
+               {
+                  /**PM callback returned success, break out of while loop
+                   * Clear the error bit if it was set in earlier iterations. */
+                  ret &= ~(1<<i);
+                  break;
+               }
+               msleep(10);
+            }
+            if(ret & (1<<i))
+            {
+               printk("Subdev %d pm callback returned Error!\n", i);
+            }
+         }
+         else if (state == NETSS_NETIP_POWER_STATE_ACTIVE)
+         {
+            ret = func(args, state);
+         }
+      }
+   }
+   return ret;
+}
 int netss_runtime_suspend(struct device *dev)
 {
-   int i=0;
+   int i=0, ret=-1;
    uint32_t level;
    struct pci_dev *pdev = to_pci_dev(dev);
 
@@ -1113,39 +1159,41 @@ int netss_runtime_suspend(struct device *dev)
          printk(KERN_ERR "Service id %d is not in disable state, current state is %d\n", i, level);
       }
    }
-   /**Indicate that NetIP is suspending. 
-    * Save the HW Mutex locks acquired by Atom locally, while NetIP is off */
-   hw_mutex_handle_suspend_resume(1); 
-   /*Indicate that HW Mailbox cannot be used as we are suspending NetIP  */
-   hwMbox_handle_suspend_resume(1);
+
+   /**Notify the NetIP power state to all child drivers */
+   ret = netss_notify_netip_power_state_to_child_drivers(NETSS_NETIP_POWER_STATE_OFF);
 
    /** 1. Call the platform driver API */
    puma_netip_notify_state(3);
-   /** 2. Turn off NetIP clock */
-   netss_turn_off_netip_clock();
-   /** Resume will be like a fresh boot for NETIP, which involues netip properties, configure messages */
-   g_netss_boot_handshake_done = false;
+
+   if(!ret)
+   {
+      /** 2. Turn off NetIP clock */
+      netss_turn_off_netip_clock();
+      /** Resume will be like a fresh boot for NETIP, which involues netip properties, configure messages */
+      g_netss_boot_handshake_done = false;
+   }
 
    mutex_unlock(&g_netss_sysfs_attributes_info.lock);
    return 0;
 }
 
+
 int netss_runtime_resume(struct device *dev)
 {
    struct pci_dev *pdev = to_pci_dev(dev);
    uint32_t level;
+   int ret = -1;
 
    mutex_lock(&g_netss_sysfs_attributes_info.lock);
-   /** Indicate that NetIP is resuming from suspend state
-    * Acquire the HW Mutexes that are being held by Atom*/
-   hw_mutex_handle_suspend_resume(0);
-   /*Indicate that HW Mailbox can be used as we are resuming NetIP  */
-   hwMbox_handle_suspend_resume(0);
+
+   /**Notify the NetIP power state to all NetSS child drivers */
+   ret = netss_notify_netip_power_state_to_child_drivers(NETSS_NETIP_POWER_STATE_ACTIVE);
 
    level = g_netss_sysfs_attributes_info.service_level;
    netss_send_service_request_msg(level);
    mutex_unlock(&g_netss_sysfs_attributes_info.lock);
-   return 0;
+   return ret;
 }
 
 int netss_runtime_idle(struct device *dev)
@@ -1166,3 +1214,27 @@ void netss_wakeup_netip_manager_thread(void)
 
 }
 EXPORT_SYMBOL(netss_wakeup_netip_manager_thread);
+/**Registers power state change handling callback
+ * Return 0 on sucess, -1 on failing to register */
+int netss_power_state_change_callback_register(netss_dev_t subdevice, netss_power_state_callback_info_t *cbinfo)
+{
+   int ret = -1;
+   /**Regiser NetIP power state change handler callback for the subdevice driver*/
+   if(cbinfo->func != NULL)
+   {
+      if(pnetss_drv_data->power_state_change_cbinfo[subdevice].func == NULL)
+      {
+         pnetss_drv_data->power_state_change_cbinfo[subdevice].func = cbinfo->func;
+         pnetss_drv_data->power_state_change_cbinfo[subdevice].args = cbinfo->args;
+         ret = 0;
+      }
+      else
+      {
+         printk(KERN_ERR "NetSS power state callback already registered for subdevice %d \n", subdevice);
+      }
+   }
+
+   return ret;
+}
+EXPORT_SYMBOL(netss_power_state_change_callback_register);
+
diff --git a/arch/x86/hw_mailbox/hw_mbox_drv.c b/arch/x86/hw_mailbox/hw_mbox_drv.c
index 2b87fb6..b58591a 100644
--- a/arch/x86/hw_mailbox/hw_mbox_drv.c
+++ b/arch/x86/hw_mailbox/hw_mbox_drv.c
@@ -1330,30 +1330,39 @@ EXPORT_SYMBOL(hwMbox_isReady);
 
 #ifdef HW_MBOX_IS_APP_CPU
 /**************************************************************************/
-/*! \fn int hwMbox_suspend_resume(bool suspending)
+/*! \fn int hwMbox_handle_suspend_resume(void * args, netss_power_state_t state)
  **************************************************************************
  *  \brief Handles Hw Mailbox driver suspend and resume
- *  \param[in] suspending - true indicates suspending false indicates resume
- *  \return void
+ *  \param[in] args - NULL
+ *  \param[in] state - NetIP power state
+ *  \return 0, always success
  **************************************************************************/
 
-void hwMbox_handle_suspend_resume(bool suspending)
+int hwMbox_handle_suspend_resume(void * args, netss_power_state_t state)
 {
    int i=0;
+   (void)args;
 
    /**Take all the channel semaphores */
    for(i=0; i<HW_MBOX_CHANNEL_COUNT; i++)
    {
       down(&CHN_LOCK(i));
    }
-   /*If suspending, suspending = 1, if resuming suspending=0 */
-   atomic_set(&hwMboxDriverData.is_dev_off,suspending);
+   /*If suspending, set is_dev_off = 1, if resuming set is_dev_off = 0 */
+   if(state == NETSS_NETIP_POWER_STATE_OFF)
+   {
+      atomic_set(&hwMboxDriverData.is_dev_off,1);
+   }
+   else if(state == NETSS_NETIP_POWER_STATE_ACTIVE)
+   {
+      atomic_set(&hwMboxDriverData.is_dev_off,0);
+   }
    /**Release all channel semaphores */
    for(i=0; i<HW_MBOX_CHANNEL_COUNT; i++)
    {
       up(&CHN_LOCK(i));
    }
-   return;
+   return 0;
 }
 #endif
 
@@ -4370,6 +4379,7 @@ int hwMbox_drv_registerWithNetss(void)
 {
     int ret = -ENODEV;
     netss_dev_info_t hwMbox_mmio;
+    netss_power_state_callback_info_t pm_callback_info;
 
     DPRINTK("About to register driver with Net Subsystem...");
 
@@ -4423,6 +4433,13 @@ int hwMbox_drv_registerWithNetss(void)
         return ret;
     }
 #endif /* HW_MBOX_EXTENDED_MEMORY */
+    pm_callback_info.func = hwMbox_handle_suspend_resume;
+    pm_callback_info.args = NULL;
+    if (0 != netss_power_state_change_callback_register(NETSS_DEV_HW_MAILBOX, &pm_callback_info))
+    {
+        PRINTK_ERR("HW Mutex: failed to register power management callback with NetSS driver\n");
+    }
+
     DPRINTK("Registered driver with Net Subsystem successfully!");
     return 0;
 }
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
index 076bf4d..e99ec28 100644
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -104,6 +104,20 @@ typedef struct netss_dev_info {
    unsigned long size;
 }netss_dev_info_t;
 
+/**Enum to represent NetIP power state used to notify to the NetSS subdevice drivers  */
+typedef enum netss_power_state {
+   NETSS_NETIP_POWER_STATE_ACTIVE = 0,
+   NETSS_NETIP_POWER_STATE_OFF
+}netss_power_state_t;
+
+/**NetSS subdevice drivers callback function to notify and handle the NetIP power state change */
+typedef int (* netss_subdevice_power_state_change_cb) (void * data, netss_power_state_t state);
+/**Structure defining the NetIP power state change handling callback and its argument */
+typedef struct netss_power_state_callback_info {
+   netss_subdevice_power_state_change_cb func; /**NetIP power state change handling function */
+   void * args;                                /**argument to be passed to the callback function */
+} netss_power_state_callback_info_t;
+
 #define NETSS_SERVICES_MAX 13
 typedef enum netss_service_id_t {
    NETIP_SUBSYSTEM = 0,
@@ -119,7 +133,7 @@ typedef enum netss_service_id_t {
    NETSS_SERVICE_ID_SGMII1,
    NETSS_SERVICE_ID_RGMII2,
    NETSS_SERVICE_ID_RGMII3,
-   NETSS_SERVICE_ID_MAX 
+   NETSS_SERVICE_ID_MAX
 } netss_service_id_t;
 
 void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_interrupt_info_t *irq_info);
@@ -129,5 +143,17 @@ void netss_interrupt_enable(netss_interrupt_t intrpt);
 void netss_interrupt_disable(netss_interrupt_t intrpt);
 void netss_interrupt_ack(netss_interrupt_t intrpt);
 
+/**************************************************************************/
+/*! \fn int hwMbox_handle_suspend_resume(void * args, netss_power_state_t state)
+ **************************************************************************
+ *  \brief NetSS driver API to register callback function that handles
+ *         netip power state changes.
+ *  \param[in] subdevice - Enum of NetIP subdevice
+ *  \param[in] cbinfo - structure holding power management callback function
+                        and its argument.
+ *  \return 0, always success.
+ **************************************************************************/
+int netss_power_state_change_callback_register(netss_dev_t subdevice, netss_power_state_callback_info_t *cbinfo);
+
 #endif
 
diff --git a/kernel/hwmutex.c b/kernel/hwmutex.c
index 187f6dd..83d9a67 100644
--- a/kernel/hwmutex.c
+++ b/kernel/hwmutex.c
@@ -45,7 +45,8 @@ void lock_hw_mutex_as_different_master(struct hw_mutex *hmutex);
 void unlock_hw_mutex_as_different_master(struct hw_mutex *hmutex);
 void dump_hw_mutex_registers(struct hw_mutex *hmutex);
 #endif
-
+/**power management callback */
+int hw_mutex_handle_suspend_resume(void *args, netss_power_state_t state);
 
 struct hw_master *hw_master_glob = NULL;
 
@@ -53,7 +54,7 @@ struct hw_master *hw_master_glob = NULL;
 #define to_hw_mutex(mutex) (&hw_master_glob->hw_mutexes[mutex])
 #define to_use_sw_mutex_only() (hw_master_glob->use_sw_mutex_only)
 
-/**There are irq locks around HW Mutexes which can be used for synchronization 
+/**There are irq locks around HW Mutexes which can be used for synchronization
  * between ISR and other apis */
 #define HW_MUTEX_TAKE_ALL_IRQ_LOCKS() do { int i=0; \
                                             for(i=0;i<HW_MUTEX_TOTAL;i++) \
@@ -134,8 +135,8 @@ static irqreturn_t hw_mutex_isr(int irq, void *dev_id)
                             /* Nobody need the MUTEX, just unlock it to avoid deadlock */
                             hmutex_ops->unlock(hmutex);
                         }
-                    } 
-                } 
+                    }
+                }
                 spin_unlock(&hmutex->irq_lock);
             }
             break;
@@ -454,10 +455,18 @@ int hw_mutex_register (struct hw_master *pmaster)
          return -ENODEV;
       }
 #elif CONFIG_X86_PUMA7
+     netss_power_state_callback_info_t pm_callback_info;
      netss_interrupt_info_t irq_info;
      irq_info.func = &hw_mutex_isr;
      irq_info.args = pmaster;
      netss_interrupt_register(NETSS_INTERUPT_HWMUTEX, -1, &irq_info);
+     pm_callback_info.func = hw_mutex_handle_suspend_resume;
+     pm_callback_info.args = NULL;
+     if (0 != netss_power_state_change_callback_register(NETSS_DEV_HW_MUTEX, &pm_callback_info))
+     {
+        printk(KERN_ERR "HW Mutex: failed to register power management callback with NetSS driver\n");
+     }
+
 #endif
    }
    return 0;
@@ -483,31 +492,34 @@ void hw_mutex_unregister(struct hw_master *pmaster)
 }
 EXPORT_SYMBOL(hw_mutex_unregister);
 
-void hw_mutex_handle_suspend_resume(bool suspending)
+int hw_mutex_handle_suspend_resume(void *args, netss_power_state_t state)
 {
    int i=0;
    struct hw_mutex_operations *hmutex_ops = to_hw_mutex_ops();
 
    /**Take all irq locks around all HW mutexs to stop any other accesses */
    HW_MUTEX_TAKE_ALL_IRQ_LOCKS();
-   
+
    /**If resuming indicate that device is on now, to restore mutexes at HW level */
-   if(!suspending) atomic_set(&hw_master_glob->dev_is_off,0);
+   if(state == NETSS_NETIP_POWER_STATE_ACTIVE)
+   {
+      atomic_set(&hw_master_glob->dev_is_off, 0);
+   }
 
    for(i=0; i< HW_MUTEX_TOTAL; i++)
    {
       struct hw_mutex  * hmutex = to_hw_mutex(i);
       if(atomic_read(&hmutex->status) == HW_MUTEX_LOCKED)
       {
-         if(suspending)
+         if(state == NETSS_NETIP_POWER_STATE_OFF)
          {
             /**Release the mutex at HW level */
             hmutex_ops->unlock(hmutex);
-            /**But maintain the locked status of the mutex in software 
+            /**But maintain the locked status of the mutex in software
             * so that when resumed HW level mutex lock can be acquired */
             atomic_set(&hmutex->status, HW_MUTEX_LOCKED);
          }
-         else
+         else if (state == NETSS_NETIP_POWER_STATE_ACTIVE)
          {
             /**Restore Mutex at HW level forcefully*/
             if(0 == hmutex_ops->lock(hmutex, 1))
@@ -519,10 +531,12 @@ void hw_mutex_handle_suspend_resume(bool suspending)
    }
    /**From now on, mutex lock is always successful, and status is maintained
     * only at software level */
-   if(suspending) atomic_set(&hw_master_glob->dev_is_off, suspending);
-   
+   if(state == NETSS_NETIP_POWER_STATE_OFF)
+   {
+      atomic_set(&hw_master_glob->dev_is_off, 1);
+   }
+
    /**Release all irq locks around all HW mutexs */
    HW_MUTEX_RELEASE_ALL_IRQ_LOCKS();
-   return;
+   return 0;
 }
-EXPORT_SYMBOL(hw_mutex_handle_suspend_resume);
-- 
2.10.1

