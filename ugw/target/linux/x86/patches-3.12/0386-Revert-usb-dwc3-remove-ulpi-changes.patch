From 6534ad19a651e456973b21ccaea7a758c1f03c85 Mon Sep 17 00:00:00 2001
From: Nagaraj S <sivasankaranx.nagaraj@intel.com>
Date: Tue, 26 Apr 2016 11:06:09 -0700
Subject: [PATCH 386/639] Revert "usb: dwc3: remove ulpi changes"

This is not needed on Cougar Mountain, as the ULPI is not used by cgm,
so this function will fail to read/write the register.

This reverts below commits
commit id# 215c64d8b8261ccd50843e0aa2626923fbea9191
Title: HACK: usb: dwc3: pull down D+/- after cable disconnection
commit id# a895d60d8676893bbd860e494484dc7b777455a3
Title: usb/dwc3: set ulpi phy tuning value
commit id# ab1cb57ccd7387bbfa22ef2e833ee79cc193e6b9
Title: usb: dwc3: HACK: tell the world when USB transceiver
works (or not)

Change-Id: I8ee3aeb10d16c46623f3f0b1a4d2291347553905
---
 drivers/usb/dwc3/core.c   | 200 ----------------------------------------------
 drivers/usb/dwc3/core.h   |   3 -
 drivers/usb/dwc3/gadget.c |   2 -
 3 files changed, 205 deletions(-)

diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index dbc03ea..24ed585 100644
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -37,7 +37,6 @@
 #include <linux/usb/gadget.h>
 #include <linux/usb/of.h>
 #include <linux/usb/otg.h>
-#include <linux/usb/ulpi.h>
 
 #include "platform_data.h"
 #include "core.h"
@@ -60,198 +59,9 @@ void dwc3_set_mode(struct dwc3 *dwc, u32 mode)
 
 #define GUSB2PHYCFG0                            0xc200
 #define GUSB2PHYCFG_SUS_PHY                     0x40
-#define GUSB2PHYCFG_PHYSOFTRST (1 << 31)
-#define GUSB2PHYCFG_ULPI_AUTO_RESUME (1 << 15)
 #define GUSB3PIPECTL0                           0xc2c0
 #define GUSB3PIPECTL_SUS_EN                     0x20000
 
-#define EXTEND_ULPI_REGISTER_ACCESS_MASK        0xC0
-#define GUSB2PHYACC0    0xc280
-#define GUSB2PHYACC0_DISULPIDRVR  (1 << 26)
-#define GUSB2PHYACC0_NEWREGREQ  (1 << 25)
-#define GUSB2PHYACC0_VSTSDONE  (1 << 24)
-#define GUSB2PHYACC0_VSTSBSY  (1 << 23)
-#define GUSB2PHYACC0_REGWR  (1 << 22)
-#define GUSB2PHYACC0_REGADDR(v)  ((v & 0x3F) << 16)
-#define GUSB2PHYACC0_EXTREGADDR(v)  ((v & 0x3F) << 8)
-#define GUSB2PHYACC0_VCTRL(v)  ((v & 0xFF) << 8)
-#define GUSB2PHYACC0_REGDATA(v)  (v & 0xFF)
-#define GUSB2PHYACC0_REGDATA_MASK  0xFF
-
-static int ulpi_read(struct dwc3 *dwc, u32 reg)
-{
-	u32 val32 = 0, count = 200;
-	u8 val, tmp;
-
-	reg &= 0xFF;
-
-	while (count) {
-		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) & GUSB2PHYACC0_VSTSBSY)
-			udelay(5);
-		else
-			break;
-
-		count--;
-	}
-
-	if (!count) {
-		dev_err(dwc->dev, "USB2 PHY always busy!!\n");
-		return -EBUSY;
-	}
-
-	count = 200;
-	/* Determine if use extend registers access */
-	if (reg & EXTEND_ULPI_REGISTER_ACCESS_MASK) {
-		dev_dbg(dwc->dev, "Access extend registers 0x%x\n", reg);
-		val32 = GUSB2PHYACC0_NEWREGREQ
-			| GUSB2PHYACC0_REGADDR(ULPI_ACCESS_EXTENDED)
-			| GUSB2PHYACC0_VCTRL(reg);
-	} else {
-		dev_dbg(dwc->dev, "Access normal registers 0x%x\n", reg);
-		val32 = GUSB2PHYACC0_NEWREGREQ | GUSB2PHYACC0_REGADDR(reg)
-			| GUSB2PHYACC0_VCTRL(0x00);
-	}
-	dwc3_writel(dwc->regs, GUSB2PHYACC0, val32);
-
-	while (count) {
-		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) & GUSB2PHYACC0_VSTSDONE) {
-			val = dwc3_readl(dwc->regs, GUSB2PHYACC0) &
-				GUSB2PHYACC0_REGDATA_MASK;
-			dev_dbg(dwc->dev, "%s - reg 0x%x data 0x%x\n",
-					__func__, reg, val);
-			goto cleanup;
-		}
-
-		count--;
-	}
-	dev_err(dwc->dev, "%s read PHY data failed.\n", __func__);
-
-	return -ETIMEDOUT;
-
-cleanup:
-	/* Clear GUSB2PHYACC0[16:21] before return.
-	 * Otherwise, it will cause PHY can't in workable
-	 * state. This is one dwc3 controller silicon bug. */
-	tmp = dwc3_readl(dwc->regs, GUSB2PHYACC0);
-	dwc3_writel(dwc->regs, GUSB2PHYACC0, tmp &
-			~GUSB2PHYACC0_REGADDR(0x3F));
-	return val;
-
-}
-
-static int ulpi_write(struct dwc3 *dwc, u32 val, u32 reg)
-{
-	u32 val32 = 0, count = 200;
-	u8 tmp;
-
-	while (count) {
-		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) & GUSB2PHYACC0_VSTSBSY)
-			udelay(1);
-		else
-			break;
-		count--;
-	}
-
-	if (!count) {
-		dev_err(dwc->dev, "USB2 PHY always busy!!\n");
-		return -EBUSY;
-	}
-
-	count = 10000;
-	if (reg & EXTEND_ULPI_REGISTER_ACCESS_MASK) {
-		dev_dbg(dwc->dev, "Access extend registers 0x%x\n", reg);
-		val32 = GUSB2PHYACC0_NEWREGREQ
-			| GUSB2PHYACC0_REGADDR(ULPI_ACCESS_EXTENDED)
-			| GUSB2PHYACC0_VCTRL(reg)
-			| GUSB2PHYACC0_REGWR | GUSB2PHYACC0_REGDATA(val);
-	} else {
-		dev_dbg(dwc->dev, "Access normal registers 0x%x\n", reg);
-		val32 = GUSB2PHYACC0_NEWREGREQ
-			| GUSB2PHYACC0_REGADDR(reg)
-			| GUSB2PHYACC0_REGWR
-			| GUSB2PHYACC0_REGDATA(val);
-	}
-	dwc3_writel(dwc->regs, GUSB2PHYACC0, val32);
-
-	while (count) {
-		if (dwc3_readl(dwc->regs, GUSB2PHYACC0) &
-			GUSB2PHYACC0_VSTSDONE) {
-			dev_dbg(dwc->dev, "%s - reg 0x%x data 0x%x write done\n",
-				__func__, reg, val);
-			goto cleanup;
-		}
-
-		udelay(1);
-		count--;
-	}
-
-	dev_err(dwc->dev, "%s write PHY data failed.\n", __func__);
-
-	return -ETIMEDOUT;
-
-cleanup:
-	/* Clear GUSB2PHYACC0[16:21] before return.
-	 * Otherwise, it will cause PHY can't in workable
-	 * state. This is one dwc3 controller silicon bug. */
-	tmp = dwc3_readl(dwc->regs, GUSB2PHYACC0);
-	dwc3_writel(dwc->regs, GUSB2PHYACC0, tmp &
-		~GUSB2PHYACC0_REGADDR(0x3F));
-	return 0;
-}
-
-/* HACK: set optimal drive strength in phy, two improvements needed:
- * 1. this code should be in a separate phy driver such that phy specific
- *    setting is not tied to controllers.
- * 2. platform specific tuning data should come from platform data, ACPI, etc.
- *    Currently use max drive strength with default impedence.
- */
-#define TUSB1211_VENDOR_SPECIFIC1_SET      0x81
-#define PWCTRL_SW_CONTROL (1 << 0)
-#define TUSB1211_POWER_CONTROL_SET 0x3E
-#define TUSB1211_EYE_DIAGRAM_TUNING 0x4f
-#define TUSB1211_OTG_CTRL		0xa
-#define TUSB1211_OTG_CTRL_DPPULLDOWN	(1 << 1)
-#define TUSB1211_OTG_CTRL_DMPULLDOWN	(1 << 2)
-
-static void set_phy_eye_optim(struct dwc3 *dwc)
-{
-	if (ulpi_write(dwc, PWCTRL_SW_CONTROL, TUSB1211_POWER_CONTROL_SET))
-		return;
-	/* Modify VS1 for better quality in eye diagram */
-	if (ulpi_write(dwc, 0x4f, TUSB1211_VENDOR_SPECIFIC1_SET))
-		dev_err(dwc->dev, "Tuning ULPI phy eye diagram failed.\n");
-}
-
-/*
- * This is a tricky situation that can only be cleanly solved when ULPI bus
- * is available for usb phy driver:
- * When cable is removed, dwc3 will enter in autosuspend mode (if pm runtime is
- * enabled). If USB cable is reconnected before suspend is actually called,
- * the charger detection module will be unable to detect CDP charging mode
- * because D+/D- will still be in connected state. In order to allow CDP
- * connection again, we need to pull down D+/D- to notify USB host we are
- * disconnected.
- */
-void dwc3_set_phy_dpm_pulldown(struct dwc3 *dwc, int pull_down)
-{
-	u32 reg;
-
-	reg = ulpi_read(dwc, TUSB1211_OTG_CTRL);
-	if (pull_down)
-		reg |= TUSB1211_OTG_CTRL_DPPULLDOWN | TUSB1211_OTG_CTRL_DMPULLDOWN;
-	else
-		reg &= ~(TUSB1211_OTG_CTRL_DPPULLDOWN | TUSB1211_OTG_CTRL_DMPULLDOWN);
-	ulpi_write(dwc, reg, TUSB1211_OTG_CTRL);
-}
-
-static void dwc3_check_ulpi(struct dwc3 *dwc)
-{
-	if (ulpi_read(dwc, ULPI_VENDOR_ID_LOW) < 0)
-		dev_err(dwc->dev, "ULPI not working after DCTL soft reset\n");
-	else
-		dev_info(dwc->dev, "ULPI is working well");
-}
-
 /**
  * dwc3_core_soft_reset - Issues core soft reset and PHY reset
  * @dwc: pointer to our context structure
@@ -296,8 +106,6 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg &= ~DWC3_GCTL_CORESOFTRESET;
 	dwc3_writel(dwc->regs, DWC3_GCTL, reg);
 
-	dwc3_check_ulpi(dwc);
-	set_phy_eye_optim(dwc);
  }
 
 /**
@@ -597,10 +405,6 @@ static int dwc3_handle_otg_notification(struct notifier_block *nb,
 		if (last_value != event) {
 			dev_info(dwc->dev, "DWC3 OTG Notify USB_EVENT_VBUS\n");
 			last_value = event;
-			if (dwc->dpm_pulled_down) {
-				dwc3_set_phy_dpm_pulldown(dwc, 0);
-				dwc->dpm_pulled_down = 0;
-			}
 			pm_runtime_get(dwc->dev);
 			state = NOTIFY_OK;
 		}
@@ -959,8 +763,6 @@ static int dwc3_suspend_common(struct device *dev)
 
 	dwc3_suspend_phy(dwc, true);
 
-	dwc->dpm_pulled_down = 0;
-
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
 	usb_phy_shutdown(dwc->usb3_phy);
@@ -1018,11 +820,9 @@ static int dwc3_resume_common(struct device *dev)
 		/* do nothing */
 		break;
 	}
-	set_phy_eye_optim(dwc);
 
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
-	dwc3_check_ulpi(dwc);
 
 	return 0;
 }
diff --git a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
index a6a2601..585a6a0 100644
--- a/drivers/usb/dwc3/core.h
+++ b/drivers/usb/dwc3/core.h
@@ -742,7 +742,6 @@ struct dwc3 {
 	atomic_t		suspend_depth;
 
 	struct delayed_work	watchdog;
-	int			dpm_pulled_down;
 
 	unsigned int		quirks;
 };
@@ -896,8 +895,6 @@ struct dwc3_gadget_ep_cmd_params {
 void dwc3_set_mode(struct dwc3 *dwc, u32 mode);
 int dwc3_gadget_resize_tx_fifos(struct dwc3 *dwc);
 
-/* remove me when ulpi bus is exported to usb phy */
-void dwc3_set_phy_dpm_pulldown(struct dwc3 *dwc, int pull_down);
 
 #if IS_ENABLED(CONFIG_USB_DWC3_HOST) || IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)
 int dwc3_host_init(struct dwc3 *dwc);
diff --git a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
index a77f4b5..5dd4472 100644
--- a/drivers/usb/dwc3/gadget.c
+++ b/drivers/usb/dwc3/gadget.c
@@ -2220,8 +2220,6 @@ static void dwc3_gadget_disconnect_interrupt(struct dwc3 *dwc)
 	if (dwc->runtime_suspend) {
 		pm_runtime_mark_last_busy(dwc->dev);
 		pm_runtime_put_autosuspend(dwc->dev);
-		dwc3_set_phy_dpm_pulldown(dwc, 1);
-		dwc->dpm_pulled_down = 1;
 	}
 }
 
-- 
2.10.1

