From 8c2e899257ef92fd4f45c4f0f16aeea207bdcb00 Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Fri, 29 Apr 2016 11:00:42 -0700
Subject: [PATCH 388/639] Support configuring SOC trip point actions.

Description: Puma7 SoC provides 4 SoC DTS trip points. Puma platform driver to
provide the sysfs attributes to set/get actions associated with each trip
point.
---
 drivers/platform/x86/puma_acpi.c | 193 ++++++++++++++++++++++++++++++++++++++-
 1 file changed, 191 insertions(+), 2 deletions(-)

diff --git a/drivers/platform/x86/puma_acpi.c b/drivers/platform/x86/puma_acpi.c
index 238e7a1..7cdd113 100644
--- a/drivers/platform/x86/puma_acpi.c
+++ b/drivers/platform/x86/puma_acpi.c
@@ -94,8 +94,24 @@
 #define PUMA_PUNIT_READ_OPCODE   0x06
 #define PUMA_PUNIT_PTTS          0xB3
 #define PUMA_PUNIT_PTTSS         0xB4
+#define PUMA_PUNIT_TE_AUX0       0xB5
+#define PUMA_PUNIT_TE_AUX1       0xB6
+#define PUMA_PUNIT_TE_AUX2       0xB7
+#define PUMA_PUNIT_TE_AUX3       0xB8
 #define PUMA_SOC_THERMAL_TRIPS	   4
 #define PUMA_SOC_THERMAL_TRIP0	   1
+#define PUMA_SOC_TE_DDR_2X_REFRESH  1
+#define PUMA_SOC_TE_BW_THROT        (1 << 1)
+#define PUMA_SOC_TE_DDR_FREQ_THROT  (1 << 2)
+#define PUMA_SOC_TE_CPU_THROT       (1 << 3)
+#define PUMA_SOC_TE_DDR_2X_REFRESH_MASK  0x1
+#define PUMA_SOC_TE_BW_THROT_MASK        0x2
+#define PUMA_SOC_TE_DDR_FREQ_THROT_MASK  0x8000
+#define PUMA_SOC_TE_CPU_THROT_MASK       0x20000
+#define PUMA_SOC_TE_MASK            (PUMA_SOC_TE_DDR_2X_REFRESH_MASK |   \
+                                       PUMA_SOC_TE_BW_THROT_MASK |       \
+                                       PUMA_SOC_TE_DDR_FREQ_THROT_MASK | \
+                                       PUMA_SOC_TE_CPU_THROT_MASK)
 
 /* PUMA ACPI TIMER durations in ms */
 #define PUMA_ACPI_TIMER_THRS_SB  5000
@@ -435,6 +451,162 @@ static ssize_t store_sata_lpm(struct device *dev, struct device_attribute *attr,
    return count;
 }
 
+static int puma_get_soc_dts_te(unsigned int offset, unsigned int *data)
+{
+   unsigned int reg_value;
+   int ret_value;
+   
+   if((ret_value = iosf_mbi_read(PUMA_PUNIT_PORT, PUMA_PUNIT_READ_OPCODE, offset, &reg_value)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   } else {
+      *data |= ((reg_value & PUMA_SOC_TE_DDR_2X_REFRESH_MASK) ? PUMA_SOC_TE_DDR_2X_REFRESH : 0);
+      *data |= ((reg_value & PUMA_SOC_TE_BW_THROT_MASK) ? PUMA_SOC_TE_BW_THROT : 0);
+      *data |= ((reg_value & PUMA_SOC_TE_DDR_FREQ_THROT_MASK) ? PUMA_SOC_TE_DDR_FREQ_THROT : 0);
+      *data |= ((reg_value & PUMA_SOC_TE_CPU_THROT_MASK) ? PUMA_SOC_TE_CPU_THROT : 0);
+   }
+
+   return ret_value;
+}
+
+static int puma_set_soc_dts_te(unsigned int offset, unsigned int data)
+{
+   unsigned int reg_value;
+   int ret_value;
+   
+   if((ret_value = iosf_mbi_read(PUMA_PUNIT_PORT, PUMA_PUNIT_READ_OPCODE, offset, &reg_value)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n",ret_value, __LINE__);
+   } if((ret_value = iosf_mbi_write(PUMA_PUNIT_PORT, PUMA_PUNIT_WRITE_OPCODE, offset, (reg_value = reg_value & ~(PUMA_SOC_TE_MASK)))) < 0) {
+         pr_err("iosf_mbi_write failed %d at line %d!\n",ret_value, __LINE__);
+   } else {
+      reg_value |= ((data & PUMA_SOC_TE_DDR_2X_REFRESH) ? PUMA_SOC_TE_DDR_2X_REFRESH_MASK : 0);
+      reg_value |= ((data & PUMA_SOC_TE_BW_THROT) ? PUMA_SOC_TE_BW_THROT_MASK : 0);
+      reg_value |= ((data & PUMA_SOC_TE_DDR_FREQ_THROT) ? PUMA_SOC_TE_DDR_FREQ_THROT_MASK : 0);
+      reg_value |= ((data & PUMA_SOC_TE_CPU_THROT) ? PUMA_SOC_TE_CPU_THROT_MASK : 0);
+
+      if((ret_value = iosf_mbi_write(PUMA_PUNIT_PORT, PUMA_PUNIT_WRITE_OPCODE, offset, reg_value)) < 0) {
+         pr_err("iosf_mbi_write failed %d at line %d!\n",ret_value, __LINE__);
+      }
+   }
+
+   return ret_value;
+}
+
+static ssize_t show_soc_dts_te0(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   int ret_value;
+   unsigned int data = 0;
+   
+   ret_value = puma_get_soc_dts_te(PUMA_PUNIT_TE_AUX0, &data);
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return sprintf(buf, "0x%x\n", data);
+   }
+}
+
+static ssize_t show_soc_dts_te1(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   int ret_value;
+   unsigned int data = 0;
+   
+   ret_value = puma_get_soc_dts_te(PUMA_PUNIT_TE_AUX1, &data);
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return sprintf(buf, "0x%x\n", data);
+   }
+}
+
+static ssize_t show_soc_dts_te2(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   int ret_value;
+   unsigned int data = 0;
+   
+   ret_value = puma_get_soc_dts_te(PUMA_PUNIT_TE_AUX2, &data);
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return sprintf(buf, "0x%x\n", data);
+   }
+}
+
+static ssize_t show_soc_dts_te3(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   int ret_value;
+   unsigned int data = 0;
+   
+   ret_value = puma_get_soc_dts_te(PUMA_PUNIT_TE_AUX3, &data);
+
+   if(ret_value < 0) {
+      return -EIO;
+   } else {
+      return sprintf(buf, "0x%x\n", data);
+   }
+}
+
+static ssize_t store_soc_dts_te0(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+   unsigned int data;
+
+   if(sscanf(buf, "%x", &data) != 1) {
+      return -EINVAL;
+   } 
+      
+   if(puma_set_soc_dts_te(PUMA_PUNIT_TE_AUX0, data) < 0) {
+      return -EIO;
+   }
+
+   return count;
+}
+
+static ssize_t store_soc_dts_te1(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+   unsigned int data;
+
+   if(sscanf(buf, "%x", &data) != 1) {
+      return -EINVAL;
+   } 
+      
+   if(puma_set_soc_dts_te(PUMA_PUNIT_TE_AUX1, data) < 0) {
+      return -EIO;
+   }
+
+   return count;
+}
+
+static ssize_t store_soc_dts_te2(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+   unsigned int data;
+
+   if(sscanf(buf, "%x", &data) != 1) {
+      return -EINVAL;
+   } 
+      
+   if(puma_set_soc_dts_te(PUMA_PUNIT_TE_AUX2, data) < 0) {
+      return -EIO;
+   }
+
+   return count;
+}
+
+static ssize_t store_soc_dts_te3(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+   unsigned int data;
+
+   if(sscanf(buf, "%x", &data) != 1) {
+      return -EINVAL;
+   } 
+      
+   if(puma_set_soc_dts_te(PUMA_PUNIT_TE_AUX3, data) < 0) {
+      return -EIO;
+   }
+
+   return count;
+}
+
 static DEVICE_ATTR(system_state, S_IRUGO, show_system_state, NULL);
 static DEVICE_ATTR(netip_state, S_IRUGO, show_netip_state, NULL);
 static DEVICE_ATTR(pmc_state, S_IRUGO, show_pmc_state, NULL);
@@ -443,6 +615,10 @@ static DEVICE_ATTR(device_power_state, S_IRUGO, show_device_power_state, NULL);
 static DEVICE_ATTR(function_disable_state, S_IRUGO, show_function_disable_state, NULL);
 static DEVICE_ATTR(usb_lpm, S_IRUGO | S_IWUSR, show_usb_lpm, store_usb_lpm);
 static DEVICE_ATTR(sata_lpm, S_IRUGO | S_IWUSR, show_sata_lpm, store_sata_lpm);
+static DEVICE_ATTR(soc_dts_te0, S_IRUGO | S_IWUSR, show_soc_dts_te0, store_soc_dts_te0);
+static DEVICE_ATTR(soc_dts_te1, S_IRUGO | S_IWUSR, show_soc_dts_te1, store_soc_dts_te1);
+static DEVICE_ATTR(soc_dts_te2, S_IRUGO | S_IWUSR, show_soc_dts_te2, store_soc_dts_te2);
+static DEVICE_ATTR(soc_dts_te3, S_IRUGO | S_IWUSR, show_soc_dts_te3, store_soc_dts_te3);
 
 static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_system_state.attr,
@@ -453,6 +629,10 @@ static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_function_disable_state.attr,
    &dev_attr_usb_lpm.attr,
    &dev_attr_sata_lpm.attr,
+   &dev_attr_soc_dts_te0.attr,
+   &dev_attr_soc_dts_te1.attr,
+   &dev_attr_soc_dts_te2.attr,
+   &dev_attr_soc_dts_te3.attr,
    NULL,
 };
 
@@ -626,7 +806,6 @@ void puma_acpi_button_release(struct puma_acpi_data *data, unsigned int event)
    }
    switch(data->current_state) {
       case PUMA_ACPI_STATE_ACTIVE:
-      case PUMA_ACPI_STATE_BBU:
          if((data->timer_state >= PUMA_ACPI_TIMER_SB_THRS) && (data->timer_state <= PUMA_ACPI_TIMER_SB_LED)) {
             data->current_state = PUMA_ACPI_STATE_STANDBY;
             data->notify_state_type = PUMA_ACPI_NOTIFY_FAST_STANBY;
@@ -637,11 +816,21 @@ void puma_acpi_button_release(struct puma_acpi_data *data, unsigned int event)
             data->on_bat_during_standby = false;
          } 
          break;
+      case PUMA_ACPI_STATE_BBU:
+         if((data->timer_state >= PUMA_ACPI_TIMER_SB_THRS) && (data->timer_state <= PUMA_ACPI_TIMER_SB_LED)) {
+            data->current_state = PUMA_ACPI_STATE_STANDBY;
+            data->notify_state_type = PUMA_ACPI_NOTIFY_FAST_STANBY;
+            data->on_bat_during_standby = true;
+         } else if(data->timer_state >= PUMA_ACPI_TIMER_DSB_THRS) {
+            data->current_state = PUMA_ACPI_STATE_DEEP_STANDBY;
+            data->notify_state_type = PUMA_ACPI_NOTIFY_DEEP_STANDBY;
+            data->on_bat_during_standby = true;
+         } 
+         break;
       case PUMA_ACPI_STATE_STANDBY:
          if(data->timer_state >= PUMA_ACPI_TIMER_DSB_THRS) {
             data->current_state = PUMA_ACPI_STATE_DEEP_STANDBY;
             data->notify_state_type = PUMA_ACPI_NOTIFY_DEEP_STANDBY;
-            data->on_bat_during_standby = false;
          } else {
             if(data->on_bat_during_standby) {
                data->current_state = PUMA_ACPI_STATE_BBU;
-- 
2.10.1

