From 793a1bd2485288a8a600ff4f10d5a5db001e6dc7 Mon Sep 17 00:00:00 2001
From: avelayux <arunkumar.velayutham@intel.com>
Date: Fri, 8 Apr 2016 11:40:20 -0700
Subject: [PATCH 392/639] Title: conntrack_flush command goes into infinite
 loop. Owner: Arunkumar Velayutham HSD: 246358 Issue: conntrack_flush command
 executed by CCSP stack goes on infinite loop due to a bug introduced during
 conntrack_client MRPC implementation. Resolution: Avoid sending NF CT delete
 event to ARM if it is a CT flush request from application. Attestation: I
 confirm that I understand the authorized content and license obligations
 listed in the IP Plan(s) for the SDK release and I have delivered content in
 accordance with those IP Plans: Yes. Approvers:
 arunkumar.velayutham@intel.com Change-Id:
 I3b7dbc0628e0d69eff8d96aa567db185193c7ca7

---
 drivers/mrpc/core/conntrack_client.c | 41 +++++++++++++++---------------------
 include/linux/ti_hil.h               |  2 ++
 include/net/netfilter/nf_conntrack.h |  9 --------
 net/netfilter/nf_conntrack_core.c    | 31 +++++++++++++++++++++++----
 4 files changed, 46 insertions(+), 37 deletions(-)

diff --git a/drivers/mrpc/core/conntrack_client.c b/drivers/mrpc/core/conntrack_client.c
index 0b894e9..53dabf8 100644
--- a/drivers/mrpc/core/conntrack_client.c
+++ b/drivers/mrpc/core/conntrack_client.c
@@ -49,8 +49,8 @@
 #include <linux/err.h>
 #include <linux/notifier.h>
 #include <linux/mrpc.h>
+#include <linux/ti_hil.h>
 #include <linux/platform_device.h>
-
 #include <net/netfilter/nf_conntrack.h>
 #include <net/netfilter/nf_conntrack_l3proto.h>
 #include <net/netfilter/nf_conntrack_l4proto.h>
@@ -77,30 +77,12 @@
 #define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
 #endif
 
-
-/**************************************************************************
- ********************* PP Connection Tracking Event Identifiers ***********
- **************************************************************************/
-/* Base for all connection tracking PP Event identifiers. */
-#define TI_CT_EVENT                  0x30
-/* Event generated when a connection tracking entry has been created. */
-#define TI_CT_ENTRY_CREATED          (TI_CT_EVENT + 0x1)
-/* Event generated when a connection tracking entry has timed-out */
-#define TI_CT_DEATH_BY_TIMEOUT       (TI_CT_EVENT + 0x2)
-/* Event generated when a Netfilter table is being updated. */
-#define TI_CT_NETFILTER_TABLE_UPDATE (TI_CT_EVENT + 0x3)
-/* Event generated once Netfilter decides to drop the packet */
-#define TI_CT_NETFILTER_DISCARD_PKT  (TI_CT_EVENT + 0x4)
-/* Event generated once Netfilter decides to cancel drop acceleration */
-#define TI_CT_NETFILTER_CANCEL_DISCARD_ACCELERATION     (TI_CT_EVENT + 0x5)
-
 #define IP_CT_DIR_ORIGINAL 0
 #define IP_CT_DIR_REPLY 1
 #define CT_MRPC_FALIURE -1
 #define IN_PROGRESS 1
 #define COMPLETE 0
 
-
 static struct platform_device *ct_client_device;
 
 struct ct_client_private {
@@ -133,7 +115,8 @@ struct ct_worker_info {
 };
 
 enum {
-	TI_CT_DEATH_BY_TIMEOUT_PROC = 0
+	TI_CT_DEATH_BY_TIMEOUT_PROC = 0,
+        TI_NPCPU_CONNTRACK_FLUSH_PROC = 1,
 };
 
 static int ct_tuple_info_worker(struct notifier_block *self, unsigned long event, void *ptr);
@@ -155,7 +138,7 @@ static inline int ct_mrpc_call(__u8 procid, struct mrpc_conntrack_tuple_info *ct
    }
 
    ret = mrpc_call(priv->mrpc, procid, ct_tuple_info, sizeof(*ct_tuple_info),
-		   reply, sizeof(*reply), 10000, &errcode);
+                   reply, sizeof(*reply), 60000, &errcode);
 
    if (ret || errcode) {
       pr_err("CONNTRACK_MRPC_CLIENT: ERROR: ret=%d, errcode=%d",ret, errcode);
@@ -310,7 +293,6 @@ static void ct_tuple_info_fetcher(struct work_struct *work_arg)
 	     /*This CT timeout is extended by 60 seconds as the PP session exists in ARM.
 	      * hope this CT record is still alive!.*/
 	     mod_timer(&ct->timeout,extend_ct_time);
-
 	   }
 	   else
 	   {
@@ -320,10 +302,14 @@ static void ct_tuple_info_fetcher(struct work_struct *work_arg)
 	     ct->ti_pp_status_flag |= TI_PP_KILL_CONNTRACK;
 	   }
       break;
+      case TI_NPCPU_CONNTRACK_FLUSH:
+           printk(KERN_DEBUG "CT FLUSH event generated.MRPC NPCPU to flush the sessions\n");
+           ct_mrpc_call(TI_NPCPU_CONNTRACK_FLUSH_PROC, &conntrack_tuple_info, &mrpc_reply);
+      break;
       default:
 	   DBG("Connection tracking event not supported.");
   }
-
+handle_error:
   kfree(worker);
   return;
 }
@@ -346,7 +332,14 @@ static int ct_tuple_info_worker(struct notifier_block *self, unsigned long event
      return NOTIFY_DONE;
    }
 
-   ct_work_info->ct = (struct nf_conn *)ptr;
+   if(event == TI_NPCPU_CONNTRACK_FLUSH) 
+   {
+      ct_work_info->ct = NULL;
+   }
+   else
+   {
+      ct_work_info->ct = (struct nf_conn *)ptr;
+   }
    ct_work_info->event = event;
    INIT_WORK(&ct_work_info->work, ct_tuple_info_fetcher);
    queue_work(priv->workQ, &ct_work_info->work);
diff --git a/include/linux/ti_hil.h b/include/linux/ti_hil.h
index 5fdca07..2a56e5c 100755
--- a/include/linux/ti_hil.h
+++ b/include/linux/ti_hil.h
@@ -107,6 +107,8 @@ struct hil_core_notifier_param
 /* Event generated once Netfilter decides to delete a session */
 #define TI_CT_NETFILTER_DELETE_SESSION     (TI_CT_EVENT + 0x6)
 
+#define TI_NPCPU_CONNTRACK_FLUSH  (TI_CT_EVENT + 0x8)
+
 /**************************************************************************
  ************************* PP IP Event Identifiers ************************
  **************************************************************************/
diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h
index 1e79c04..613d58b 100644
--- a/include/net/netfilter/nf_conntrack.h
+++ b/include/net/netfilter/nf_conntrack.h
@@ -36,15 +36,6 @@
 /* Set the flag to 1 indicates that all packets flowing through the box matching the
  *  * connection will have their BYPASS flag set. */
 #define TI_PP_BYPASS               0x2
-
-/* Base for all connection tracking PP Event identifiers. */
-#define TI_CT_EVENT                  0x30
-
-/* Event generated when a connection tracking entry has been created. */
-#define TI_CT_ENTRY_CREATED          (TI_CT_EVENT + 0x1)
-
-/* Event generated when a connection tracking entry has timed-out */
-#define TI_CT_DEATH_BY_TIMEOUT       (TI_CT_EVENT + 0x2)
 #endif
 /* per conntrack: protocol private data */
 union nf_conntrack_proto {
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 2c53108..8e547ad 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -56,6 +56,10 @@
 #include <net/netfilter/nf_nat_helper.h>
 
 #define NF_CONNTRACK_VERSION	"0.5.0"
+/*Some random value to indicate that the delete is due to CT timeout.
+ *this is required to differentiate conntrack_flush related delete.
+ */
+#define DEATH_BY_TIMEOUT 11
 
 int (*nfnetlink_parse_nat_setup_hook)(struct nf_conn *ct,
 				      enum nf_nat_manip_type manip,
@@ -296,6 +300,19 @@ bool nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
 {
 	struct nf_conn_tstamp *tstamp;
 #if defined(CONFIG_APPCPU_GW_PP_HANDLE) && defined(CONFIG_MRPC_CONNTRACK_CLIENT)
+        unsigned long extend_ct_tmp_time;
+        unsigned long extend_ct_time;
+        /* this is to differentiate conntrack_flush from regular timeout scenario.
+           we don't need to check for ARM PP session status if the application requested
+           to flush the connection.But, we need to be cautious about the CT records
+           which are already been pushed to workqueue when we received this flush event. 
+        */
+
+        if(report != DEATH_BY_TIMEOUT)
+        {
+           /* Not a DEATH_BY_TIMEOUT event. Delete Record Now.*/
+           goto delete_record; 
+        } 
 	if(ct->ct_tuple_arm_sync_wait==1)
 	{
 	   /* Did the HIL profile take over or not? - right after the temp timer expired */
@@ -305,10 +322,13 @@ bool nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
 	       * extended timeout expires again.
 	       */
 	      ct->ct_tuple_arm_sync_wait=0;
+              extend_ct_time = (60 * HZ) + jiffies;
+              mod_timer(&ct->timeout,extend_ct_time);
 	      return;  /* HIL Profile took over... */
 	   }
 	   else
 	   {
+delete_record:
 	      /*go ahead and clear the ct record */
 	      tstamp = nf_conn_tstamp_find(ct);
 	      if (tstamp && tstamp->stop == 0)
@@ -333,8 +353,8 @@ bool nf_ct_delete(struct nf_conn *ct, u32 portid, int report)
 	  /* Generate an event indicating the connection tracking entry is being deleted. */
 	  nf_conn_info_event(TI_CT_DEATH_BY_TIMEOUT, (void *)ct);
 	  /* conntrack mrpc client is still working on to sync pp info from ARM */
-	  ct->timeout.expires = (3 * HZ) + jiffies;
-	  add_timer(&ct->timeout);
+	  extend_ct_tmp_time = (3 * HZ) + jiffies;
+	  mod_timer(&ct->timeout,extend_ct_tmp_time);
 	  ct->ct_tuple_arm_sync_wait=1;
 	  return;
 	}
@@ -362,7 +382,7 @@ EXPORT_SYMBOL_GPL(nf_ct_delete);
 
 static void death_by_timeout(unsigned long ul_conntrack)
 {
-	nf_ct_delete((struct nf_conn *)ul_conntrack, 0, 0);
+        nf_ct_delete((struct nf_conn *)ul_conntrack, 0, DEATH_BY_TIMEOUT);
 }
 
 static inline bool
@@ -1338,13 +1358,13 @@ found:
 	return ct;
 }
 
+
 void nf_ct_iterate_cleanup(struct net *net,
 			   int (*iter)(struct nf_conn *i, void *data),
 			   void *data, u32 portid, int report)
 {
 	struct nf_conn *ct;
 	unsigned int bucket = 0;
-
 	while ((ct = get_next_corpse(net, iter, data, &bucket)) != NULL) {
 		/* Time to push up daises... */
 		if (del_timer(&ct->timeout))
@@ -1374,6 +1394,9 @@ EXPORT_SYMBOL_GPL(nf_ct_free_hashtable);
 
 void nf_conntrack_flush_report(struct net *net, u32 portid, int report)
 {
+        /* nf_conntrack_flush_report invoked to trigger NPCPU ct flush. */
+        /* disable this event for now untill we get the ARM side changes enabled */
+//        nf_conn_info_event(TI_NPCPU_CONNTRACK_FLUSH,(void *)NULL);
 	nf_ct_iterate_cleanup(net, kill_all, NULL, portid, report);
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_flush_report);
-- 
2.10.1

