From 5d3f033554d17a4dab9cc7ba946b6ab7bed56240 Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Tue, 10 May 2016 10:54:37 -0700
Subject: [PATCH 395/639] Reset button press duration

Description: Puma platform driver to provide the sysfs attribute to read the
reset_btn_dur.
---
 drivers/platform/x86/puma_acpi.c | 51 +++++++++++++++++++++++++++++++++-------
 1 file changed, 42 insertions(+), 9 deletions(-)

diff --git a/drivers/platform/x86/puma_acpi.c b/drivers/platform/x86/puma_acpi.c
index 7cdd113..3da017e 100644
--- a/drivers/platform/x86/puma_acpi.c
+++ b/drivers/platform/x86/puma_acpi.c
@@ -133,6 +133,8 @@
 #define PUMA_PMC_FUNC_DIS_0   0x34
 #define PUMA_PMC_FUNC_DIS_1   0x38
 #define PUMA_PMC_MEM_READ_OPCODE  0x00
+#define PUMA_PMC_RESET_INFO   0x0E8
+#define PUMA_PMC_RESET_BTN_DUR_MASK 0xF
 
 
 #define PUMA_ATOM2PMC_DB_VALUE(busy,ipc_transaction_type,format,ipc_cmd_type,ipc_ext_payload,ipc_cmd,ipc_payload) \
@@ -143,6 +145,7 @@
 #define PUMA_SETPS_LPM        PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 1, 0, 7, 1)
 #define PUMA_SETPS_NETIP_ON   PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 1, 0, 7, 4)
 #define PUMA_SETPS_NETIP_OFF  PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 1, 0, 7, 8)
+#define PUMA_CLEAR_RESET_INFO PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 3, 0, 7, 0)
 
 #define PUMA_ATOM_OVERRIDE_LTR      PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 1, 0, 5, 7)
 #define PUMA_ATOM_USE_DEVICE_LTR    PUMA_ATOM2PMC_DB_VALUE(1, 3, 1, 1, 0, 5, 0)
@@ -250,6 +253,7 @@ struct puma_acpi_data {
    struct regulator *regulator;   
    unsigned int pmic_supported:1;
    int pmic_type;
+   int reset_btn_dur;
 };
 
 static unsigned long puma_events;
@@ -607,6 +611,18 @@ static ssize_t store_soc_dts_te3(struct device *dev, struct device_attribute *at
    return count;
 }
 
+static ssize_t show_reset_btn_dur(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   struct acpi_device *acpi = to_acpi_device(dev);
+   struct puma_acpi_data *data = acpi_driver_data(acpi);
+
+   if(data != NULL) {
+      return sprintf(buf, "%d\n", data->reset_btn_dur);
+   } else {
+      return -EIO;   
+   }
+}
+
 static DEVICE_ATTR(system_state, S_IRUGO, show_system_state, NULL);
 static DEVICE_ATTR(netip_state, S_IRUGO, show_netip_state, NULL);
 static DEVICE_ATTR(pmc_state, S_IRUGO, show_pmc_state, NULL);
@@ -619,6 +635,7 @@ static DEVICE_ATTR(soc_dts_te0, S_IRUGO | S_IWUSR, show_soc_dts_te0, store_soc_d
 static DEVICE_ATTR(soc_dts_te1, S_IRUGO | S_IWUSR, show_soc_dts_te1, store_soc_dts_te1);
 static DEVICE_ATTR(soc_dts_te2, S_IRUGO | S_IWUSR, show_soc_dts_te2, store_soc_dts_te2);
 static DEVICE_ATTR(soc_dts_te3, S_IRUGO | S_IWUSR, show_soc_dts_te3, store_soc_dts_te3);
+static DEVICE_ATTR(reset_btn_dur, S_IRUGO, show_reset_btn_dur, NULL);
 
 static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_system_state.attr,
@@ -633,6 +650,7 @@ static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_soc_dts_te1.attr,
    &dev_attr_soc_dts_te2.attr,
    &dev_attr_soc_dts_te3.attr,
+   &dev_attr_reset_btn_dur.attr,
    NULL,
 };
 
@@ -1262,22 +1280,26 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
 {
    struct puma_acpi_data *data;
    struct task_struct *task;
-   int resource_index;
+   int resource_index; //points to the last resource successfully allocated
    int ret;
-   unsigned int power_status;
+   unsigned int power_status, reset_info1;
    char *str;
    
    data = kzalloc(sizeof(*data), GFP_KERNEL);
-   if (!data)
+   if (!data) {
       return -ENOMEM;
-
+   } else {
+      resource_index = PUMA_ACPI_DATA;
+   }
+   
    data->acpi_dev = acpi_dev;
 
    ret = kfifo_alloc(&data->notify_fifo, PUMA_ACPI_FIFO_SIZE, GFP_KERNEL);
    if (ret) {
       pr_err("error kfifo_alloc %d\n", ret);
-      resource_index = PUMA_ACPI_DATA;
       goto puma_acpi_add_error;
+   } else {
+      resource_index = PUMA_ACPI_NOTIFY_FIFO;
    }
    
    str = acpi_device_name(acpi_dev);
@@ -1289,7 +1311,6 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
    ret = puma_acpi_get_data(data, "GCSR", &power_status);
    if(ret) {
       pr_err("puma_acpi_get_data failed!\n");
-      resource_index = PUMA_ACPI_NOTIFY_FIFO;
       goto puma_acpi_add_error;
    }
 
@@ -1312,16 +1333,29 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
    /* create debug attributes */
    if(ret = sysfs_create_group(&acpi_dev->dev.kobj, &puma_acpi_attr_group)) {
       pr_err("puma sysfs_create_group failed!\n");
-      resource_index = PUMA_ACPI_NOTIFY_FIFO;
       goto puma_acpi_add_error;
+   } else {
+      resource_index = PUMA_ACPI_SYSFS;
    }
    
    if((ret = puma_acpi_make_pmc_ipc_channel_operational()) < 0) {
       pr_err("puma_acpi_make_pmc_ipc_channel_operational failed!\n");
-      resource_index = PUMA_ACPI_SYSFS;
       goto puma_acpi_add_error;
    }
 
+   /* get the reset information */
+   if((ret = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_RESET_INFO, &reset_info1)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n", ret, __LINE__);
+      goto puma_acpi_add_error;
+   } else {
+      data->reset_btn_dur = reset_info1 & PUMA_PMC_RESET_BTN_DUR_MASK;
+      /* send IPC to clear the reset info */
+      if ((ret = puma_acpi_pmc_ipc(PUMA_WRITE_PMC_IPC, PUMA_CLEAR_RESET_INFO, &reset_info1)) != 0) {
+         pr_err("puma_acpi_pmc_ipc PUMA_CLEAR_RESET_INFO failed\n");
+         goto puma_acpi_add_error;
+      }      
+   }
+   
    init_waitqueue_head(&puma_wait);
    init_timer(&data->timer);
    data->timer_state = PUMA_ACPI_TIMER_NOT_STARTED;
@@ -1341,7 +1375,6 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
    task = kthread_run(puma_acpi_task, data, "%s", data->name);
    if (task == NULL || IS_ERR(task)) {
       pr_err("error kthread_run\n");
-      resource_index = PUMA_ACPI_SYSFS;
       ret = -ENOMEM;
       goto puma_acpi_add_error;
    }
-- 
2.10.1

