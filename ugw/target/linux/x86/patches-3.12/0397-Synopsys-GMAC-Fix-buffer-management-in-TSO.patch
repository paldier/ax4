From ccad025545de24e3cc4aae19cf8239d59675fa4e Mon Sep 17 00:00:00 2001
From: Marco A Vital Yep <marco.a.vital.yep@intel.com>
Date: Wed, 11 May 2016 17:55:50 -0700
Subject: [PATCH 397/639] Synopsys GMAC: Fix buffer management in TSO

While running a TCP iperf session for longer than 10 seconds with TSO
enabled the network socket runs out of memory and the throughput drops
to almost zero.
This problem was caused for the incorrect assignment of the SKB pointer
to an unused buffer and eventually leaving the SKB unreleased.
The problem is fixed assigning the SKB pointer to the right buffer:
e.g. the last buffer used for that particular packet.
---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c    | 11 ++++++++++-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h |  5 ++---
 2 files changed, 12 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
index 9024889..9fed31d 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -1020,8 +1020,17 @@ static unsigned int DWC_ETH_QOS_map_skb(struct net_device *dev,
 			}
 		}
 	}
-	buffer->skb = skb;
+
 	desc_data->packet_count = count;
+	if (!count) {
+		xtra_count = 0;
+	} else if (buffer->dma) {
+		buffer->skb = skb;
+	} else if (prev_buffer) {
+		prev_buffer->skb = skb;
+	} else {
+		goto err_out_dma_map_fail;
+	}
 
 	DBGPR("<--DWC_ETH_QOS_map_skb\n");
 
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
index 1f1b862..e2d2a0f 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -269,9 +269,8 @@
 #define FIFO_SIZE_B(x) (x)
 #define FIFO_SIZE_KB(x) (x*1024)
 
-//#define DWC_ETH_QOS_MAX_DATA_PER_TX_BUF (1 << 13)     /* 8 KB Maximum data per buffer pointer(in Bytes) */
-#define DWC_ETH_QOS_MAX_DATA_PER_TX_BUF (1 << 12)	/* for testing purpose: 4 KB Maximum data per buffer pointer(in Bytes) */
-#define DWC_ETH_QOS_MAX_DATA_PER_TXD (DWC_ETH_QOS_MAX_DATA_PER_TX_BUF * 2)	/* Maxmimum data per descriptor(in Bytes) */
+#define DWC_ETH_QOS_MAX_DATA_PER_TX_BUF      (1 << 13)     /* 8 KB Maximum data per buffer pointer(in Bytes) */
+#define DWC_ETH_QOS_MAX_DATA_PER_TXD         (DWC_ETH_QOS_MAX_DATA_PER_TX_BUF * 2)	/* Maxmimum data per descriptor(in Bytes) */
 
 #define DWC_ETH_QOS_MAX_SUPPORTED_MTU 16380
 #define DWC_ETH_QOS_MAX_GPSL 9000 /* Default maximum Gaint Packet Size Limit */
-- 
2.10.1

