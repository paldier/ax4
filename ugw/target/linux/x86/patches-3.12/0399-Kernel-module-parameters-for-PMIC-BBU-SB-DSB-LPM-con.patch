From eebbcc5b341779c446f75e40d6b463f183dfbe38 Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Fri, 13 May 2016 08:51:41 -0700
Subject: [PATCH 399/639] Kernel module parameters for PMIC BBU, SB, DSB LPM
 configuartion

Description: The PMIC driver to create the kernel module parameters to allow
the power manager to set the PMIC low power mode configuration based on the
policy for the specific system state.
---
 drivers/platform/x86/puma_acpi.c            | 42 +++++++++++++++++++++++++-
 drivers/regulator/int34d9-regulator.c       | 46 +++++++++++++----------------
 include/linux/regulator/int34d9-regulator.h |  3 +-
 3 files changed, 63 insertions(+), 28 deletions(-)

diff --git a/drivers/platform/x86/puma_acpi.c b/drivers/platform/x86/puma_acpi.c
index 3da017e..63c08e3 100644
--- a/drivers/platform/x86/puma_acpi.c
+++ b/drivers/platform/x86/puma_acpi.c
@@ -133,7 +133,12 @@
 #define PUMA_PMC_FUNC_DIS_0   0x34
 #define PUMA_PMC_FUNC_DIS_1   0x38
 #define PUMA_PMC_MEM_READ_OPCODE  0x00
+#define PUMA_PMC_VUART4       0x0FC
 #define PUMA_PMC_RESET_INFO   0x0E8
+#define PUMA_PMC_RESET_CAUSE_MASK   0x7F000000
+#define PUMA_PMC_RESET_CAUSE_SHIFT  24
+#define PUMA_PMC_RESET_TYPE_MASK    0xFF0000
+#define PUMA_PMC_RESET_TYPE_SHIFT   16
 #define PUMA_PMC_RESET_BTN_DUR_MASK 0xF
 
 
@@ -253,6 +258,8 @@ struct puma_acpi_data {
    struct regulator *regulator;   
    unsigned int pmic_supported:1;
    int pmic_type;
+   int reset_cause; 
+   int reset_type;
    int reset_btn_dur;
 };
 
@@ -611,6 +618,30 @@ static ssize_t store_soc_dts_te3(struct device *dev, struct device_attribute *at
    return count;
 }
 
+static ssize_t show_reset_cause(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   struct acpi_device *acpi = to_acpi_device(dev);
+   struct puma_acpi_data *data = acpi_driver_data(acpi);
+
+   if(data != NULL) {
+      return sprintf(buf, "%d\n", data->reset_cause);
+   } else {
+      return -EIO;   
+   }
+}
+
+static ssize_t show_reset_type(struct device *dev, struct device_attribute *attr, char *buf)
+{
+   struct acpi_device *acpi = to_acpi_device(dev);
+   struct puma_acpi_data *data = acpi_driver_data(acpi);
+   
+   if(data != NULL) {
+      return sprintf(buf, "%d\n", data->reset_type);
+   } else {
+      return -EIO;   
+   }
+}
+
 static ssize_t show_reset_btn_dur(struct device *dev, struct device_attribute *attr, char *buf)
 {
    struct acpi_device *acpi = to_acpi_device(dev);
@@ -635,6 +666,8 @@ static DEVICE_ATTR(soc_dts_te0, S_IRUGO | S_IWUSR, show_soc_dts_te0, store_soc_d
 static DEVICE_ATTR(soc_dts_te1, S_IRUGO | S_IWUSR, show_soc_dts_te1, store_soc_dts_te1);
 static DEVICE_ATTR(soc_dts_te2, S_IRUGO | S_IWUSR, show_soc_dts_te2, store_soc_dts_te2);
 static DEVICE_ATTR(soc_dts_te3, S_IRUGO | S_IWUSR, show_soc_dts_te3, store_soc_dts_te3);
+static DEVICE_ATTR(reset_cause, S_IRUGO, show_reset_cause, NULL);
+static DEVICE_ATTR(reset_type, S_IRUGO, show_reset_type, NULL);
 static DEVICE_ATTR(reset_btn_dur, S_IRUGO, show_reset_btn_dur, NULL);
 
 static struct attribute_group *puma_acpi_sysfs_entries[] = {
@@ -650,6 +683,8 @@ static struct attribute_group *puma_acpi_sysfs_entries[] = {
    &dev_attr_soc_dts_te1.attr,
    &dev_attr_soc_dts_te2.attr,
    &dev_attr_soc_dts_te3.attr,
+   &dev_attr_reset_cause.attr,
+   &dev_attr_reset_type.attr,
    &dev_attr_reset_btn_dur.attr,
    NULL,
 };
@@ -1282,7 +1317,7 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
    struct task_struct *task;
    int resource_index; //points to the last resource successfully allocated
    int ret;
-   unsigned int power_status, reset_info1;
+   unsigned int power_status, reset_info1, reset_info2;
    char *str;
    
    data = kzalloc(sizeof(*data), GFP_KERNEL);
@@ -1347,7 +1382,12 @@ static int puma_acpi_add(struct acpi_device *acpi_dev)
    if((ret = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_RESET_INFO, &reset_info1)) < 0) {
       pr_err("iosf_mbi_read failed %d at line %d!\n", ret, __LINE__);
       goto puma_acpi_add_error;
+   } else if((ret = iosf_mbi_read(PUMA_PMC_PORT_ID, PUMA_PMC_MEM_READ_OPCODE, PUMA_PMC_VUART4, &reset_info2)) < 0) {
+      pr_err("iosf_mbi_read failed %d at line %d!\n", ret, __LINE__);
+      goto puma_acpi_add_error;
    } else {
+      data->reset_cause = (reset_info2 & PUMA_PMC_RESET_CAUSE_MASK) >> PUMA_PMC_RESET_CAUSE_SHIFT;
+      data->reset_type = (reset_info2 & PUMA_PMC_RESET_TYPE_MASK) >> PUMA_PMC_RESET_TYPE_SHIFT;
       data->reset_btn_dur = reset_info1 & PUMA_PMC_RESET_BTN_DUR_MASK;
       /* send IPC to clear the reset info */
       if ((ret = puma_acpi_pmc_ipc(PUMA_WRITE_PMC_IPC, PUMA_CLEAR_RESET_INFO, &reset_info1)) != 0) {
diff --git a/drivers/regulator/int34d9-regulator.c b/drivers/regulator/int34d9-regulator.c
index 035f222..4c09462 100644
--- a/drivers/regulator/int34d9-regulator.c
+++ b/drivers/regulator/int34d9-regulator.c
@@ -15,6 +15,7 @@
  */
 
 #include <linux/module.h>
+#include <linux/moduleparam.h>
 #include <linux/platform_device.h>
 #include <linux/i2c.h>
 #include <linux/err.h>
@@ -26,6 +27,17 @@
 #include <linux/acpi_gpio.h>
 #include <linux/regulator/int34d9-regulator.h>
 
+static int puma7_rohm_lpm_bbu = PUMA7_ROHM_LPM_CFG_BBU;
+static int puma7_rohm_lpm_sb = PUMA7_ROHM_LPM_CFG_FAST_STANDBY;
+static int puma7_rohm_lpm_dsb = PUMA7_ROHM_LPM_CFG_DEEP_STANDBY;
+
+module_param(puma7_rohm_lpm_bbu, int, 0644);
+MODULE_PARM_DESC(puma7_rohm_lpm_bbu, "BBU Low Power Mode configuration");
+module_param(puma7_rohm_lpm_sb, int, 0644);
+MODULE_PARM_DESC(puma7_rohm_lpm_sb, "Standby Low Power Mode configuration");
+module_param(puma7_rohm_lpm_dsb, int, 0644);
+MODULE_PARM_DESC(puma7_rohm_lpm_dsb, "Deep Standby Low Power Mode configuration");
+
 static DEFINE_MUTEX(puma7_rohm_mutex);
 
 static s32 puma7_rohm_pmic_write(struct puma7_rohm_pmic *pmic, u8 reg, u8 val)
@@ -129,13 +141,13 @@ static int puma7_rohm_pmic_set_lpm_mode(struct regulator_dev *rdev,
    		reg_val = PUMA7_ROHM_LPM_CFG_ACTIVE;
    		break;
    	case PUMA7_ROHM_PMIC_MODE_BBU:
-   		reg_val = PUMA7_ROHM_LPM_CFG_BBU;
+   		reg_val = puma7_rohm_lpm_bbu & 0xFF;
    		break;
    	case PUMA7_ROHM_PMIC_MODE_FAST_STANDBY:
-   		reg_val = PUMA7_ROHM_LPM_CFG_FAST_STANDBY;
+   		reg_val = puma7_rohm_lpm_sb & 0xFF;
    		break;
       case PUMA7_ROHM_PMIC_MODE_DEEP_STANDBY:
-         reg_val = PUMA7_ROHM_LPM_CFG_DEEP_STANDBY;
+         reg_val = puma7_rohm_lpm_dsb & 0xFF;
          break;
       default:
          return -EINVAL;
@@ -144,6 +156,8 @@ static int puma7_rohm_pmic_set_lpm_mode(struct regulator_dev *rdev,
    ret_val = puma7_rohm_pmic_write(pmic, PUMA7_ROHM_PMIC_LPMCTRL_REG, reg_val);
    if(ret_val < 0) {
       dev_err(&pmic->client->dev, "puma7_rohm_pmic_write error! %s\n", __func__);
+   } else {
+      pmic->mode = mode;
    }
    
    return ret_val;
@@ -152,29 +166,8 @@ static int puma7_rohm_pmic_set_lpm_mode(struct regulator_dev *rdev,
 static unsigned int puma7_rohm_pmic_get_lpm_mode(struct regulator_dev *rdev)
 {
    struct puma7_rohm_pmic *pmic = rdev_get_drvdata(rdev);
-   s32 ret_val;
-   unsigned int mode = 0;
    
-   ret_val = puma7_rohm_pmic_read(pmic, PUMA7_ROHM_PMIC_LPMCTRL_REG);
-   if(ret_val < 0) {
-      dev_err(&pmic->client->dev, "puma7_rohm_pmic_write error! %s\n", __func__);
-   } else {
-   	switch (ret_val) {
-      	case PUMA7_ROHM_LPM_CFG_BBU:
-      		mode = PUMA7_ROHM_PMIC_MODE_BBU;
-      		break;
-      	case PUMA7_ROHM_LPM_CFG_FAST_STANDBY:
-      		mode = PUMA7_ROHM_PMIC_MODE_FAST_STANDBY;
-      		break;
-         case PUMA7_ROHM_LPM_CFG_DEEP_STANDBY:
-            mode = PUMA7_ROHM_PMIC_MODE_DEEP_STANDBY;
-            break;
-         default:
-            mode = PUMA7_ROHM_PMIC_MODE_ACTIVE;
-   	}
-   }
-   
-   return mode;
+   return pmic->mode;
 }
 
 
@@ -395,7 +388,8 @@ static int puma7_rohm_regulator_probe(struct i2c_client *client,
 
    pmic->client = client;
    pmic->handle = ACPI_HANDLE(dev);
-
+   pmic->mode = PUMA7_ROHM_PMIC_MODE_ACTIVE;
+   
    rdev = pmic->rdev;
    pdata = &(pmic->platform_data);
 
diff --git a/include/linux/regulator/int34d9-regulator.h b/include/linux/regulator/int34d9-regulator.h
index 461e13d..1d8fea4 100644
--- a/include/linux/regulator/int34d9-regulator.h
+++ b/include/linux/regulator/int34d9-regulator.h
@@ -103,13 +103,14 @@ struct puma7_rohm_platform_data {
  * struct puma7_rohm_pmic - Puma7 Rohm PMIC device
  * @client: points to i2c slave PMIC device
  * @handle: handle to the ACPI PMIC device
- * @pathname: name in ACPI namespace
+ * @mode: Low power mode
  * @platform_data: platform data for PUMA7 ROHM PMIC
  * @rdev: points to regulator device within PMIC
  */
 struct puma7_rohm_pmic {
    struct i2c_client *client;
    acpi_handle handle;
+   int mode;
    struct puma7_rohm_platform_data platform_data;
    struct regulator_dev *rdev[];
 };
-- 
2.10.1

