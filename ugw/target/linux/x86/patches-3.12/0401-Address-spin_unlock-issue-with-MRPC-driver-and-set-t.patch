From f07a6aff318d1e0eeef68ddbbca04d2784fd6dc1 Mon Sep 17 00:00:00 2001
From: avelayux <arunkumar.velayutham@intel.com>
Date: Thu, 26 May 2016 20:09:17 -0700
Subject: [PATCH 401/639] Address spin_unlock issue with MRPC driver and set
 the conntrack MRPC timeout to be setup default Owner: Arunkumar Velayutham
 Added Tomer's MRPC patch to address the spin_unlock issue Set conntrack MRPC
 timeout value to default 200ms.

---
 drivers/mrpc/core/conntrack_client.c | 2 +-
 drivers/mrpc/core/hil_cmds_client.c  | 1 -
 drivers/mrpc/core/mrpc.c             | 4 +++-
 net/netfilter/nf_conntrack_core.c    | 3 +--
 4 files changed, 5 insertions(+), 5 deletions(-)

diff --git a/drivers/mrpc/core/conntrack_client.c b/drivers/mrpc/core/conntrack_client.c
index 53dabf8..2f551ca 100644
--- a/drivers/mrpc/core/conntrack_client.c
+++ b/drivers/mrpc/core/conntrack_client.c
@@ -138,7 +138,7 @@ static inline int ct_mrpc_call(__u8 procid, struct mrpc_conntrack_tuple_info *ct
    }
 
    ret = mrpc_call(priv->mrpc, procid, ct_tuple_info, sizeof(*ct_tuple_info),
-                   reply, sizeof(*reply), 60000, &errcode);
+                   reply, sizeof(*reply),2000, &errcode);
 
    if (ret || errcode) {
       pr_err("CONNTRACK_MRPC_CLIENT: ERROR: ret=%d, errcode=%d",ret, errcode);
diff --git a/drivers/mrpc/core/hil_cmds_client.c b/drivers/mrpc/core/hil_cmds_client.c
index 79a80a2..3cf3d71 100644
--- a/drivers/mrpc/core/hil_cmds_client.c
+++ b/drivers/mrpc/core/hil_cmds_client.c
@@ -110,7 +110,6 @@ static inline int hil_cmds_mrpc_call(__u8 procid, struct hil_cmds_args *args)
 static ssize_t hil_write_cmds(struct file *file, const char *buffer, size_t count, loff_t *data)
 {
    struct hil_cmds_args ti_pp_cmds;
-
    memset(&ti_pp_cmds.pp_cmd,0,CMD_LEN);
 
    if (count > CMD_LEN) {
diff --git a/drivers/mrpc/core/mrpc.c b/drivers/mrpc/core/mrpc.c
index ca65ab2..f95a611b 100644
--- a/drivers/mrpc/core/mrpc.c
+++ b/drivers/mrpc/core/mrpc.c
@@ -676,6 +676,8 @@ int mrpc_call(struct mrpc_client *c, __u8 proc, void *arg,
 		pr_err("[C%d (%s)] time out waiting for proc %d [cookie=0x%08x]",
 			c->id, c->name, proc, ntohl(c->req.cookie));
 		ret = -ETIMEDOUT;
+		memset(&c->req, 0, sizeof(c->req));
+		spin_unlock(&c->spinlock);
 		goto out_err;
 	}
     }
@@ -704,9 +706,9 @@ int mrpc_call(struct mrpc_client *c, __u8 proc, void *arg,
 
     kfree(c->rep);
     c->rep = NULL;
+    spin_unlock(&c->spinlock);
 out_err:
     memset(&c->req, 0, sizeof(c->req));
-    spin_unlock(&c->spinlock);
     mutex_unlock(&c->lock);
     kfree(hdr);
     DBG("[C%d (%s)] call proc %d done (ret=%d, errcode=%d)",
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 8e547ad..fae9e0a 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -1395,8 +1395,7 @@ EXPORT_SYMBOL_GPL(nf_ct_free_hashtable);
 void nf_conntrack_flush_report(struct net *net, u32 portid, int report)
 {
         /* nf_conntrack_flush_report invoked to trigger NPCPU ct flush. */
-        /* disable this event for now untill we get the ARM side changes enabled */
-//        nf_conn_info_event(TI_NPCPU_CONNTRACK_FLUSH,(void *)NULL);
+        nf_conn_info_event(TI_NPCPU_CONNTRACK_FLUSH,(void *)NULL);
 	nf_ct_iterate_cleanup(net, kill_all, NULL, portid, report);
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_flush_report);
-- 
2.10.1

