From 2ef077a086cb646bb7e9534f87a1272c3cea5829 Mon Sep 17 00:00:00 2001
From: Andrei Danaila <andrei.danaila@intel.com>
Date: Thu, 26 May 2016 14:06:39 -0700
Subject: [PATCH 405/639] kernel: arch: x86: Port Puma6 code to Puma7

Port Puma6 kernel core code to Puma 7.

Change-Id: I033498006d92b58a9e6908723eea3751c335ff5c
Signed-off-by: Andrei Danaila <andrei.danaila@intel.com>
---
 arch/x86/kernel/early_printk.c | 13 +++++++++++++
 arch/x86/kernel/hpet.c         | 12 ++++++++++++
 arch/x86/kernel/reboot.c       | 44 +++++++++++++++++++++++++++++++++++++++++-
 arch/x86/kernel/setup.c        | 23 +++++++++++++++++++++-
 arch/x86/kernel/tsc.c          | 34 ++++++++++++++++++++++++++++++++
 5 files changed, 124 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kernel/early_printk.c b/arch/x86/kernel/early_printk.c
index 38ca398..9ddb90e 100644
--- a/arch/x86/kernel/early_printk.c
+++ b/arch/x86/kernel/early_printk.c
@@ -18,6 +18,11 @@
 #include <asm/pgtable.h>
 #include <linux/usb/ehci_def.h>
 
+#ifdef CONFIG_ARCH_GEN3
+#include <asm/mrst.h>
+#include <asm/serial.h>
+#endif
+
 /* Simple VGA output */
 #define VGABASE		(__ISA_IO_base + 0xb8000)
 
@@ -146,7 +151,11 @@ static __init void early_serial_init(char *s)
 	outb(0x3, early_serial_base + LCR);	/* 8n1 */
 	outb(0, early_serial_base + IER);	/* no interrupt */
 	outb(0, early_serial_base + FCR);	/* no fifo */
+#ifdef CONFIG_ARCH_GEN3
+	outb(0x0, early_serial_base + MCR);	/* DTR + RTS */
+#else
 	outb(0x3, early_serial_base + MCR);	/* DTR + RTS */
+#endif
 
 	if (*s) {
 		baud = simple_strtoul(s, &e, 0);
@@ -154,7 +163,11 @@ static __init void early_serial_init(char *s)
 			baud = DEFAULT_BAUD;
 	}
 
+#ifdef CONFIG_ARCH_GEN3
+	divisor = BASE_BAUD/baud;
+#else
 	divisor = 115200 / baud;
+#endif
 	c = inb(early_serial_base + LCR);
 	outb(c | DLAB, early_serial_base + LCR);
 	outb(divisor & 0xff, early_serial_base + DLL);
diff --git a/arch/x86/kernel/hpet.c b/arch/x86/kernel/hpet.c
index da85a8e..431abff 100644
--- a/arch/x86/kernel/hpet.c
+++ b/arch/x86/kernel/hpet.c
@@ -282,8 +282,20 @@ static void hpet_resume_counter(struct clocksource *cs)
 	hpet_resume_device();
 	hpet_restart_counter();
 }
+#ifdef CONFIG_ARCH_GEN3
+void hpet_disable_legacy_int(void)
+{
+        unsigned int cfg = hpet_readl(HPET_CFG);
+
+        cfg &= ~HPET_CFG_LEGACY;
+        hpet_writel(cfg, HPET_CFG);
+        hpet_legacy_int_enabled = 0;
+}
 
+void hpet_enable_legacy_int(void)
+#else
 static void hpet_enable_legacy_int(void)
+#endif
 {
 	unsigned int cfg = hpet_readl(HPET_CFG);
 
diff --git a/arch/x86/kernel/reboot.c b/arch/x86/kernel/reboot.c
index 8134735..94f21384 100644
--- a/arch/x86/kernel/reboot.c
+++ b/arch/x86/kernel/reboot.c
@@ -28,6 +28,10 @@
 #include <linux/mc146818rtc.h>
 #include <asm/realmode.h>
 #include <asm/x86_init.h>
+#ifdef CONFIG_ARCH_GEN3
+#include <linux/pci.h>
+#include <linux/punit_reboot_sync.h>
+#endif
 
 /*
  * Power off function, if any
@@ -504,6 +508,11 @@ static void native_machine_emergency_restart(void)
 	int attempt = 0;
 	int orig_reboot_type = reboot_type;
 	unsigned short mode;
+#ifdef CONFIG_ARCH_GEN3
+        int id;
+        intelce_get_soc_info(&id, NULL);
+#endif
+
 
 	if (reboot_emergency)
 		emergency_vmx_disable_all();
@@ -521,9 +530,28 @@ static void native_machine_emergency_restart(void)
 			mach_reboot_fixups(); /* For board specific fixups */
 
 			for (i = 0; i < 10; i++) {
+/*
+ * The following code is for Intel Media SOC Gen3 base support.
+*/
+#ifdef CONFIG_ARCH_GEN3
+/*
+ * Intel Media SOC Gen3 uses this specific method to reboot.
+*/
+				switch (id) {
+					case CE2600_SOC_DEVICE_ID:
+						/* Trigger cold boot for "reboot" linux command for CE2600 platform */
+						p_unit_reset_soc();
+					break;
+					default:
+						outb(0x2, 0xcf9);
+					break;
+				}
+#else
 				kb_wait();
 				udelay(50);
-				outb(0xfe, 0x64); /* Pulse reset low */
+				outb(0xfe, 0x64); /* pulse reset low */
+#endif
+
 				udelay(50);
 			}
 			if (attempt == 0 && orig_reboot_type == BOOT_ACPI) {
@@ -634,6 +662,19 @@ static void native_machine_halt(void)
 
 static void native_machine_power_off(void)
 {
+/*
+ * The following code is for Intel Media SOC Gen3 base support.
+*/
+#ifdef CONFIG_ARCH_GEN3
+/*
+ * Intel Media SOC Gen3 uses this specific way to power off.
+*/
+	machine_shutdown();
+	while(1) {
+		outb(0x4, 0xcf9);
+		udelay(50);
+	}
+#else
 	if (pm_power_off) {
 		if (!reboot_force)
 			machine_shutdown();
@@ -641,6 +682,7 @@ static void native_machine_power_off(void)
 	}
 	/* A fallback in case there is no PM info available */
 	tboot_shutdown(TB_SHUTDOWN_HALT);
+#endif
 }
 
 struct machine_ops machine_ops = {
diff --git a/arch/x86/kernel/setup.c b/arch/x86/kernel/setup.c
index 158c475..b81d19c 100644
--- a/arch/x86/kernel/setup.c
+++ b/arch/x86/kernel/setup.c
@@ -111,6 +111,10 @@
 #include <asm/alternative.h>
 #include <asm/prom.h>
 
+#ifdef CONFIG_ARCH_GEN3
+extern int set_gmac_phy_mode(uint32_t phy_mode);
+#endif
+
 /*
  * max_low_pfn_mapped: highest direct mapped pfn under 4GB
  * max_pfn_mapped:     highest direct mapped pfn over 4GB
@@ -431,13 +435,14 @@ static void __init parse_setup_data(void)
 	pa_data = boot_params.hdr.setup_data;
 	while (pa_data) {
 		u32 data_len, map_len, data_type;
-
+                u32 data_at_addr;
 		map_len = max(PAGE_SIZE - (pa_data & ~PAGE_MASK),
 			      (u64)sizeof(struct setup_data));
 		data = early_memremap(pa_data, map_len);
 		data_len = data->len + sizeof(struct setup_data);
 		data_type = data->type;
 		pa_next = data->next;
+                data_at_addr = readl(data->data);
 		early_iounmap(data, map_len);
 
 		switch (data_type) {
@@ -447,6 +452,22 @@ static void __init parse_setup_data(void)
 		case SETUP_DTB:
 			add_dtb(pa_data);
 			break;
+#ifdef CONFIG_ARCH_GEN3
+		case SETUP_BOARD_TYPE:
+			intelce_set_board_type(data_at_addr);
+			break;
+#ifdef CONFIG_E1000
+		case SETUP_GMAC_PHY_MODE:
+			set_gmac_phy_mode(data_at_addr);
+			break;
+#endif
+		case SETUP_BOARD_REV:
+			intelce_set_board_rev(data_at_addr);
+			break;
+        case SETUP_FLASH_LAYOUT_TABLE:
+            intelce_set_flash_layout_table(pa_data, data_len);
+            break;
+#endif
 		default:
 			break;
 		}
diff --git a/arch/x86/kernel/tsc.c b/arch/x86/kernel/tsc.c
index b407658..95c75ca 100644
--- a/arch/x86/kernel/tsc.c
+++ b/arch/x86/kernel/tsc.c
@@ -230,6 +230,39 @@ static unsigned long pit_calibrate_tsc(u32 latch, unsigned long ms, int loopmin)
 	pitcnt = 0;
 	tscmax = 0;
 	tscmin = ULONG_MAX;
+#ifdef CONFIG_ARCH_GEN3
+/*
+ * The following code is for Intel Media SOC Gen3 B0 and B1 workaround.
+*/
+
+/*
+ * The 8254 timer flop has an issue between the reset and set pin of a flop.
+ * This causes a race condition to happen and the value can change based on
+ * clock sku. The workaround for this silicon issue uses a polling method which
+ * is not affected by race condition. If this workaround is not applied, then the
+ * cpu MHz entry in /proc/cpuinfo may show the wrong information. This workaround
+ * is for errata number 22 in Errata - A Step.
+*/
+
+	u8 count1;
+	u8 count2;
+	outb(0x80, 0x43);
+	count1 = inb(0x42);
+	count2 = inb(0x42);
+	while (count1 >= 0x20 || count2 != 0) {
+		t2 = get_cycles();
+		delta = t2 - tsc;
+		tsc = t2;
+		if ((unsigned long) delta < tscmin)
+			tscmin = (unsigned int) delta;
+		if ((unsigned long) delta > tscmax)
+			tscmax = (unsigned int) delta;
+		pitcnt++;
+		outb(0x80, 0x43);
+		count1 = inb(0x42);
+		count2 = inb(0x42);
+	}
+#else
 	while ((inb(0x61) & 0x20) == 0) {
 		t2 = get_cycles();
 		delta = t2 - tsc;
@@ -240,6 +273,7 @@ static unsigned long pit_calibrate_tsc(u32 latch, unsigned long ms, int loopmin)
 			tscmax = (unsigned int) delta;
 		pitcnt++;
 	}
+#endif
 
 	/*
 	 * Sanity checks:
-- 
2.10.1

