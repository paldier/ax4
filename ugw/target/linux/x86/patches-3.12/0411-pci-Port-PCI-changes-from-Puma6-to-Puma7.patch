From ffb1c0d46b7119d92e96d84a290afa31d70fab21 Mon Sep 17 00:00:00 2001
From: Andrei Danaila <andrei.danaila@intel.com>
Date: Thu, 2 Jun 2016 17:05:51 -0700
Subject: [PATCH 411/639] pci: Port PCI changes from Puma6 to Puma7

Port changes to the PCI driver framework from Puma6 to Puma7.

Change-Id: I011bfa7095873806e39cf7fa092e022d14320fdc
Signed-off-by: Andrei Danaila <andrei.danaila@intel.com>
---
 drivers/pci/Makefile            |   1 +
 drivers/pci/pci-driver.c        |   7 ++
 drivers/pci/pci-intelce_pm.c    | 166 ++++++++++++++++++++++++++++++++++++++++
 drivers/pci/pci.c               |  34 ++++++++
 drivers/pci/pcie/portdrv.h      |   3 +
 drivers/pci/pcie/portdrv_core.c |  18 +++++
 drivers/pci/pcie/portdrv_pci.c  |   4 +
 drivers/pci/probe.c             |   2 +
 8 files changed, 235 insertions(+)
 create mode 100644 drivers/pci/pci-intelce_pm.c

diff --git a/drivers/pci/Makefile b/drivers/pci/Makefile
index 6ebf5bf..6cbb587 100644
--- a/drivers/pci/Makefile
+++ b/drivers/pci/Makefile
@@ -5,6 +5,7 @@
 obj-y		+= access.o bus.o probe.o host-bridge.o remove.o pci.o \
 			pci-driver.o search.o pci-sysfs.o rom.o setup-res.o \
 			irq.o vpd.o setup-bus.o
+obj-$(CONFIG_X86_PUMA6) += pci-intelce_pm.o
 obj-$(CONFIG_PROC_FS) += proc.o
 obj-$(CONFIG_SYSFS) += slot.o
 
diff --git a/drivers/pci/pci-driver.c b/drivers/pci/pci-driver.c
index 150170b..dcc8b99 100644
--- a/drivers/pci/pci-driver.c
+++ b/drivers/pci/pci-driver.c
@@ -560,6 +560,10 @@ static void pci_pm_default_resume(struct pci_dev *pci_dev)
 static void pci_pm_default_suspend(struct pci_dev *pci_dev)
 {
 	/* Disable non-bridge devices without PM support */
+#ifdef CONFIG_ARCH_GEN3
+	if (!pci_dev->state_saved)
+		pci_save_state(pci_dev);
+#endif
 	if (!pci_is_bridge(pci_dev))
 		pci_disable_enabled_device(pci_dev);
 }
@@ -668,6 +672,9 @@ static int pci_pm_suspend_noirq(struct device *dev)
 		return pci_legacy_suspend_late(dev, PMSG_SUSPEND);
 
 	if (!pm) {
+#ifdef CONFIG_ARCH_GEN3
+		if (!pci_dev->state_saved)
+#endif
 		pci_save_state(pci_dev);
 		return 0;
 	}
diff --git a/drivers/pci/pci-intelce_pm.c b/drivers/pci/pci-intelce_pm.c
new file mode 100644
index 0000000..d8f24e9
--- /dev/null
+++ b/drivers/pci/pci-intelce_pm.c
@@ -0,0 +1,166 @@
+/*
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2010 - 2012 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+
+#include <linux/init.h>
+#include <linux/pci.h>
+#include <linux/module.h>
+#include <linux/semaphore.h>
+#include <linux/pci-intelce_pm.h>
+#include "../base/base.h"
+#include "pci.h"
+
+#ifdef CONFIG_PM
+extern int suspend_device(struct device *dev, pm_message_t state);
+extern int resume_device(struct device *dev, pm_message_t state);
+extern struct device *next_device(struct klist_iter *i);
+extern int async_error;
+
+static intel_pm_pci_ops_t external_pm_ops;
+
+static struct semaphore icepm_lock;
+
+#define CALL_EXTERNAL(rc, x, args...)                     \
+down(&icepm_lock);                                        \
+if (external_pm_ops.x) { rc = external_pm_ops.x(args); }  \
+up(&icepm_lock);
+
+static pci_power_t intel_pm_pci_choose_state(struct pci_dev *dev)
+{
+    pci_power_t rc = 0;
+    CALL_EXTERNAL(rc, choose_state, dev);
+	return rc;
+}
+
+static bool intel_pm_pci_power_manageable(struct pci_dev *dev)
+{
+    bool rc = true;
+    CALL_EXTERNAL(rc, is_manageable, dev);
+	return rc;
+}
+
+static int intel_pm_pci_set_power_state(struct pci_dev *dev, pci_power_t state)
+{
+    int rc = 0;
+    CALL_EXTERNAL(rc, set_state, dev, state);
+	return rc;
+}
+
+
+static int intel_pm_pci_sleep_wake(struct pci_dev *dev, bool enable)
+{
+    int rc = 0;
+    CALL_EXTERNAL(rc, sleep_wake, dev, enable);
+	return rc;
+}
+
+static struct pci_platform_pm_ops pci_pm =
+{
+	.is_manageable = intel_pm_pci_power_manageable,
+	.set_state     = intel_pm_pci_set_power_state,
+	.choose_state  = intel_pm_pci_choose_state,
+	.sleep_wake    = intel_pm_pci_sleep_wake,
+};
+
+
+static int __init intel_pm_pci_init(void)
+{
+    memset(&external_pm_ops, 0x0, sizeof(intel_pm_pci_ops_t));
+
+    sema_init(&icepm_lock, 1);
+
+	pci_set_platform_pm(&pci_pm);
+	return 0;
+}
+
+
+void intel_pm_register_callback(intel_pm_pci_ops_t * ops)
+{
+    down(&icepm_lock);
+    if (ops == NULL)
+    {
+        memset(&external_pm_ops, 0x0, sizeof(intel_pm_pci_ops_t));
+    }
+    else
+    {
+        memcpy(&external_pm_ops, ops, sizeof(intel_pm_pci_ops_t));
+    }
+    up(&icepm_lock);
+}
+
+EXPORT_SYMBOL(intel_pm_register_callback);
+
+arch_initcall_sync(intel_pm_pci_init);
+
+void clear_async_error(void)
+{
+	async_error = 0;
+}
+EXPORT_SYMBOL(clear_async_error);
+
+int suspend_devices_rooted(struct device *root, pm_message_t state)
+{
+       struct klist_iter i;
+       struct device *child;
+       int error = 0;
+       if (!root->p)
+	return 0;
+
+       klist_iter_init(&root->p->klist_children, &i);
+       while ((child = next_device(&i)) && !error)
+               error = suspend_devices_rooted(child, state);
+       klist_iter_exit(&i);
+
+       if(error)
+               return error;
+       return suspend_device(root, state);
+}
+
+EXPORT_SYMBOL(suspend_devices_rooted);
+
+
+int resume_devices_rooted(struct device *root, pm_message_t state)
+{
+       struct klist_iter i;
+       struct device *child;
+       int error =0;
+       error = resume_device(root, state);
+       if(error)
+               return error;
+
+       if (!root->p)
+	return 0;
+       klist_iter_init(&root->p->klist_children, &i);
+       while ((child = next_device(&i)) && !error)
+               error = resume_devices_rooted(child, state);
+       klist_iter_exit(&i);
+
+       return error;
+}
+
+EXPORT_SYMBOL(resume_devices_rooted);
+
+#endif
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 1e480a8..1e5b789 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -786,6 +786,15 @@ int pci_set_power_state(struct pci_dev *dev, pci_power_t state)
 	return error;
 }
 
+#ifdef CONFIG_ARCH_GEN3
+static int pci_pmcap_exception(struct pci_dev *dev)
+{
+       if((dev->vendor == 0x8086) && (dev->device == 0x070b))
+               return 1;
+       return 0;
+}
+#endif
+
 /**
  * pci_choose_state - Choose the power state of a PCI device
  * @dev: PCI device to be suspended
@@ -800,8 +809,13 @@ pci_power_t pci_choose_state(struct pci_dev *dev, pm_message_t state)
 {
 	pci_power_t ret;
 
+#ifdef CONFIG_ARCH_GEN3
+       if ((!pci_pmcap_exception(dev)) && (!dev->pm_cap))
+               return PCI_D0;
+#else
 	if (!dev->pm_cap)
 		return PCI_D0;
+#endif
 
 	ret = platform_pci_choose_state(dev);
 	if (ret != PCI_POWER_ERROR)
@@ -1778,6 +1792,26 @@ pci_power_t pci_target_state(struct pci_dev *dev)
 {
 	pci_power_t target_state = PCI_D3hot;
 
+#ifdef CONFIG_ARCH_GEN3
+	unsigned int id;
+	intelce_get_soc_info(&id, NULL);
+
+	if (CE2600_SOC_DEVICE_ID == id) {
+		if (((PCI_VENDOR_ID_INTEL == dev->vendor) && (CE2600_SOC_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (PCI_DEVICE_ID_AVM_B1 == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_EMMC_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_SFLASH_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_GPIO_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_CP_TOP_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_DOCSIS_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_DOCSIS_DMA_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_L2_SWITCH_PCI_DEVICE_ID == dev->device)) ||
+			((PCI_VENDOR_ID_INTEL == dev->vendor) && (INTELCE_HWMUTEX_PCI_DEVICE_ID == dev->device))) {
+			return PCI_D0;
+		}
+	}
+#endif
+
 	if (platform_pci_power_manageable(dev)) {
 		/*
 		 * Call the platform to choose the target state of the device
diff --git a/drivers/pci/pcie/portdrv.h b/drivers/pci/pcie/portdrv.h
index d2eb80a..22f93f9 100644
--- a/drivers/pci/pcie/portdrv.h
+++ b/drivers/pci/pcie/portdrv.h
@@ -23,6 +23,9 @@
 extern struct bus_type pcie_port_bus_type;
 int pcie_port_device_register(struct pci_dev *dev);
 #ifdef CONFIG_PM
+#ifdef CONFIG_ARCH_GEN3
+int pcie_portdrv_restore_config(struct pci_dev *dev);
+#endif
 int pcie_port_device_suspend(struct device *dev);
 int pcie_port_device_resume(struct device *dev);
 #endif
diff --git a/drivers/pci/pcie/portdrv_core.c b/drivers/pci/pcie/portdrv_core.c
index 31063ac..ee0e26b 100644
--- a/drivers/pci/pcie/portdrv_core.c
+++ b/drivers/pci/pcie/portdrv_core.c
@@ -425,7 +425,19 @@ static int suspend_iter(struct device *dev, void *data)
  */
 int pcie_port_device_suspend(struct device *dev)
 {
+#ifdef CONFIG_ARCH_GEN3
+	int ret;
+	struct pci_dev *pdev = to_pci_dev(dev);
+	ret = device_for_each_child(dev, NULL, suspend_iter);
+	if (!ret)
+		ret = pci_save_state(pdev);
+	pci_disable_device(pdev);
+	pci_set_power_state(pdev, PCI_D3hot);
+	return ret;
+#else
 	return device_for_each_child(dev, NULL, suspend_iter);
+#endif
+
 }
 
 static int resume_iter(struct device *dev, void *data)
@@ -447,6 +459,12 @@ static int resume_iter(struct device *dev, void *data)
  */
 int pcie_port_device_resume(struct device *dev)
 {
+#ifdef CONFIG_ARCH_GEN3
+	struct pci_dev *pdev = to_pci_dev(dev);
+	pci_set_power_state(pdev, PCI_D0);
+	pci_restore_state(pdev);
+	pcie_portdrv_restore_config(pdev);
+#endif
 	return device_for_each_child(dev, NULL, resume_iter);
 }
 #endif /* PM */
diff --git a/drivers/pci/pcie/portdrv_pci.c b/drivers/pci/pcie/portdrv_pci.c
index a174614..f3d51f2 100644
--- a/drivers/pci/pcie/portdrv_pci.c
+++ b/drivers/pci/pcie/portdrv_pci.c
@@ -67,7 +67,11 @@ void pcie_clear_root_pme_status(struct pci_dev *dev)
 	pcie_capability_set_dword(dev, PCI_EXP_RTSTA, PCI_EXP_RTSTA_PME);
 }
 
+#ifdef CONFIG_ARCH_GEN3
+int pcie_portdrv_restore_config(struct pci_dev *dev)
+#else
 static int pcie_portdrv_restore_config(struct pci_dev *dev)
+#endif
 {
 	int retval;
 
diff --git a/drivers/pci/probe.c b/drivers/pci/probe.c
index 5137990..4a6b6045 100644
--- a/drivers/pci/probe.c
+++ b/drivers/pci/probe.c
@@ -180,6 +180,7 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 
 	mask = type ? PCI_ROM_ADDRESS_MASK : ~0;
 
+#ifndef CONFIG_ARCH_GEN3
 	/* No printks while decoding is disabled! */
 	if (!dev->mmio_always_on) {
 		pci_read_config_word(dev, PCI_COMMAND, &orig_cmd);
@@ -189,6 +190,7 @@ int __pci_read_base(struct pci_dev *dev, enum pci_bar_type type,
 		}
 	}
 
+#endif
 	res->name = pci_name(dev);
 
 	pci_read_config_dword(dev, pos, &l);
-- 
2.10.1

