From 325ddb9999fea3267c3e8aa4024ea87bf4809ca4 Mon Sep 17 00:00:00 2001
From: Pawan Gupta <pawan.kumarx.gupta@intel.com>
Date: Wed, 15 Jun 2016 15:33:09 -0700
Subject: [PATCH 421/639] include: Merge Puma6 and Puma7

Bring Puma6 include/* changes to Puma7 branch.

Signed-off-by: Pawan Gupta <pawan.kumarx.gupta@intel.com>
---
 include/linux/aep.h               | 171 ++++++++++++++++++++++++++++++++++++++
 include/linux/ce_mailbox.h        |  51 ++++++++++--
 include/linux/i2c.h               |   3 +
 include/linux/iosf_core.h         | 131 +++++++++++++++++++++++++++++
 include/linux/pci-intelce_pm.h    |  44 ++++++++++
 include/linux/punit_access.h      |  89 ++++++++++++++++++++
 include/linux/punit_reboot_sync.h |  38 +++++++++
 include/linux/serial_core.h       |   8 +-
 include/linux/serial_mfd.h        |  47 +++++++++++
 include/linux/spi/flash.h         |   5 ++
 include/linux/udma_api.h          | 148 +++++++++++++++++++++++++++++++++
 include/linux/udma_skb.h          |   9 ++
 12 files changed, 737 insertions(+), 7 deletions(-)
 create mode 100644 include/linux/aep.h
 create mode 100644 include/linux/iosf_core.h
 create mode 100644 include/linux/pci-intelce_pm.h
 create mode 100644 include/linux/punit_access.h
 create mode 100644 include/linux/punit_reboot_sync.h
 create mode 100644 include/linux/serial_mfd.h
 create mode 100644 include/linux/udma_api.h
 create mode 100644 include/linux/udma_skb.h

diff --git a/include/linux/aep.h b/include/linux/aep.h
new file mode 100644
index 0000000..a8d7a8e
--- /dev/null
+++ b/include/linux/aep.h
@@ -0,0 +1,171 @@
+/*
+* File Name: aep.h
+*/
+
+/*
+  This file is provided under a dual BSD/GPLv2 license.  When using or
+  redistributing this file, you may do so under either license.
+
+  GPL LICENSE SUMMARY
+
+  Copyright(c) 2007-2014 Intel Corporation. All rights reserved.
+
+  This program is free software; you can redistribute it and/or modify
+  it under the terms of version 2 of the GNU General Public License as
+  published by the Free Software Foundation.
+
+  This program is distributed in the hope that it will be useful, but
+  WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  General Public License for more details.
+
+  You should have received a copy of the GNU General Public License
+  along with this program; if not, write to the Free Software
+  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+  The full GNU General Public License is included in this distribution
+  in the file called LICENSE.GPL.
+
+  Contact Information:
+  Intel Corporation
+  2200 Mission College Blvd.
+  Santa Clara, CA  97052 
+
+*/
+#ifndef __AEP_H__
+#define __AEP_H__
+#include <linux/types.h>
+
+/**
+List of all AEP return codes
+*/
+typedef enum {
+   AEP_SUCCESS                              =  0,   
+   AEP_ERROR_OPERATION_FAILED               =  1,
+   AEP_ERROR_PCI_DEVICE_ACCESS              =  2, 
+   AEP_ERROR_PCI_DEVICE_NOT_FOUND           =  3, 
+   AEP_FAIL                                 =  4,
+   AEP_INVALID_INPUT                        =  5,
+   AEP_OUT_OF_MEMORY                        =  6, 
+   AEP_ERROR_ALREADY_INITIALIZED            =  7,
+   AEP_ERROR_FEATURE_NOT_IMPLEMENTED        =  8,
+   AEP_ERROR_INVALID_PARAMETER              =  9,
+   AEP_ERROR_NOT_ENABLED                    =  10,
+   AEP_ERROR_NULL_POINTER                   = 25,
+   AEP_ERROR_INVALID_REQUEST                = 26,
+   AEP_ERROR_OUT_OF_RANGE                   = 27,
+   AEP_ERROR_NOT_DONE                       = 28,
+   AEP_ERROR_SUSPENDED                      = 29, /* Low-power state */
+   AEP_ERROR_NO_RESOURCES                    = 30,
+   
+   AEP_LAST_NORMAL_ERROR_MARKER,
+
+   AEP_ERROR_UNSPECIFIED                    = 99
+} aep_result_t;
+
+/* 
+ * Read from GPIO register .
+ * 
+ * aep_gpio_read(unsigned int reg_offset, unsigned int* value)
+ *
+ * Description:
+ *  This API is used to read GPIO register when the AEP is active.
+ *
+ * Precondition:
+ *  AEP must be active
+ *
+ * Parameters:
+ *  reg_offset   - GPIO  register offset to read from.
+ *  value        - [output], the read value.
+ *
+ * Return:
+ *  0 on Success, <0 on error.
+ */   
+
+aep_result_t aep_gpio_read( uint32_t gpio_address_offset, uint32_t* reg_value);
+
+/* 
+ * Write to GPIO register.
+ * 
+ * int aep_gpio_write(unsigned int reg_offset, unsigned int bit num, unsigned int value)
+ *
+ * Description:
+ *  This API is used to write to a GPIO register when the AEP is active.
+ *
+ * Precondition:
+ *  AEP must be active
+ *
+ * Parameters:
+ *  reg_offset   - GPIO  register offset to read from.
+ *  bit num        - The mask or bit num where value needs to be updated
+ *  config         - Value to be written
+ *
+ * Return:
+ *  0 on Success, <0 on error.
+ */
+aep_result_t aep_gpio_write( uint32_t gpio_address_offset, uint32_t bit_num, uint32_t gpio_config);
+
+/* 
+ * Write to GPIO register.
+
+ * 
+ * int aep_gpio_write(unsigned int reg_offset, unsigned int bit num, unsigned int value)
+ *
+ * Description:
+ *  This API is used to write to a GPIO register when the AEP is active.
+
+ *
+ * Precondition:
+ *  AEP must be active
+ *
+ * Parameters:
+
+ *  reg_offset   - GPIO  register offset to read from.
+ *  bit num        - The mask or bit num where value needs to be updated
+ *  config         - Value to be written
+ *
+ * Return:
+ *  0 on Success, <0 on error.
+ */
+aep_result_t aep_gpio_write_no_lock( uint32_t gpio_address_offset, uint32_t bit_num, uint32_t gpio_config);
+
+
+/* 
+ * Get AEP F/W Version.
+ * 
+ * int aep_get_fw(void)
+ *
+ * Description:
+ *  This API is used to read the AEP F/W version 
+ *
+ * Precondition:
+ *  This API can be used only if the AEP is active.
+ *
+ * Parameters:
+ *  None.
+ *
+ * Return:
+ *  AEP F/W version
+ */
+
+aep_result_t aep_get_fw(uint32_t* fw_ver);
+
+/*
+* Get AEP status
+* bool aep_is_active()
+*
+* @brief The API returns if AEP is active on platform
+
+* Parameters:
+*  None.
+*
+* Return:
+* true if active otherwise false
+*/
+bool aep_is_active(void);
+
+#endif
+
+
+
+
+
diff --git a/include/linux/ce_mailbox.h b/include/linux/ce_mailbox.h
index b1373a2..8efcd6d 100644
--- a/include/linux/ce_mailbox.h
+++ b/include/linux/ce_mailbox.h
@@ -103,11 +103,52 @@ enum appcpu_mbx_event_id
     APPCPU_EVENT_EMMC_ADVANCE_EXIT   = 0x0004
 };
 
-#define        MBX_MODULE_ID 1
-#define        MBX_SEND_EVENT_CMD           _IOW(MBX_MODULE_ID, 1, struct npcpu_appcpu_mbx_user )
-#define        MBX_GET_EVENT_CMD            _IOR(MBX_MODULE_ID, 2, struct npcpu_appcpu_mbx_user )
+#define MBX_MODULE_ID 1
+#define	MBX_SEND_EVENT_CMD           _IOW(MBX_MODULE_ID, 1, struct npcpu_appcpu_mbx_user )
+#define	MBX_GET_EVENT_CMD            _IOR(MBX_MODULE_ID, 2, struct npcpu_appcpu_mbx_user )
 
-#define MBX_IOC_MAXNR  3
+#ifdef CONFIG_X86_PUMA6
+#define	MBX_SEND_ACK_CMD             _IOW(MBX_MODULE_ID, 3,struct npcpu_appcpu_mbx_user )
+#define	MBX_RECEIVE_ACK_CMD          _IOR(MBX_MODULE_ID, 4,struct npcpu_appcpu_mbx_user )
+#define	MBX_REBOOT_EVENT_CMD          _IO(MBX_MODULE_ID, 5)
 
+#define MBX_IOC_MAXNR	5
+
+/* ATOM to DOCSIS interrupts */
+#define BOOTCFG_REG_SW_INT_SET      (0x00000138)
+#define BOOTCFG_REG_SW_INT_CLR      (0x0000013C)
+#define BOOTCFG_REG_SW_INT_STAT     (0x00000140)
+#define BOOTCFG_REG_SW_INT_ATOM_2_ARM11_INTC_MASK       be32_to_cpu(0x0000FFFF)
+#define BOOTCFG_REG_SW_INT_ATOM_2_ARM11_INTC_REBOOT_ISR be32_to_cpu(0x00000001)
+#define BOOTCFG_REG_SW_INT_ATOM_2_PP_COE_PrxPDSP_MASK   be32_to_cpu(0x00FF0000)
+#define BOOTCFG_REG_SW_INT_ATOM_2_PP_COE_MASK          be32_to_cpu(0xFF000000)
+
+/* DOCSIS to ATOM/PUnit interrupts */
+#define BOOTCFG_REG_SW_INT1_STAT    (0x00000164)
+#define BOOTCFG_REG_SW_INT1_SET     (0x00000168)
+#define BOOTCFG_REG_SW_INT1_CLR     (0x0000016C)
+#define BOOTCFG_REG_SW_INT1_ARM11_2_PUNIT_MASK     be32_to_cpu(0x000000FF)
+#define BOOTCFG_REG_SW_INT1_ARM11_2_PUNIT_ISR      be32_to_cpu(0x00000001)
+#define BOOTCFG_REG_SW_INT1_PP_2_PUNIT_MASK         be32_to_cpu(0x00000300)
+#define BOOTCFG_REG_SW_INT1_ARM11_2_ATOM_MASK       be32_to_cpu(0xFFFF0000)
+#define BOOTCFG_REG_SW_INT1_ARM11_2_ATOM_REBOOT_ISR be32_to_cpu(0x00010000)
+
+
+
+#ifdef __KERNEL__
+
+long npcpu_appcpu_mbx_receive_event_notification(unsigned short eventId, unsigned int *param);
+long npcpu_appcpu_mbx_receive_specific_ack(unsigned short eventId);
+long npcpu_appcpu_mbx_send_ack(unsigned short eventID);
+long npcpu_appcpu_mbx_send_notification(unsigned short eventID, unsigned int *paramPtr);
+void npcpu_bootcfg_ctrl_write_reg(uint32_t regOffset, uint32_t regVal);
+uint32_t npcpu_bootcfg_ctrl_read_reg(uint32_t regOffset);
+
+#endif
+
+#else
+#define MBX_IOC_MAXNR	3
 long npcpu_appcpu_mbx_receive_specific_callback();
-#endif /* _NPCPU_APPCPU_MBX_H_ */
+#endif /* CONFIG_X86_PUMA6 */
+
+#endif /* _NPCPU_APPCPU_MBX_H_ */
\ No newline at end of file
diff --git a/include/linux/i2c.h b/include/linux/i2c.h
index 5677fb5..0eff429 100644
--- a/include/linux/i2c.h
+++ b/include/linux/i2c.h
@@ -421,6 +421,9 @@ struct i2c_adapter {
 
 	int timeout;			/* in jiffies */
 	int retries;
+#ifdef CONFIG_GEN3_I2C
+        unsigned int mode;
+#endif
 	struct device dev;		/* the adapter device */
 
 	int nr;
diff --git a/include/linux/iosf_core.h b/include/linux/iosf_core.h
new file mode 100644
index 0000000..4ab2b8d
--- /dev/null
+++ b/include/linux/iosf_core.h
@@ -0,0 +1,131 @@
+/*
+#
+#  This file is provided under a dual BSD/GPLv2 license.  When using or
+#  redistributing this file, you may do so under either license.
+#
+#  GPL LICENSE SUMMARY
+#
+#  Copyright(c) 2010-2012 Intel Corporation. All rights reserved.
+#
+#  This program is free software; you can redistribute it and/or modify
+#  it under the terms of version 2 of the GNU General Public License as
+#  published by the Free Software Foundation.
+#
+#  This program is distributed in the hope that it will be useful, but
+#  WITHOUT ANY WARRANTY; without even the implied warranty of
+#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+#  General Public License for more details.
+#
+#  You should have received a copy of the GNU General Public License
+#  along with this program; if not, write to the Free Software
+#  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+#  The full GNU General Public License is included in this distribution
+#  in the file called LICENSE.GPL.
+#
+#  Contact Information:
+#  intel.com
+#  Intel Corporation
+#  2200 Mission College Blvd.
+#  Santa Clara, CA  95052
+#  USA
+#  (408) 765-8080
+#
+#
+#  BSD LICENSE
+#
+#  Copyright(c) 2010-2012 Intel Corporation. All rights reserved.
+#  All rights reserved.
+#
+#  Redistribution and use in source and binary forms, with or without
+#  modification, are permitted provided that the following conditions
+#  are met:
+#
+#    * Redistributions of source code must retain the above copyright
+#      notice, this list of conditions and the following disclaimer.
+#    * Redistributions in binary form must reproduce the above copyright
+#      notice, this list of conditions and the following disclaimer in
+#      the documentation and/or other materials provided with the
+#      distribution.
+#    * Neither the name of Intel Corporation nor the names of its
+#      contributors may be used to endorse or promote products derived
+#      from this software without specific prior written permission.
+#
+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+#
+#*/
+/*------------------------------------------------------------------------------
+ * File Name:iosf_core.h
+ * Driver for  IOSF(Intel On chip System Fabric)
+ *------------------------------------------------------------------------------
+ */
+#ifndef _LINUX_DRIVER_IOSF_CORE_H
+#define _LINUX_DRIVER_IOSF_CORE_H
+
+#define DEBUG
+#ifdef DEBUG
+#define iosf_dbg(fmt, args...) do \
+    { \
+	            printk(KERN_INFO fmt, ##args); \
+	    } while(0)
+#else
+#define iosf_dbg(fmt, arg...) do { } while (0)
+#endif
+
+
+struct iosf_host {
+	struct list_head list;
+	uint32_t bus_id;
+	struct module *owner;
+	atomic_t users;
+	int (*port_is_valid)(struct iosf_host *host, uint8_t dest_port);
+	int (*msg_opcode_is_valid)(struct iosf_host *host, uint8_t opcode);
+	int (*msg_data_opcode_is_valid)(struct iosf_host *host, uint8_t opcode);
+	int (*reg_read32)(struct iosf_host *host, uint8_t dest_port, uint32_t offset, uint32_t *value);
+	int (*reg_write32)(struct iosf_host *host, uint8_t dest_port,uint32_t offset, uint32_t value);
+	int (*reg_modify)(struct iosf_host *host, uint8_t dest_port, uint32_t offset, uint32_t mask, uint32_t value);
+	int (*msg)(struct iosf_host *host, uint8_t dest_port, uint8_t opcode);
+	int (*msg_data)(struct iosf_host *host, uint8_t dest_port, uint8_t opcode, uint32_t data);
+
+};
+
+// OPCODE Definitions:
+#define IOSF_OPCODE_CRRd            0x06
+#define IOSF_OPCODE_CRWr            0x07
+#define IOSF_OPCODE_RegRd 	 		0x10
+#define IOSF_OPCODE_RegWr			0x11
+
+#define IOSF_OPCODE_0_RegRd 	    0x0
+#define IOSF_OPCODE_1_RegWr			0x1
+
+#define IOSF_OPCODE_4_RegRd 	    0x4
+#define IOSF_OPCODE_5_RegWr			0x5
+
+#define IOSF_OPCODE_2_RegRd 	    0x2
+#define IOSF_OPCODE_3_RegWr			0x3
+
+
+int iosf_register(struct iosf_host *host);
+int iosf_unregister(struct iosf_host *host);
+
+struct iosf_host *iosf_request(uint32_t bus_id);
+void iosf_release(struct iosf_host *host);
+
+
+int kiosf_reg_read32(struct iosf_host *host, uint8_t dest_port, uint32_t offset, uint32_t *value);
+int kiosf_reg_write32(struct iosf_host *host, uint8_t dest_port, uint32_t offset, uint32_t value);
+int kiosf_reg_modify(struct iosf_host *host, uint8_t dest_port, uint32_t offset, uint32_t mask, uint32_t value);
+int kiosf_msg(struct iosf_host *host, uint8_t dest_port, uint8_t opcode);
+int kiosf_msg_data(struct iosf_host *host, uint8_t dest_port, uint8_t opcode, uint32_t data);
+
+
+#endif /* __LINUX_DRIVER_IOSF_CORE_H */
diff --git a/include/linux/pci-intelce_pm.h b/include/linux/pci-intelce_pm.h
new file mode 100644
index 0000000..adc42f2
--- /dev/null
+++ b/include/linux/pci-intelce_pm.h
@@ -0,0 +1,44 @@
+/*
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2010 - 2012 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+
+#ifndef __PCI_INTELCE_PM_H__
+#define __PCI_INTELCE_PM_H__
+
+typedef struct intel_pm_pci_ops_t
+{
+	bool        (*is_manageable)(struct pci_dev *dev);
+	int         (*set_state)    (struct pci_dev *dev, pci_power_t state);
+	pci_power_t (*choose_state) (struct pci_dev *dev);
+	int         (*sleep_wake)   (struct pci_dev *dev, bool enable);
+} intel_pm_pci_ops_t;
+
+void intel_pm_register_callback(intel_pm_pci_ops_t * ops);
+extern int suspend_devices_rooted(struct device *root, pm_message_t state);
+extern int resume_devices_rooted(struct device *root, pm_message_t state);
+extern void clear_async_error(void);
+
+#endif
diff --git a/include/linux/punit_access.h b/include/linux/punit_access.h
new file mode 100644
index 0000000..1d47eac
--- /dev/null
+++ b/include/linux/punit_access.h
@@ -0,0 +1,89 @@
+/*
+ *  include/linux/punit_access.h
+ *
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2013 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+
+#ifndef _PUNIT_ACCESS_H
+#define _PUNIT_ACCESS_H
+
+#define P_UNIT_CMD_TYPE_IPC         (0x0 << 8)
+#define P_UNIT_CMD_TYPE_BBU         (0x1 << 8)
+#define P_UNIT_CMD_TYPE_WATCHDOG    (0x2 << 8)
+#define P_UNIT_CMD_TYPE_RESET       (0x3 << 8)
+#define P_UNIT_CMD_DATA_ATTACHED    (0x1 << 14)
+#define P_UNIT_CMD_DATA_EXPECTED    (0x1 << 15)
+
+#define P_UNIT_CMD_RESET_GET_LAST_RESET_CAUSE                   (P_UNIT_CMD_TYPE_RESET | 0x04 | P_UNIT_CMD_DATA_EXPECTED) // Returns the last reset cause indicated by firmware. If a hardware reset(not under firmware control) occurs the state indicated here is a "cold boot"
+#define P_UNIT_CMD_RESET_CLR_LAST_RESET_CAUSE                   (P_UNIT_CMD_TYPE_RESET | 0x05)
+
+#define P_UNIT_CMD_RESET_SET_WARM_RESET_ON_BUTTON               (P_UNIT_CMD_TYPE_RESET | 0x08) // When set, on a reset button press the firmware will start the warm reset sequence (warm reset by default)
+#define P_UNIT_CMD_RESET_SET_COLD_RESET_ON_BUTTON               (P_UNIT_CMD_TYPE_RESET | 0x09) // When set, on a reset button press the firmware will start the cold reset sequence (warm reset by default)
+
+#define P_UNIT_CMD_RESET_EN_ATOM_RESET_INDICATION               (P_UNIT_CMD_TYPE_RESET | 0x0C | P_UNIT_CMD_DATA_ATTACHED) // When enabled, if a reset request is sent to Punit firmware, an IPC will be sent to ATOM to inform it a reset will occur. Data Sent: 0 = Disable (default), 1 = Enable
+#define P_UNIT_CMD_RESET_ATOM_RESET_INDICATION_ACK              (P_UNIT_CMD_TYPE_RESET | 0x11) // After receiving the IPC of a reset request, the ATOM should respond with this ACK IPC when it gives the firmware the OK to continue with the reset.
+#define P_UNIT_CMD_RESET_ATOM_RESET_INDICATION_ACK_TIMEOUT      (P_UNIT_CMD_TYPE_RESET | 0x14 | P_UNIT_CMD_DATA_ATTACHED) // Set the timeout time in milliseconds for the ATOM to ack, if this time expires the reset sequence will proceed without an ack. Unit is in milliseconds (valid range: 0-60,000 milliseconds) (default 2,000  milliseconds)
+#define P_UNIT_CMD_RESET_ATOM_RESET_INDICATION                  (P_UNIT_CMD_TYPE_RESET | 0x10 | P_UNIT_CMD_DATA_ATTACHED) // If a reset request is sent to firmware and if enabled this IPC will be sent to ATOM to inform it a reset will occur.
+
+#define P_UNIT_CMD_WATCHDOG_DISABLE_PUNIT_WDT             (P_UNIT_CMD_TYPE_WATCHDOG | 0x0)
+#define P_UNIT_CMD_WATCHDOG_ENABLE_PUNIT_WDT              (P_UNIT_CMD_TYPE_WATCHDOG | 0x1)
+#define P_UNIT_CMD_WATCHDOG_REQUEST_PING_PUNIT_WDT        (P_UNIT_CMD_TYPE_WATCHDOG | 0x2)
+#define P_UNIT_CMD_WATCHDOG_REQUEST_PUNIT_WDT_TIMEOUT     (P_UNIT_CMD_TYPE_WATCHDOG | 0x3)
+#define P_UNIT_CMD_WATCHDOG_DO_COLD_RESET                 (P_UNIT_CMD_TYPE_WATCHDOG | 0x4)
+#define P_UNIT_CMD_WATCHDOG_DO_WARM_RESET                 (P_UNIT_CMD_TYPE_WATCHDOG | 0x5)
+#define P_UNIT_CMD_WATCHDOG_DO_CPU_RESET                  (P_UNIT_CMD_TYPE_WATCHDOG | 0x6)
+#define P_UNIT_CMD_WATCHDOG_DO_NOTHING                    (P_UNIT_CMD_TYPE_WATCHDOG | 0x7)
+
+#define P_UNIT_CMD_BBU_ENTER_BBU_MODE  (P_UNIT_CMD_TYPE_BBU | 0x00)
+#define P_UNIT_CMD_BBU_EXIT_BBU_MODE  (P_UNIT_CMD_TYPE_BBU | 0x02)//initiat from 8051 to ATOM
+#define P_UNIT_CMD_BBU_DISABLE_RTC_ALARM_BBU_EXIT  (P_UNIT_CMD_TYPE_BBU | 0x10)
+#define P_UNIT_CMD_BBU_ENABLE_RTC_ALARM_BBU_EXIT  (P_UNIT_CMD_TYPE_BBU | 0x11)
+
+/* ioctl interfaces */
+struct punit_cmd
+{
+        unsigned int command;
+        unsigned int data;
+};
+#define SOC_P_UNIT_MODULE_ID                    (0xDA)
+#define P_UNIT_CMD           _IOR  (SOC_P_UNIT_MODULE_ID, 1, struct punit_cmd) // if no data needed, assign field data 0
+#define P_UNIT_CMD_WR_DATA   _IOR (SOC_P_UNIT_MODULE_ID, 2, struct punit_cmd)
+#define P_UNIT_CMD_RD_DATA   _IOWR (SOC_P_UNIT_MODULE_ID, 3, struct punit_cmd)
+
+#ifdef __KERNEL__
+/* kernel module export interfaces */
+extern uint32_t  punit_reset_event;
+extern int p_unit_access_avaiable(void);
+extern void p_unit_acquire_lock(void);
+extern void p_unit_release_lock(void);
+extern int p_unit_get_FwVersion(unsigned int *fw_version);
+extern int p_unit_get_flag(uint32_t *flag);
+extern int p_unit_cmd(unsigned int command);
+extern int p_unit_cmd_wr_data(unsigned int  command, unsigned int  data);
+extern int p_unit_cmd_rd_data(unsigned int command, unsigned int *data);
+#endif
+
+#endif  /* _PUNIT_ACCESS_H */
diff --git a/include/linux/punit_reboot_sync.h b/include/linux/punit_reboot_sync.h
new file mode 100644
index 0000000..cbe4b65
--- /dev/null
+++ b/include/linux/punit_reboot_sync.h
@@ -0,0 +1,38 @@
+/*
+ *  include/linux/punit_reboot_sync.h
+ *
+ *  GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2013 Intel Corporation. All rights reserved.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *    Intel Corporation
+ *    2200 Mission College Blvd.
+ *    Santa Clara, CA  97052
+ *
+ */
+
+#ifndef _PUNIT_REBOOT_SYNC_H
+#define _PUNIT_REBOOT_SYNC_H
+
+#ifdef __KERNEL__
+int p_unit_reset_soc( void );
+uint32_t reset_from_punit( void );
+#endif
+
+#endif  /* _PUNIT_REBOOT_SYNC_H */
diff --git a/include/linux/serial_core.h b/include/linux/serial_core.h
index 318f629..68faf63 100644
--- a/include/linux/serial_core.h
+++ b/include/linux/serial_core.h
@@ -67,7 +67,9 @@ struct uart_ops {
 	void		(*pm)(struct uart_port *, unsigned int state,
 			      unsigned int oldstate);
 	void		(*wake_peer)(struct uart_port *);
-
+#ifdef CONFIG_X86_PUMA6
+	int		(*set_wake)(struct uart_port *, unsigned int state);
+#endif
 	/*
 	 * Return a string describing the type of the port
 	 */
@@ -142,7 +144,9 @@ struct uart_port {
 #define UPIO_MEM32		(3)
 #define UPIO_AU			(4)			/* Au1x00 and RT288x type IO */
 #define UPIO_TSI		(5)			/* Tsi108/109 type IO */
-
+#ifdef CONFIG_X86_PUMA6
+#define UPIO_DWAPB		(6)
+#endif
 	unsigned int		read_status_mask;	/* driver specific */
 	unsigned int		ignore_status_mask;	/* driver specific */
 	struct uart_state	*state;			/* pointer to parent state */
diff --git a/include/linux/serial_mfd.h b/include/linux/serial_mfd.h
new file mode 100644
index 0000000..2b071e0
--- /dev/null
+++ b/include/linux/serial_mfd.h
@@ -0,0 +1,47 @@
+#ifndef _SERIAL_MFD_H_
+#define _SERIAL_MFD_H_
+
+/* HW register offset definition */
+#define UART_FOR	0x08
+#define UART_PS		0x0C
+#define UART_MUL	0x0D
+#define UART_DIV	0x0E
+
+#define HSU_GBL_IEN	0x0
+#define HSU_GBL_IST	0x4
+
+#define HSU_GBL_INT_BIT_PORT0	0x0
+#define HSU_GBL_INT_BIT_PORT1	0x1
+#define HSU_GBL_INT_BIT_PORT2	0x2
+#define HSU_GBL_INT_BIT_IRI	0x3
+#define HSU_GBL_INT_BIT_HDLC	0x4
+#define HSU_GBL_INT_BIT_DMA	0x5
+
+#define HSU_GBL_ISR	0x8
+#define HSU_GBL_DMASR	0x400
+#define HSU_GBL_DMAISR	0x404
+
+#define HSU_PORT_REG_OFFSET	0x80
+#define HSU_PORT0_REG_OFFSET	0x80
+#define HSU_PORT1_REG_OFFSET	0x100
+#define HSU_PORT2_REG_OFFSET	0x180
+#define HSU_PORT_REG_LENGTH	0x80
+
+#define HSU_DMA_CHANS_REG_OFFSET	0x500
+#define HSU_DMA_CHANS_REG_LENGTH	0x40
+
+#define HSU_CH_SR		0x0	/* channel status reg */
+#define HSU_CH_CR		0x4	/* control reg */
+#define HSU_CH_DCR		0x8	/* descriptor control reg */
+#define HSU_CH_BSR		0x10	/* max fifo buffer size reg */
+#define HSU_CH_MOTSR		0x14	/* minimum ocp transfer size */
+#define HSU_CH_D0SAR		0x20	/* desc 0 start addr */
+#define HSU_CH_D0TSR		0x24	/* desc 0 transfer size */
+#define HSU_CH_D1SAR		0x28
+#define HSU_CH_D1TSR		0x2C
+#define HSU_CH_D2SAR		0x30
+#define HSU_CH_D2TSR		0x34
+#define HSU_CH_D3SAR		0x38
+#define HSU_CH_D3TSR		0x3C
+
+#endif
diff --git a/include/linux/spi/flash.h b/include/linux/spi/flash.h
index 3f22932..5b12320 100644
--- a/include/linux/spi/flash.h
+++ b/include/linux/spi/flash.h
@@ -3,6 +3,11 @@
 
 struct mtd_partition;
 
+/* Device info for each chip select */
+struct flash_cs_info{
+        unsigned int cs0_size;          /* flash size in cs0 */
+        unsigned int cs1_size;          /* chip size in cs1   */
+};
 /**
  * struct flash_platform_data: board-specific flash data
  * @name: optional flash device name (eg, as used with mtdparts=)
diff --git a/include/linux/udma_api.h b/include/linux/udma_api.h
new file mode 100644
index 0000000..2708360
--- /dev/null
+++ b/include/linux/udma_api.h
@@ -0,0 +1,148 @@
+#ifndef UDMA_API_H
+#define UDMA_API_H
+
+#include <linux/netdevice.h>
+
+/*There're two UDMA ports belong to APPCPU */
+#define UDMA_PORT_NUM_TOTAL 2
+
+typedef enum {
+	UDMA_BURST_SZ_4_BYTES = 0,
+	UDMA_BURST_SZ_8_BYTES,
+	UDMA_BURST_SZ_16_BYTES,
+	UDMA_BURST_SZ_32_BYTES,
+	UDMA_BURST_SZ_64_BYTES,
+	UDMA_BURST_SZ_128_BYTES
+} udma_burstsz_t;
+static const udma_burstsz_t udma_to_l2_burstsz_dft = UDMA_BURST_SZ_64_BYTES;
+static const udma_burstsz_t l2_to_udma_burstsz_dft = UDMA_BURST_SZ_64_BYTES;
+
+typedef enum {
+	UDMA_GAP_VAL_0_CLKS = 0,
+	UDMA_GAP_VAL_16_CLKS,
+	UDMA_GAP_VAL_64_CLKS,
+	UDMA_GAP_VAL_256_CLKS,
+	UDMA_GAP_VAL_1024_CLKS,
+	UDMA_GAP_VAL_2048_CLKS,
+	UDMA_GAP_VAL_4096_CLKS,
+	UDMA_GAP_VAL_8192_CLKS
+} udma_gapval_t;
+static const udma_gapval_t udma_to_l2_gap_dft = UDMA_GAP_VAL_64_CLKS;
+static const udma_gapval_t l2_to_udma_gap_dft = UDMA_GAP_VAL_0_CLKS;
+
+typedef enum {
+        UDMA_OK            = 0x0, /**< 0x0 */
+		UDMA_BUSY				, /* UDMA is busy to response */
+		UDMA_ERR				, /* UDMA error */
+		UDMA_FULL 				, /* The input queue is full to receive new buffers */
+		UDMA_EMPTY				, /* The input queue is full to receive new buffers */
+		UDMA_INVALID_PARAM		, /* Invalid param */
+		UDMA_UNINITIALIZED		, /* UDMA uninitialized */
+		UDMA_NO_PERM			, /* UDMA is or going to be stopped that no permision for UDMA access */
+		UDMA_AGAIN				 /* Try again */
+} udma_result_t;
+
+typedef void (*rx_callback_t)(struct sk_buff *skb, struct net_device *netdev);
+
+/**  udma_xmit_skb - Transmit a packet via UDMA
+ * @param[in] port - udma port number, could be 0 or 1
+ * @param[in] skb  - the packet pointer to be send,
+ * the buffer will be freed by UDMA driver
+ * When UDMA is free, the packet is accepted by UDMA driver.
+ * When UDMA is BUSY, the UDMA driver will try for 16 times and finally free
+ * the skb buffer if UDMA is still BUSY.
+ * Note that the context is that of a softIRQ.
+ * Note that the customer driver does not need to free the skb pointer since
+ * it's covered by UDMA driver.
+ *
+ * return 0 on success, UDMA accept the packet.
+ * return others for failure.
+*/
+int udma_xmit_skb(unsigned char port, struct sk_buff *skb);
+
+
+/**  udma_send_packet - A buffer is used to send
+ * @port - udma port number, could be 0 or 1
+ * @buffer_desc - parameter to describe a coming buffer
+ *
+ * return 0 on success, UDMA driver took care of the buffer
+ * return others for failure
+*/
+int udma_send_packet(unsigned char port, struct sk_buff *skb);
+
+/**  udma_set_burstsize - seperately set the UDMA port tx/rx burst size
+ * @param[in] port - udma port number, could be 0 or 1
+ * @param[in] udma_to_l2_burstsize - this will translate into the number of
+ * bytes per udma to l2switch DMA bus transfer, the burst size should be choosen
+ * from udma_burstsz_t, other burtsize values would return failure.
+ * @param[in] l2_to_udma_burstsize - this will translate into the number of
+ * bytes per l2switch to udma DMA bus transfer, the burst size should be
+ * choosen from udma_burstsz_t, other burtsize values would return failure.
+ * Note that this function should be called before udma_register_handler to
+ * setup initial udma burst size, and can * be only called once in the
+ * initialization stage. And user can use only one of udma_set_burstsize or
+ * udma_set_burstsize_tx_rx to config the DMA burst size.
+ * If this function is not called, then the UDMA ports works in
+ * UDMA_BURST_SZ_64_BYTES mode by default.
+ *
+ * return 0, success.
+ * return others for failure.
+*/
+int udma_set_burstsize(uint8_t port, udma_burstsz_t udma_to_l2_burstsize,
+	udma_burstsz_t l2_to_udma_burstsize);
+
+/**  udma_set_gapval - seperately set the UDMA port tx and rx gap value.
+ * @param[in] port - udma port number, could be 0 or 1
+ * @param[in] udma_to_l2_gapval - this will translate into the udma to l2switch
+ * DMA stop clock cycles between burst, the gapval should be choosen from
+ * udma_gapval_t, other gap values would return failure.
+ * @param[in] l2_to_udma_gapval - this will translate into the l2switch to
+ * udma DMA stop clock cycles between burst, the gapval should be choosen from
+ * udma_gapval_t, other gap values would return failure.
+ * Note that this function should be called before udma_register_handler to
+ * setup initial udma gap value, and can  * be only called once in the
+ * initialization stage.
+ * If this function is not called, then the UDMA ports works in
+ * UDMA_GAP_VAL_0_CLKS mode when in l2switch to UDMA path and
+ * UDMA_GAP_VAL_64_CLKS when in UDMA to l2switch path.
+ *
+ * return 0, success.
+ * return others for failure.
+*/
+int udma_set_gapval(uint8_t port, udma_gapval_t udma_to_l2_gapval,
+	udma_gapval_t l2_to_udma_gapval);
+
+/**  udma_give_free_buffer - Give a free buffer to UDMA driver, the buffer will
+ * be used for packet receive.
+ * @port - udma port number, could be 0 or 1
+ * @buffer_desc - parameter to describe a coming buffer
+ *
+ * Note the upper layer should calls this functioin periodly to give enough
+ * free buffers to UDMA driver.
+ *
+ * return 0 on success, UDMA driver took care of the buffer.
+ * return others for failure.
+ * It's requried that the given Rx buffer size should be no smaller than 2KB
+ * due to silicon limitation.
+ */
+
+int udma_register_handler(unsigned char port, struct net_device *dev, rx_callback_t rx_handle);
+
+/**  udma_flush - Flush the pending requests in a UDMA port and recycling all
+ * of the buffers.
+ *
+ * UDMA driver will flush all of the pending Tx/Rx packets, updating the buffer
+ * status and return them to upper layer.
+ * The buffers may be already handled or still in a initial status
+ * The upper layer is expected to recycle the return buffers.
+ *
+ * @port - udma port number, could be 0 or 1
+ *
+ * This function is expected to be called by upper layer when exit
+ *
+ * return 0 on success, flush function succeed
+ * return others for failure
+*/
+void udma_flush(unsigned char  port);
+
+#endif /* UDMA_API_H */
diff --git a/include/linux/udma_skb.h b/include/linux/udma_skb.h
new file mode 100644
index 0000000..4317f08
--- /dev/null
+++ b/include/linux/udma_skb.h
@@ -0,0 +1,9 @@
+#ifndef UDMA_SKB_H
+#define UDMA_SKB_H
+
+#include <linux/netdevice.h>
+#include <linux/udma_api.h>
+
+int udma_register(uint8_t port, struct net_device *netdev,rx_callback_t rx_callback);
+
+#endif
-- 
2.10.1

