From 2e1b9175035e7b6dbf1644a20bead7b21352e198 Mon Sep 17 00:00:00 2001
From: Vinay Patel <vinay.r.patel@intel.com>
Date: Thu, 9 Jun 2016 16:08:17 -0700
Subject: [PATCH 425/639] watchdog: ITCO new IOCTL

Intel watchdog driver ITCO modified to add new IOCTL to provide
the total alive duration.

Signed-off-by: Vinay Patel <vinay.r.patel@intel.com>
---
 drivers/watchdog/iTCO_wdt.c   | 78 ++++++++++++++++++++++++++++++++++++++-----
 include/uapi/linux/watchdog.h |  2 ++
 2 files changed, 71 insertions(+), 9 deletions(-)
 mode change 100755 => 100644 drivers/watchdog/iTCO_wdt.c

diff --git a/drivers/watchdog/iTCO_wdt.c b/drivers/watchdog/iTCO_wdt.c
old mode 100755
new mode 100644
index c17e09dd..a2b8af8
--- a/drivers/watchdog/iTCO_wdt.c
+++ b/drivers/watchdog/iTCO_wdt.c
@@ -88,6 +88,8 @@
 #define TCOv2_TMR	(TCOBASE + 0x12) /* TCOv2 Timer Initial Value	*/
 
 #define TCO1_CNT_OS_POLICY_MASK ((1<<20) | (1<<21))
+#define TCO_TVAL_MASK   0x3ff /* Current count of the timer mask */
+#define TCO_TVAL_RELOAD 0x1   /* Writing any value reloads the timer */
 
 /* internal variables */
 static struct {		/* this is private data for the iTCO_wdt device */
@@ -107,6 +109,8 @@ static struct {		/* this is private data for the iTCO_wdt device */
 	/* the PCI-device */
 	struct pci_dev *pdev;
 	bool started;
+	/* total alive time in seconds */
+	unsigned long alive_time;
 } iTCO_wdt_private;
 
 /* module parameters */
@@ -268,19 +272,30 @@ static int iTCO_wdt_stop(struct watchdog_device *wd_dev)
 
 static int iTCO_wdt_ping(struct watchdog_device *wd_dev)
 {
+	unsigned int time_left = 0;
+
 	spin_lock(&iTCO_wdt_private.io_lock);
 
 	iTCO_vendor_pre_keepalive(iTCO_wdt_private.smi_res, wd_dev->timeout);
 
-	/* Reload the timer by writing to the TCO Timer Counter register */
-	if (iTCO_wdt_private.iTCO_version >= 2) {
-		outw(0x01, TCO_RLD);
+	if (iTCO_wdt_private.iTCO_version >= 3) {
+		/* read the time left */
+		time_left = inw(TCO_RLD);
+		/* reload the timer */
+		outw(TCO_TVAL_RELOAD, TCO_RLD);
+		time_left &= TCO_TVAL_MASK;
+		iTCO_wdt_private.alive_time +=
+			(wd_dev->timeout - ticks_to_seconds(time_left));
+	} else if (iTCO_wdt_private.iTCO_version == 2) {
+		/* Reload the timer by writing to the TCO
+			Timer Counter register */
+		outw(TCO_TVAL_RELOAD, TCO_RLD);
 	} else if (iTCO_wdt_private.iTCO_version == 1) {
 		/* Reset the timeout status bit so that the timer
 		 * needs to count down twice again before rebooting */
 		outw(0x0008, TCO1_STS);	/* write 1 to clear bit */
 
-		outb(0x01, TCO_RLD);
+		outb(TCO_TVAL_RELOAD, TCO_RLD);
 	}
 
 	spin_unlock(&iTCO_wdt_private.io_lock);
@@ -365,6 +380,49 @@ static unsigned int iTCO_wdt_get_timeleft(struct watchdog_device *wd_dev)
 	return time_left;
 }
 
+static long iTCO_wdt_ioctl(struct watchdog_device *wd_dev, unsigned int cmd,
+				unsigned long arg)
+{
+	int ret = -ENOIOCTLCMD;
+	unsigned int time_left = 0;
+	unsigned long total_time_alive = 0;
+
+	switch (cmd) {
+	case WDIOC_GETALIVETIME: /* Get the total alive duration */
+		if (iTCO_wdt_private.iTCO_version >= 3) {
+			spin_lock(&iTCO_wdt_private.io_lock);
+			/* read the time left */
+			time_left = inw(TCO_RLD);
+			time_left &= TCO_TVAL_MASK;
+			total_time_alive = iTCO_wdt_private.alive_time +
+				(wd_dev->timeout - ticks_to_seconds(time_left));
+			spin_unlock(&iTCO_wdt_private.io_lock);
+			ret = put_user(total_time_alive,
+						(unsigned long __user *)arg);
+		}
+	break;
+	case WDIOC_PINGGETALIVETIME:
+		/* Ping the WD and get the total alive duration */
+		if (iTCO_wdt_private.iTCO_version >= 3) {
+			spin_lock(&iTCO_wdt_private.io_lock);
+			/* read the time left */
+			time_left = inw(TCO_RLD);
+			/* reload the timer */
+			outw(TCO_TVAL_RELOAD, TCO_RLD);
+			time_left &= TCO_TVAL_MASK;
+			total_time_alive = iTCO_wdt_private.alive_time +
+				(wd_dev->timeout - ticks_to_seconds(time_left));
+			iTCO_wdt_private.alive_time = total_time_alive;
+			spin_unlock(&iTCO_wdt_private.io_lock);
+			ret = put_user(total_time_alive,
+						(unsigned long __user *)arg);
+		}
+	break;
+	}
+
+	return ret;
+}
+
 /*
  *	Kernel Interfaces
  */
@@ -380,15 +438,16 @@ static const struct watchdog_info ident = {
 static const struct watchdog_ops iTCO_wdt_ops = {
 	.owner =		THIS_MODULE,
 	.start =		iTCO_wdt_start,
-	.stop = 		iTCO_wdt_stop,
-	.ping = 		iTCO_wdt_ping,
-	.set_timeout =		iTCO_wdt_set_timeout,
-	.get_timeleft =		iTCO_wdt_get_timeleft,
+	.stop =			iTCO_wdt_stop,
+	.ping =			iTCO_wdt_ping,
+	.set_timeout =	iTCO_wdt_set_timeout,
+	.get_timeleft =	iTCO_wdt_get_timeleft,
+	.ioctl =		iTCO_wdt_ioctl,
 };
 
 static struct watchdog_device iTCO_wdt_watchdog_dev = {
 	.info =		&ident,
-	.ops = 		&iTCO_wdt_ops,
+	.ops =		&iTCO_wdt_ops,
 };
 
 /*
@@ -442,6 +501,7 @@ static int iTCO_wdt_probe(struct platform_device *dev)
 	if (!iTCO_wdt_private.smi_res)
 		goto out;
 
+	iTCO_wdt_private.alive_time = 0;
 	iTCO_wdt_private.iTCO_version = ich_info->iTCO_version;
 	iTCO_wdt_private.dev = dev;
 	iTCO_wdt_private.pdev = to_pci_dev(dev->dev.parent);
diff --git a/include/uapi/linux/watchdog.h b/include/uapi/linux/watchdog.h
index 2babe72..3e9e7f8 100644
--- a/include/uapi/linux/watchdog.h
+++ b/include/uapi/linux/watchdog.h
@@ -31,6 +31,8 @@ struct watchdog_info {
 #define	WDIOC_SETPRETIMEOUT	_IOWR(WATCHDOG_IOCTL_BASE, 8, int)
 #define	WDIOC_GETPRETIMEOUT	_IOR(WATCHDOG_IOCTL_BASE, 9, int)
 #define	WDIOC_GETTIMELEFT	_IOR(WATCHDOG_IOCTL_BASE, 10, int)
+#define	WDIOC_GETALIVETIME  _IOR(WATCHDOG_IOCTL_BASE, 11, int)
+#define	WDIOC_PINGGETALIVETIME  _IOR(WATCHDOG_IOCTL_BASE, 12, int)
 
 #define	WDIOF_UNKNOWN		-1	/* Unknown flag error */
 #define	WDIOS_UNKNOWN		-1	/* Unknown status error */
-- 
2.10.1

