From e332bce9be46611b0787cad9a4dd2bbe3172253e Mon Sep 17 00:00:00 2001
From: "Vital Yep, Marco A" <marco.a.vital.yep@intel.com>
Date: Tue, 14 Jun 2016 16:06:18 -0700
Subject: [PATCH 427/639] Synopsys GMAC: Remove

Remove PGTEST

Signed-off-by: Vital Yep, Marco A <marco.a.vital.yep@intel.com>
---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c | 1251 +----------------------
 1 file changed, 1 insertion(+), 1250 deletions(-)

diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
index d82499d..d0c1b44 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
@@ -2044,1249 +2044,6 @@ static int config_ptpoffloading(int sockfd,
 	return ret;
 }
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-
-/* Initialize default parameters for Channel 0, 1 and 2.
- */
-static void DWC_ETH_QOS_init_default_pg(struct DWC_ETH_QOS_pg_user_input *pg_params)
-{
-	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
-	unsigned int qInx;
-	unsigned int bandwidth = 100/tx_queue_count;
-
-	/* duration of experiment is 5 Sec by default */
-	pg_params->duration_of_exp = 5;
-	pg_params->dma_ch_en = 1;
-
-	pg_params->ch_tx_rx_arb_scheme = 0;
-	pg_params->ch_use_tx_high_prio = 0;
-	pg_params->ch_tx_rx_prio_ratio = 0;
-	pg_params->dma_tx_arb_algo = eDWC_ETH_QOS_DMA_TX_WRR;
-	pg_params->queue_dcb_algorithm = eDWC_ETH_QOS_DCB_WRR;
-
-	pg_params->mac_lb_mode = 0; /* 0 => No MAC Loopback; 1 => MAC Loopback On */
-	pg_params->speed_100M_1G = 0;     /* This is valid only after receiving after the test  */
-
-	/* configure Channel qInx to DWC_ETH_QOS_QUEUE_CNT */
-	for (qInx = 0; qInx < tx_queue_count; qInx++) {
-		memset(&pg_user_ch_input[qInx], 0, sizeof(struct DWC_ETH_QOS_pg_user_ch_input));
-
-		pg_params->dma_ch_en |= (0x1 << qInx);
-		if (qInx == 0) {
-			pg_user_ch_input[qInx].ch_arb_weight = 0;
-			pg_user_ch_input[qInx].ch_fr_size = 1500;
-			pg_user_ch_input[qInx].ch_bw_alloc = bandwidth;
-
-			/* AVB can't be used on queue-0 */
-			pg_user_ch_input[qInx].ch_operating_mode = eDWC_ETH_QOS_QDCB;
-			pg_user_ch_input[qInx].ch_CreditControl = 0;
-
-			/* slot facility not available for 0
-			 * do not change below values */
-			pg_user_ch_input[qInx].ch_tx_desc_slot_no_start = 0;
-			pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip = 0;
-			pg_user_ch_input[qInx].ch_AvgBits = 0;
-			pg_user_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
-			pg_user_ch_input[qInx].ch_use_slot_no_check = 0;
-			pg_user_ch_input[qInx].ch_use_adv_slot_no_check = 0;
-			pg_user_ch_input[qInx].ch_slot_count_to_use = 0;
-
-			/* debug parameters */
-			pg_user_ch_input[qInx].ch_max_tx_frame_cnt = 255;
-			pg_user_ch_input[qInx].ch_debug_mode = 0;
-
-		} else {
-			pg_user_ch_input[qInx].ch_arb_weight = 0;
-			pg_user_ch_input[qInx].ch_fr_size = 1500;
-			pg_user_ch_input[qInx].ch_bw_alloc = bandwidth;
-
-			pg_user_ch_input[qInx].ch_operating_mode = eDWC_ETH_QOS_QDCB;
-			pg_user_ch_input[qInx].ch_CreditControl = 0;
-			pg_user_ch_input[qInx].ch_avb_algorithm = eDWC_ETH_QOS_AVB_CBS;
-
-			pg_user_ch_input[qInx].ch_tx_desc_slot_no_start = 0;
-			pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip = 0;
-			pg_user_ch_input[qInx].ch_AvgBits = 0;
-			pg_user_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
-			pg_user_ch_input[qInx].ch_use_slot_no_check = 0;
-			pg_user_ch_input[qInx].ch_use_adv_slot_no_check = 0;
-			pg_user_ch_input[qInx].ch_slot_count_to_use = 0;
-
-			/* debug parameters */
-			pg_user_ch_input[qInx].ch_max_tx_frame_cnt = 255;
-			pg_user_ch_input[qInx].ch_debug_mode = 0;
-		}
-	}
-}
-
-static void DWC_ETH_QOS_calculate_slope(struct DWC_ETH_QOS_PGStruct *pg_struct,
-		struct DWC_ETH_QOS_pg_ch_input *pg_ch_input, unsigned int qInx)
-{
-	unsigned int multiplier = 1;
-
-	if (connected_speed == SPEED_1000)
-		multiplier = 2;
-
-	pg_ch_input[qInx].ch_IdleSlope = get_idle_slope(pg_ch_input[qInx].ch_bw);
-	pg_ch_input[qInx].ch_SendSlope = get_send_slope(pg_ch_input[qInx].ch_bw);
-
-	pg_ch_input[qInx].ch_HiCredit = get_hi_credit(pg_ch_input[qInx].ch_bw);
-	pg_ch_input[qInx].ch_LoCredit = get_low_credit(pg_ch_input[qInx].ch_bw);
-
-	return;
-}
-
-static void DWC_ETH_QOS_calculate_queue_weight(struct DWC_ETH_QOS_PGStruct *pg_struct,
-		struct DWC_ETH_QOS_pg_ch_input *pg_ch_input,
-		unsigned int max_frame_size,
-		unsigned int qInx)
-{
-	pg_ch_input[qInx].ch_queue_weight =
-		DWC_ETH_QOS_get_dcb_queue_weights(pg_struct->queue_dcb_algorithm,
-			pg_ch_input[qInx].ch_bw, max_frame_size);
-
-	return;
-}
-
-/*
- * Copies Channel parameters from pg user struct to pg kernel struct.
- */
-static void DWC_ETH_QOS_populate_pg_struct(struct DWC_ETH_QOS_pg_user_input *pg_params,
-					struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	unsigned int qInx, channel_enable = 0, max_frame_size = 0;
-
-	pg_struct->ch_SelMask = pg_params->dma_ch_en;
-	pg_struct->DurationOfExp = pg_params->duration_of_exp;
-
-	pg_struct->PrioTagForAV = 5; /* Priority of Ch2 */
-
-	pg_struct->ch_tx_rx_arb_scheme = pg_params->ch_tx_rx_arb_scheme;
-	pg_struct->ch_use_tx_high_prio = pg_params->ch_use_tx_high_prio;
-	pg_struct->ch_tx_rx_prio_ratio = pg_params->ch_tx_rx_prio_ratio;
-	pg_struct->dma_tx_arb_algo = pg_params->dma_tx_arb_algo;
-	pg_struct->queue_dcb_algorithm = pg_params->queue_dcb_algorithm;
-	pg_struct->mac_lb_mode = pg_params->mac_lb_mode;
-
-	channel_enable = pg_params->dma_ch_en;
-	max_frame_size = pg_user_ch_input[0].ch_fr_size;
-	for (qInx = 0; qInx < tx_queue_count; qInx++) {
-		if (pg_user_ch_input[0].ch_fr_size > max_frame_size)
-			max_frame_size = pg_user_ch_input[0].ch_fr_size;
-	}
-
-	for (qInx = 0; qInx < tx_queue_count; qInx++) {
-		/* updating parameters only if channel is enabled */
-		if (channel_enable & (1 << qInx)) {
-			/* copy Channel qInx parameters */
-			pg_ch_input[qInx].ch_arb_weight = pg_user_ch_input[qInx].ch_arb_weight;
-			pg_ch_input[qInx].ch_bw = pg_user_ch_input[qInx].ch_bw_alloc;
-
-			DWC_ETH_QOS_calculate_queue_weight(pg_struct, pg_ch_input, max_frame_size, qInx);
-
-			pg_ch_input[qInx].ch_frame_size = pg_user_ch_input[qInx].ch_fr_size;
-			pg_ch_input[qInx].ch_debug_mode = pg_user_ch_input[qInx].ch_debug_mode;
-			pg_ch_input[qInx].ch_max_tx_frame_cnt = pg_user_ch_input[qInx].ch_max_tx_frame_cnt;
-			pg_ch_input[qInx].ch_operating_mode = pg_user_ch_input[qInx].ch_operating_mode;
-			pg_ch_input[qInx].ch_AvgBits = pg_user_ch_input[qInx].ch_AvgBits;
-			pg_ch_input[qInx].ch_AvgBits_interrupt_count =
-				pg_user_ch_input[qInx].ch_AvgBits_interrupt_count;
-
-			pg_ch_input[qInx].ch_avb_algorithm = pg_user_ch_input[qInx].ch_avb_algorithm;
-			pg_ch_input[qInx].ch_CreditControl = pg_user_ch_input[qInx].ch_CreditControl;
-
-			DWC_ETH_QOS_calculate_slope(pg_struct, pg_ch_input, qInx);
-
-			pg_ch_input[qInx].ch_EnableSlotCheck = pg_user_ch_input[qInx].ch_use_slot_no_check;
-			pg_ch_input[qInx].ch_EnableAdvSlotCheck = pg_user_ch_input[qInx].ch_use_adv_slot_no_check;
-			pg_ch_input[qInx].ch_SlotCount = pg_user_ch_input[qInx].ch_slot_count_to_use;
-			pg_ch_input[qInx].ch_tx_desc_slot_no_start = pg_user_ch_input[qInx].ch_tx_desc_slot_no_start;
-			pg_ch_input[qInx].ch_tx_desc_slot_no_skip = pg_user_ch_input[qInx].ch_tx_desc_slot_no_skip;
-
-			pg_ch_input[qInx].ch_FramecountTx = 0;
-			pg_ch_input[qInx].ch_FramecountRx = 0;
-		}
-		else {
-			pg_ch_input[qInx].ch_bw = 0;
-		}
-	}
-}
-
-static int DWC_ETH_QOS_send_pg_param_to_driver(int sockfd, char *ifname,
-						struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct ifreq ifr;
-	struct ifr_data_struct data;
-	int ret = 0;
-
-	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
-	data.cmd = DWC_ETH_QOS_PG_TEST;
-	data.flags = DWC_ETH_QOS_PG_SET_CONFIG;
-	data.ptr = pg_struct;
-	data.qInx = 0;
-
-	ifr.ifr_ifru.ifru_data = &data;
-
-	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
-	if (ret < 0)
-		printf("IOCTL Error\n");
-	else
-		printf
-		    ("Successfully configured PG parameters\n");
-
-	return ret;
-}
-
-static int DWC_ETH_QOS_config_hw_for_pg_test(int sockfd, char *ifname)
-{
-	struct ifreq ifr;
-	struct ifr_data_struct data;
-	int ret = 0;
-
-	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
-	data.cmd = DWC_ETH_QOS_PG_TEST;
-	data.flags = DWC_ETH_QOS_PG_CONFIG_HW;
-	data.ptr = NULL;
-	data.qInx = 0;
-
-	ifr.ifr_ifru.ifru_data = &data;
-
-	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
-	if (ret < 0)
-		printf("IOCTL Error\n");
-	else
-		printf
-		    ("Successfully configured the HW for Test\n");
-
-	return ret;
-}
-
-static int DWC_ETH_QOS_run_pg_test(int sockfd, char *ifname,
-				struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct ifreq ifr;
-	struct ifr_data_struct data;
-	int ret = 0;
-
-	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
-	data.cmd = DWC_ETH_QOS_PG_TEST;
-	data.flags = DWC_ETH_QOS_PG_RUN_TEST;
-	data.ptr = pg_struct;
-	data.qInx = 0;
-
-	ifr.ifr_ifru.ifru_data = &data;
-
-	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
-	if (ret < 0)
-		printf("IOCTL Error\n");
-	else
-		printf
-		    ("PG Test Started\n");
-
-	return ret;
-}
-
-static int DWC_ETH_QOS_check_test_done(int sockfd, char *ifname)
-{
-	struct ifreq ifr;
-	struct ifr_data_struct data;
-	int ret = 0;
-
-	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
-	data.cmd = DWC_ETH_QOS_PG_TEST;
-	data.flags = DWC_ETH_QOS_PG_TEST_DONE;
-	data.qInx = 0;
-
-	ifr.ifr_ifru.ifru_data = &data;
-
-	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
-	if (ret < 0)
-		printf("IOCTL Error\n");
-	else
-		ret = data.test_done;
-
-	return ret;
-}
-
-static int DWC_ETH_QOS_get_pg_result_from_hw(int sockfd, char *ifname,
-				struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct ifreq ifr;
-	struct ifr_data_struct data;
-	int ret = 0;
-
-	strcpy(ifr.ifr_ifrn.ifrn_name, ifname);
-	data.cmd = DWC_ETH_QOS_PG_TEST;
-	data.flags = DWC_ETH_QOS_PG_GET_RESULT;
-	data.ptr = pg_struct;
-	data.qInx = 0;
-
-	ifr.ifr_ifru.ifru_data = &data;
-
-	ret = ioctl(sockfd, DWC_ETH_QOS_PRV_IOCTL, &ifr);
-	if (ret < 0)
-		printf("IOCTL Error\n");
-	else
-		printf
-		    ("Successfully Retrieved PG Results\n");
-
-	return ret;
-}
-
-
-static void DWC_ETH_QOS_process_ch_params(struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input,
-					int user_input,
-					int ch_no)
-{
-	char user_string[10];
-
-	switch(user_input) {
-	case 00:
-		printf("(%d00) Channel %d Frame size in bytes (only payload)          : %04d\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_fr_size);
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input > 48) && (user_input <= 1500))
-			pg_user_ch_input[ch_no].ch_fr_size = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 01:
-		printf("(%d01) Channel %d Bandwidth Allocation                        : %02d%%\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_bw_alloc);
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input > 0) && (user_input <= 75))
-			pg_user_ch_input[ch_no].ch_bw_alloc = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 02:
-		printf("(%d02) Channel %d Enable Slot Number Check  <1/0>             : %s\n",
-			ch_no, ch_no,
-			(pg_user_ch_input[ch_no].ch_use_slot_no_check ? "YES" : "NO"));
-		printf("     [0 - Disable slot number check]\n");
-		printf("     [1 - Enable slot number check]\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 0) || (user_input == 1))
-			pg_user_ch_input[ch_no].ch_use_slot_no_check = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 03:
-		printf("(%d03) Channel %d Enabled advance Slot check <1/0>            : %s\n",
-			ch_no, ch_no,
-			(pg_user_ch_input[ch_no].ch_use_adv_slot_no_check ? "YES" : "NO"));
-		printf("     [0 - Disable advance slot number check]\n");
-		printf("     [1 - Enable advance slot number check]\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 0) || (user_input == 1))
-			pg_user_ch_input[ch_no].ch_use_adv_slot_no_check = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 04:
-		printf("(%d04) Channel %d Slot Counter for AVB Reporting <1/2/4/8/16> : %01d\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_slot_count_to_use);
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 1) || (user_input == 2) || (user_input == 4) ||
-		    (user_input == 8) || (user_input == 16))
-			pg_user_ch_input[ch_no].ch_slot_count_to_use = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 05:
-		printf("(%d05a) Channel %d AVB algorithm <0/1>         : %s\n",
-			ch_no, ch_no,
-			(pg_user_ch_input[ch_no].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
-			"Strict Priority" : "Credit Based Shaper"));
-		printf("     [0 - Strict Priority Algorithm]\n");
-		printf("     [1 - Credit Shaper Algorithm]\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 0) || (user_input == 1)) {
-			pg_user_ch_input[ch_no].ch_avb_algorithm = user_input;
-		}
-		else
-			printf("Invalid input\n");
-
-		printf("(%d05b) Channel %d Uses Credit Control <0/1>        : %s\n",
-			ch_no, ch_no,
-			(pg_user_ch_input[ch_no].ch_CreditControl ? "YES" : "NO"));
-		printf("     [0 - No Credit Control]\n");
-		printf("     [1 - Enforce Credit Control]\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 0) || (user_input == 1)) {
-			pg_user_ch_input[ch_no].ch_CreditControl = user_input;
-		}
-		else
-			printf("Invalid input\n");
-		break;
-	case 06:
-		printf("(%d06) Channel %d Tx Desc Starting Slot No <0 .. 15>          : %01x\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_tx_desc_slot_no_start);
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input >= 0) && (user_input <= 15))
-			pg_user_ch_input[ch_no].ch_tx_desc_slot_no_start = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 07:
-		printf("(%d07) Channel %d Tx Desc Slot No Skip count <0 .. 15>        : %01x\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_tx_desc_slot_no_skip);
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input >= 0) && (user_input <= 15))
-			pg_user_ch_input[ch_no].ch_tx_desc_slot_no_skip = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case  8:
-		printf("(%d08) Channel %d Arbitration Weight        <0,1,2,3,4,5,6,7> : %01x\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_arb_weight);
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input >= 0) && (user_input <= 7))
-			pg_user_ch_input[ch_no].ch_arb_weight = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 9:
-		printf("(%d09) Channel %d Operating mode                              : %01x\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_operating_mode);
-		printf("        <0-Not enabled, 1-AVB, 2-DCB, 3-Generic>\n");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input >= 0) && (user_input <= 3))
-			pg_user_ch_input[ch_no].ch_operating_mode = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 10:
-		printf("(%d10) Channel %d enable debug mode                          : %d\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_debug_mode);
-		printf("        <0 - disable debug mode, 1 - enable debug mode>\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if ((user_input == 0) || (user_input == 1))
-			pg_user_ch_input[ch_no].ch_debug_mode = user_input;
-		else
-			printf("Invalid input\n");
-		break;
-	case 11:
-		printf("(%d11) Channel %d maximum Tx packet count                   : %d\n",
-			ch_no, ch_no, pg_user_ch_input[ch_no].ch_max_tx_frame_cnt);
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		pg_user_ch_input[ch_no].ch_max_tx_frame_cnt = user_input;
-		break;
-	default:
-		printf("Invalid Option\n");
-	}
-}
-
-static void DWC_ETH_QOS_get_pg_params(struct DWC_ETH_QOS_pg_user_input *pg_params)
-{
-	struct DWC_ETH_QOS_pg_user_ch_input *pg_user_ch_input = pg_params->ch_input;
-	char user_string[10];
-	int user_input = 0;
-	int i;
-	int input_limit;
-
-	do {
-		system("clear");
-
-		printf("--------------------------------------------------\n");
-		printf("Select the Options Below:\n");
-		printf("--------------------------------------------------\n");
-
-		printf("(1000) Duration to run the Experiment(seconds)               : %02d\n\n",
-			pg_params->duration_of_exp);
-		printf("(1001) DMA Channel Enable                                    : %#02x\n\n",
-			pg_params->dma_ch_en);
-		printf("(1002) DMA Tx and Rx Priority Scheme(0/1)                    : %01d\n",
-			pg_params->ch_tx_rx_arb_scheme);
-		printf("     [0 - Weighted Round Robin, 1 - Fixed Priority]\n");
-		printf("(1003) DMA Tx has High Priority over Rx(0/1)                 : %01d\n",
-			pg_params->ch_use_tx_high_prio);
-		printf("     [0 - Rx has High Priority, 1 - Tx has High Priority]\n");
-		printf("(1004) DMA Tx and Rx Priority Ratio                          : %01d\n",
-			pg_params->ch_tx_rx_prio_ratio);
-		printf("     [Tx:Rx or Rx:Tx, 0=> 1:1, 1=>2:1, 2=>3:1, 3=>4:1\n"
-		       "                      4=> 5:1, 5=>6:1, 6=>7:1, 7=>8:1]\n");
-		printf("(1005) DMA Transmit Arbitration algorithm                    : %01d\n",
-				pg_params->dma_tx_arb_algo);
-		printf("     [0 - Fixed priority\n");
-		printf("      1 - WSP (Weighted strict priority)\n");
-		printf("      2 - WRR (Weighted Round Robin]\n");
-		printf("(1006) MTL DCB algorithm                                     : %01d\n",
-			pg_params->queue_dcb_algorithm);
-		printf("     [0 - WRR  (Weighted Round Robin)\n"
-		       "      1 - WFQ  (Weighted Fair Queuing)\n"
-		       "      2 - DWRR (Deficit Weighted Round Robin)\n"
-		       "      3 - SP   (Strict Priority)]\n");
-		printf("(1007) MAC Loop-Back Mode                                    : %01d\n",
-			pg_params->mac_lb_mode);
-		printf("     [0 - Disable MAC Loop-Back Mode \n"
-		       "      1 - Enable  MAC Loop-Back Mode ]\n");
-
-		for (i = 0; i < tx_queue_count; i++) {
-			printf("\n");
-			printf("(%d00) Channel %d Frame size in bytes (only payload)          : %04d\n",
-				i, i, pg_user_ch_input[i].ch_fr_size);
-			printf("(%d01) Channel %d Bandwidth Allocation                        : %02d%%\n",
-				i, i, pg_user_ch_input[i].ch_bw_alloc);
-			printf("(%d02) Channel %d Enable Slot Number Check                    : %s\n",
-				i, i, pg_user_ch_input[i].ch_use_slot_no_check ? "YES" : "NO");
-			printf("(%d03) Channel %d Enable advance Slot slot check              : %s\n",
-				i, i, (pg_user_ch_input[i].ch_use_adv_slot_no_check ? "YES" : "NO"));
-			printf("(%d04) Channel %d Slot Counter for AVB Reporting              : %01d\n",
-				i, i, pg_user_ch_input[i].ch_slot_count_to_use);
-			printf("(%d05) Channel %d AVB Algorithm                               : %s\n",
-				i, i, (pg_user_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
-				"Strict Priority" : "Credit Based Shaper"));
-			printf("       Channel %d Uses Credit Control(0/1)                    : %s\n",
-				i, (pg_user_ch_input[i].ch_CreditControl ? "YES" : "NO"));
-			printf("(%d06) Channel %d Tx Desc Starting Slot No <0 .. 15>          : %01x\n",
-				i, i, pg_user_ch_input[i].ch_tx_desc_slot_no_start);
-			printf("(%d07) Channel %d Tx Desc Slot No Skip count <0 .. 15>        : %01x\n",
-				i, i, pg_user_ch_input[i].ch_tx_desc_slot_no_skip);
-			printf("(%d08) Channel %d Arbitration Weight   <1,2,3,4,5,6,7,8>      : %01x\n",
-				i, i, pg_user_ch_input[i].ch_arb_weight);
-			printf("(%d09) Channel %d Operating mode                              : %01x\n",
-				i, i, pg_user_ch_input[i].ch_operating_mode);
-			printf("        <0-Not enabled, 1-AVB, 2-DCB, 3-Generic>\n");
-			printf("(%d10) Channel %d enable debug mode                           : %s\n",
-				i, i, (pg_user_ch_input[i].ch_debug_mode ? "YES" : "NO"));
-			printf("(%d11) Channel %d maximum Tx packet limit                     : %d\n",
-				i, i, pg_user_ch_input[i].ch_max_tx_frame_cnt);
-			printf("\n");
-		}
-		printf("\n");
-		printf("(9999) To quit this menu\n\n");
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		/*0 - 99 for Q0, 100 to 199 for Q1,, etc, hence input limit is number of queues * 100. */
-		input_limit = tx_queue_count * 100;
-
-		if (user_input == 1000) {
-			printf("(1000) Duration to run the Experiment (Seconds) <1 ... 200>   :%02d\n\n",
-				pg_params->duration_of_exp);
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input > 0) && (user_input <= 200))
-				pg_params->duration_of_exp = user_input;
-		}
-		else if (user_input == 1001) {
-			printf("(1001) DMA Channel Enabled                                    :%#02x\n\n",
-				pg_params->dma_ch_en);
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%x", &user_input);
-			if (user_input < (1 << tx_queue_count))
-				pg_params->dma_ch_en = user_input;
-			else
-				printf("Device supports only %d channels/queues\n",
-						tx_queue_count);
-		}
-		else if (user_input == 1002) {
-			printf("(1002) DMA Tx and Rx Priority Scheme <0/1>                    : %01d\n",
-				pg_params->ch_tx_rx_arb_scheme);
-			printf("     [0 - Weighted Round Robin, 1 - Strict Priority]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input == 0) || (user_input == 1))
-				pg_params->ch_tx_rx_arb_scheme = user_input;
-			else
-				printf("Invalid input\n");
-		}
-		else if (user_input == 1003) {
-			printf("(1003) DMA Tx has High Priority over Rx <0/1>                 : %01d\n",
-				pg_params->ch_use_tx_high_prio);
-			printf("     [0 - Rx has High Priority, 1 - Tx has High Priority]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input == 0) || (user_input == 1))
-				pg_params->ch_use_tx_high_prio = user_input;
-			else
-				printf("Invalid input\n");
-		}
-		else if (user_input == 1004) {
-			printf("(1004) DMA Tx and Rx Priority Ratio  <0/1/2/3>                : %01d\n",
-				pg_params->ch_tx_rx_prio_ratio);
-			printf("     [Tx:Rx or Rx:Tx, 0=> 1:1, 1=>2:1, 2=>3:1, 3=>4:1\n"
-			     "                      4=> 5:1, 5=>6:1, 6=>7:1, 7=>8:1]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input >= 0) && (user_input <= 3))
-				pg_params->ch_tx_rx_prio_ratio = user_input;
-			else
-				printf("Invalid input\n");
-		}
-		else if (user_input == 1005) {
-			printf("(1005) DMA Transmit Arbitration algorithm                    : %01d\n",
-					pg_params->dma_tx_arb_algo);
-			printf("     [0 - Fixed priority\n");
-			printf("      1 - WSP (Weighted strict priority)\n");
-			printf("      2 - WRR (Weighted Round Robin]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input >= 0) && (user_input <= 2))
-				pg_params->dma_tx_arb_algo = user_input;
-			else
-				printf("Invalid input\n");
-		}
-		else if (user_input == 1006) {
-			printf("(1006) MTL DCB algorithm                                      : %01d\n",
-				pg_params->queue_dcb_algorithm);
-			printf("     [0 - WRR  (Weighted Round Robin)\n"
-						 "      1 - WFQ  (Weighted Fair Queuing)\n"
-						 "      2 - DWRR (Deficit Weighted Round Robin)\n"
-						 "      3 - SP   (Strict Priority)]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input >= 0) && (user_input <= 3))
-				pg_params->queue_dcb_algorithm = user_input;
-			else
-				printf("Invalid input\n");
-		}
-		else if (user_input == 1007) {
-			printf("(1007) mac_lb_mode                                            : %01d\n",
-				 pg_params->mac_lb_mode);
-			printf("     [0 - Disable MAC Loop-Back Mode \n"
-					 "      1 - Enable  MAC Loop-Back Mode ]\n");
-			printf("Your Option here::");
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if ((user_input >= 0) && (user_input <= 1))
-				pg_params->mac_lb_mode = user_input;
-			else
-				printf("Invalid input\n");
-		}
-
-		else if ((user_input >= 0) && (user_input <= 99)
-				&& (user_input < input_limit)) { /* ch 0 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-					user_input, 0);
-		}
-		else if ((user_input >= 100) && (user_input <= 199)
-				&& (user_input < input_limit)) { /* ch 1 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-					(user_input - 100), 1);
-		}
-		else if ((user_input >= 200) && (user_input <= 299)
-				&& (user_input < input_limit)) { /* ch 2 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 200), 2);
-		}
-		else if ((user_input >= 300) && (user_input <= 399)
-				&& (user_input < input_limit)) { /* ch 3 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 300), 3);
-		}
-		else if ((user_input >= 400) && (user_input <= 499)
-				&& (user_input < input_limit)) { /* ch 4 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 400), 4);
-		}
-		else if ((user_input >= 500) && (user_input <= 599)
-				&& (user_input < input_limit)) { /* ch 5 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 500), 5);
-		}
-		else if ((user_input >= 600) && (user_input <= 699)
-				&& (user_input < input_limit)) { /* ch 6 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 600), 6);
-		}
-		else if ((user_input >= 700) && (user_input <= 799)
-				&& (user_input < input_limit)) { /* ch 7 parameter */
-			DWC_ETH_QOS_process_ch_params(pg_user_ch_input,
-				(user_input - 700), 7);
-		}
-	} while (user_input != 9999);
-}
-
-static void DWC_ETH_QOS_gen_pg_report_in_file(struct DWC_ETH_QOS_pg_user_input *pg_params,
-					struct DWC_ETH_QOS_PGStruct *pg_struct, FILE *fp)
-{
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	char user_string[10], *string;
-	int user_input = 0;
-	int i, display_avb_algo = 0, display_dcb_algo;
-	unsigned long totalbytes = 0, totalbits = 0, time = pg_params->duration_of_exp;
-	unsigned long long totalbytes_tx = 0;
-
-	float ch_bw = 0, total_ch_bw = 0, total_nonav_bw = 0;
-	char *space = "                                                  ";
-
-	if (fp == stdout)
-		system("clear");
-
-	fprintf(fp, "===================================================================\n");
-
-	display_avb_algo = 0;
-	for (i = 0; i < tx_queue_count; i++) {
-		if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
-			display_avb_algo = 1;
-			break;
-		}
-	}
-	display_dcb_algo = 0;
-	for (i = 0; i < tx_queue_count; i++) {
-		if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
-			display_dcb_algo = 1;
-			break;
-		}
-	}
-
-	fprintf(fp, "Duration Of The Experiment (Seconds)       : %02d\n",
-		pg_params->duration_of_exp);
-	fprintf(fp, "DMA Channel Enabled                        : %#02x\n",
-		pg_params->dma_ch_en);
-	fprintf(fp, "Tx:Rx Prio Scheme                          : %s\n",
-		pg_params->ch_tx_rx_arb_scheme ? "SP" : "RR");
-	fprintf(fp, "Tx has High Prio over Rx                   : %s\n",
-		pg_params->ch_use_tx_high_prio ? "YES" : "NO");
-	fprintf(fp, "Tx:Rx Prio Ratio (for RR)                  : %01d\n",
-		pg_params->ch_tx_rx_prio_ratio);
-	fprintf(fp, "DMA Transmit Arbitration algorithm         : %01d\n",
-			pg_params->dma_tx_arb_algo);
-	if (display_dcb_algo) {
-		fprintf(fp, "MTL DCB algorithm                          : ");
-		switch (pg_params->queue_dcb_algorithm) {
-			case eDWC_ETH_QOS_DCB_WRR:
-				fprintf(fp, "WRR (Weighted Round Robin)\n");
-				break;
-			case eDWC_ETH_QOS_DCB_WFQ:
-				fprintf(fp, "WFQ (Weighted Fair Queuing)\n");
-				break;
-			case eDWC_ETH_QOS_DCB_DWRR:
-				fprintf(fp, "DWRR (Deficit Weighted Round Robin)\n");
-				break;
-			case eDWC_ETH_QOS_DCB_SP:
-				fprintf(fp, "SP (Strict Priority)\n");
-				break;
-		}
-	}
-    fprintf(fp, "mac_lb_mode                                : %01d\n",
-			    pg_params->mac_lb_mode);
-	fprintf(fp, "speed_100M_1G mode                         : %d\n",
-		        pg_struct->speed_100M_1G);
-
-	fprintf(fp, "\n");
-	fprintf(fp, "-------------------------------------------------------------------\n");
-	fprintf(fp, "Parameters\n");
-	fprintf(fp, "-------------------------------------------------------------------\n");
-
-	fprintf(fp, "Ch Operating mode\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		switch (pg_ch_input[i].ch_operating_mode) {
-		case eDWC_ETH_QOS_QAVB:
-			string = "Audio Video Bridging";
-			break;
-		case eDWC_ETH_QOS_QDCB:
-			string = "Data Centric Bridging";
-			break;
-		case eDWC_ETH_QOS_QGENERIC:
-			string = "Non DCB (Generic)";
-			break;
-		case eDWC_ETH_QOS_QDISABLED:
-			string = "Queue operating disabled";
-			break;
-		}
-		fprintf(fp, "%s[CH%d]  %s\n",
-			space, i, string);
-	}
-
-	fprintf(fp, "Ch Prio Weights [DMA]\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %01d\n",
-			space, i, pg_ch_input[i].ch_arb_weight);
-	}
-
-	fprintf(fp, "Queue Weights [MTL]\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %03d\n",
-			space, i, pg_ch_input[i].ch_queue_weight);
-	}
-
-	fprintf(fp, "Slot Number Check Enabled ?\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %s\n",
-			space, i, pg_ch_input[i].ch_EnableSlotCheck ? "YES" : "NO");
-	}
-
-	fprintf(fp, "Adv Slot Number Check Enabled ?\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %s\n",
-			space, i, pg_ch_input[i].ch_EnableAdvSlotCheck ? "YES" : "NO");
-	}
-
-	fprintf(fp, "Slot Counter for Avg bit Report\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %01d\n",
-			space, i, pg_ch_input[i].ch_SlotCount);
-	}
-
-	fprintf(fp, "Ch Avb Bits\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %lu\n",
-			space, i, pg_ch_input[i].ch_AvgBits);
-	}
-
-	fprintf(fp, "Ch Avb Bits Interrupt count\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %lu\n",
-			space, i, pg_ch_input[i].ch_AvgBits_interrupt_count);
-	}
-
-	if (display_avb_algo) {
-		fprintf(fp, "Ch AVB Algorithm\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %s\n", space, i,
-						(pg_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP) ?
-						"Strict Priority" : "Credit Based Shaper");
-		}
-
-		fprintf(fp, "Ch uses Credit Control ?\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %s\n",
-						space, i, pg_ch_input[i].ch_CreditControl ? "YES" : "NO");
-		}
-
-		fprintf(fp, "Ch Idle Slope\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %#08x\n",
-						space, i, pg_ch_input[i].ch_IdleSlope);
-		}
-
-		fprintf(fp, "Ch Send Slope\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %#08x\n",
-						space, i, pg_ch_input[i].ch_SendSlope);
-		}
-
-		fprintf(fp, "Ch High Credit\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %#08x\n",
-						space, i, pg_ch_input[i].ch_HiCredit);
-		}
-
-		fprintf(fp, "Ch Low Credit\n");
-		for (i = 0; i < tx_queue_count; i++) {
-			if (pg_ch_input[i].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				fprintf(fp, "%s[CH%d]  %#08x\n",
-						space, i, pg_ch_input[i].ch_LoCredit);
-		}
-	}
-
-	/* required only for debugging */
-	fprintf(fp, "Debug mode\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %s\n",
-			space, i, (pg_ch_input[i].ch_debug_mode ? "YES" : "NO"));
-	}
-
-	/* required only for debugging */
-	fprintf(fp, "Maximum Tx packet limit for debug mode\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %d\n",
-			space, i, pg_ch_input[i].ch_max_tx_frame_cnt);
-	}
-
-	fprintf(fp, "Frame size\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %03d\n",
-			space, i, pg_ch_input[i].ch_frame_size);
-	}
-
-	fprintf(fp, "Ch Tx Frame Count\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %ld\n",
-			space, i, pg_ch_input[i].ch_FramecountTx);
-	}
-
-	fprintf(fp, "Ch Rx Frame Count\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %ld\n",
-			space, i, pg_ch_input[i].ch_FramecountRx);
-	}
-
-	fprintf(fp, "Band Width Allocation\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		fprintf(fp, "%s[CH%d]  %03d%%\n",
-			space, i, pg_ch_input[i].ch_bw);
-	}
-	total_nonav_bw = 0;
-	for (i = 0; i < tx_queue_count; i++) {
-		if (pg_ch_input[i].ch_operating_mode != eDWC_ETH_QOS_QAVB)
-			total_nonav_bw += pg_ch_input[i].ch_bw;
-	}
-	if (total_nonav_bw < 25)
-		printf("WARNING: Total bandwidth for Non-AVB queues has gone below 25%%\n\n");
-
-	fprintf(fp, "Ch BW utilization Achieved (based on Tx)\n");
-	/* total = add_up(queue-rx-frames-count x queue-frame-size)
-	 * individual-queue = ((queue-rx-frame-count x queue-frame-size) x 100) / total */
-	totalbytes = 0;
-	for (i = 0; i < tx_queue_count; i++) {
-		totalbytes += (pg_ch_input[i].ch_FramecountTx * pg_ch_input[i].ch_frame_size);
-	}
-	for (i = 0; i < tx_queue_count; i++) {
-		ch_bw = (pg_ch_input[i].ch_FramecountTx * pg_ch_input[i].ch_frame_size);
-		if (ch_bw)
-			ch_bw = (float)((ch_bw * 100)/totalbytes);
-		fprintf(fp, "%s[CH%d]  %3.2F%%\n",
-			space, i, ch_bw);
-	}
-
-	fprintf(fp, "Ch BW utilization Achieved (based on Rx)\n");
-	/* total = add_up(queue-rx-frames-count x queue-frame-size)
-	 * individual-queue = ((queue-rx-frame-count x queue-frame-size) x 100) / total */
-	totalbytes = 0;
-	totalbytes_tx = 0;
-	for (i = 0; i < rx_queue_count; i++) {
-		totalbytes += (pg_ch_input[i].ch_FramecountRx * pg_ch_input[i].ch_frame_size);
-		totalbytes_tx += (pg_ch_input[i].ch_FramecountTx * pg_ch_input[i].ch_frame_size);
-	}
-	for (i = 0; i < rx_queue_count; i++) {
-		ch_bw = (pg_ch_input[i].ch_FramecountRx * pg_ch_input[i].ch_frame_size);
-		if (ch_bw)
-			ch_bw = (float)((ch_bw * 100)/totalbytes_tx);
-		fprintf(fp, "%s[CH%d]  %3.2F%%\n",
-			space, i, ch_bw);
-	}
-
-	fprintf(fp, "Ch BW utilization Achieved on Tx in Mbps\n");
-	for (i = 0; i < tx_queue_count; i++) {
-		ch_bw = (pg_ch_input[i].ch_FramecountTx * (pg_ch_input[i].ch_frame_size + 8 + 4) * 8);
-		if (ch_bw)
-			ch_bw = (float)((ch_bw/time)/(1024*1024));
-		fprintf(fp, "%s[CH%d]  %3.2F Mbps\n",
-			space, i, ch_bw);
-		total_ch_bw += ch_bw;
-	}
-	fprintf(fp, "%s----------------\n", space);
-	fprintf(fp, "%sTotal %3.2F Mbps\n", space, total_ch_bw);
-
-	fprintf(fp, "===================================================================\n");
-	fprintf(fp, "\n");
-
-	if (fp == stdout) {
-		printf("Enter 99 to return to main menu::");
-		do {
-			fscanf(stdin, "%s", user_string);
-			sscanf(user_string, "%d", &user_input);
-			if (user_input != 99)
-				printf("Invalid option %d\n", user_input);
-		} while(user_input != 99);
-	}
-}
-
-
-static void DWC_ETH_QOS_gen_pg_report(struct DWC_ETH_QOS_pg_user_input *pg_params,
-					struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-#ifdef PGTEST_LOGFILE
-	FILE *fp = NULL;
-	time_t mytime;
-	struct tm *mytm;
-	char file_name[64], time_str[3][8], date_str[2][8];
-#endif
-
-	DWC_ETH_QOS_gen_pg_report_in_file(pg_params, pg_struct, stdout);
-
-#ifdef PGTEST_LOGFILE
-
-	/* log in file */
-	mytime = time(NULL);
-	mytm = localtime(&mytime);
-	if (!mytm) {
-		printf("Error in fetching system time\n");
-		printf("No log file will be created\n");
-		return;
-	}
-
-	sprintf(time_str[0], "%d", (mytm->tm_hour % 12));
-	sprintf(time_str[1], "%d", mytm->tm_min);
-	sprintf(time_str[2], "%d", mytm->tm_sec);
-	switch (mytm->tm_mon) {
-		case 0: sprintf(date_str[0], "Jan"); break;
-		case 1: sprintf(date_str[0], "Feb"); break;
-		case 2: sprintf(date_str[0], "Mar"); break;
-		case 3: sprintf(date_str[0], "Apr"); break;
-		case 4: sprintf(date_str[0], "May"); break;
-		case 5: sprintf(date_str[0], "June"); break;
-		case 6: sprintf(date_str[0], "Jul"); break;
-		case 7: sprintf(date_str[0], "Aug"); break;
-		case 8: sprintf(date_str[0], "Sep"); break;
-		case 9: sprintf(date_str[0], "Oct"); break;
-		case 10: sprintf(date_str[0], "Nov"); break;
-		case 11: sprintf(date_str[0], "Dec"); break;
-	}
-	sprintf(date_str[1], "%d", mytm->tm_mday);
-	sprintf(file_name, "pgtest_%s_%s_%s_%s_%s.log",
-			date_str[0], date_str[1], time_str[0], time_str[1], time_str[2]);
-
-	fp = fopen(file_name, "w+");
-	if (fp == NULL) {
-		printf("Error in file open\n");
-		printf("No log file will be created\n");
-		return;
-	}
-	fprintf(fp, "Report generated on %s %s, %s:%s:%s\n\n",
-			date_str[0], date_str[1], time_str[0], time_str[1], time_str[2]);
-	DWC_ETH_QOS_gen_pg_report_in_file(pg_params, pg_struct, fp);
-	fclose(fp);
-#endif
-
-	return;
-}
-
-static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	char user_string[10];
-	int user_input = 0;
-	int i;
-
-	system("clear");
-	printf("ch_SelMask                          = %#02x\n",
-		pg_struct->ch_SelMask);
-	printf("DurationOfExp                       = %02d\n",
-		pg_struct->DurationOfExp);
-	printf("PrioTagForAV                        = %#02x\n",
-		pg_struct->PrioTagForAV);
-	printf("ch_tx_rx_arb_scheme                 = %s\n",
-		pg_struct->ch_tx_rx_arb_scheme ? "SP" : "RR");
-	printf("ch_use_tx_high_prio                 = %01d\n",
-		pg_struct->ch_use_tx_high_prio);
-	printf("ch_tx_rx_prio_ratio                 = %01d\n",
-		pg_struct->ch_tx_rx_prio_ratio);
-
-	for (i = 0; i < tx_queue_count; i++) {
-		printf("\n");
-		printf("Ch%d ch_arb_weight                  = %01d\n",
-			i, pg_ch_input[i].ch_arb_weight);
-		printf("Ch%d ch_bw                          = %03d%%\n",
-			i, pg_ch_input[i].ch_bw);
-		printf("Ch%d ch_queue_weight                = %03d\n",
-			i, pg_ch_input[i].ch_queue_weight);
-		printf("Ch%d ch_frame_size                  = %03d\n",
-			i, pg_ch_input[i].ch_frame_size);
-		printf("Ch%d ch_EnableSlotCheck             = %s\n",
-			i, pg_ch_input[i].ch_EnableSlotCheck ? "YES" : "NO");
-		printf("Ch%d ch_EnableAdvSlotCheck          = %s\n",
-			i, pg_ch_input[i].ch_EnableAdvSlotCheck ? "YES" : "NO");
-		printf("Ch%d ch_avb_algorithm               = %s\n",
-			i, ((pg_ch_input[i].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP) ?
-				"Strict Priority" : "Credit Based Shaper"));
-		printf("Ch%d ch_SlotCount                   = %01d\n",
-			i, pg_ch_input[i].ch_SlotCount);
-		printf("Ch%d ch_CreditControl               = %s\n",
-			i, pg_ch_input[i].ch_CreditControl ? "YES" : "NO");
-		printf("Ch%d ch_SendSlope                   = %#08x\n",
-			i, pg_ch_input[i].ch_SendSlope);
-		printf("Ch%d ch_IdleSlope                   = %#08x\n",
-			i, pg_ch_input[i].ch_IdleSlope);
-		printf("Ch%d ch_HiCredit                    = %#08x\n",
-			i, pg_ch_input[i].ch_HiCredit);
-		printf("Ch%d ch_LoCredit                    = %#08x\n",
-			i, pg_ch_input[i].ch_LoCredit);
-		printf("Ch%d ch_FramecountTx                = %ld\n",
-			i, pg_ch_input[i].ch_FramecountTx);
-		printf("Ch%d ch_FramecountRx                = %ld\n",
-			i, pg_ch_input[i].ch_FramecountRx);
-		printf("Ch%d ch_tx_desc_slot_no_start       = %#01x\n",
-			i, pg_ch_input[i].ch_tx_desc_slot_no_start);
-		printf("Ch%d ch_tx_desc_slot_no_skip        = %#01x\n",
-			i, pg_ch_input[i].ch_tx_desc_slot_no_skip);
-	}
-
-	printf("\n");
-	printf("Enter 99 to return to main menu::");
-	do {
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-		if (user_input != 99)
-			printf("Invalid option %d\n", user_input);
-	} while(user_input != 99);
-}
-
-static int DWC_ETH_QOS_reset_run_parameters(struct DWC_ETH_QOS_PGStruct *pg_struct)
-{
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	unsigned int qInx = 0;
-
-	sleep(1);
-	for (qInx = 0; qInx < tx_queue_count; qInx++) {
-		pg_ch_input[qInx].ch_FramecountTx = 0;
-		pg_ch_input[qInx].ch_AvgBits = 0;
-		pg_ch_input[qInx].ch_AvgBits_interrupt_count = 0;
-		pg_ch_input[qInx].tx_interrupts = 0;
-		pg_ch_input[qInx].interrupt_prints = 0;
-	}
-
-	for (qInx = 0; qInx < rx_queue_count; qInx++) {
-		pg_ch_input[qInx].ch_FramecountRx = 0;
-	}
-
-	return 0;
-}
-
-static int DWC_ETH_QOS_display_progress(int sockfd, char *ifname,
-		struct DWC_ETH_QOS_PGStruct *pg_struct,
-		struct DWC_ETH_QOS_pg_user_input *pg_params)
-{
-	int test_run = 1, total_seconds = 0;
-	int dots = 3, user_input, i, blinker = 0;
-	char user_string[10];
-
-	printf("\n");
-	do {
-		/* print progress */
-		printf("[%3dsecs] ", total_seconds);
-		blinker = (total_seconds % dots);
-		for (i = 0; i < dots; i++) {
-			if (i <= blinker)
-				printf(".");
-			else
-				printf(" ");
-		}
-		fflush(stdout);
-
-		/* wait!! */
-		sleep(1);
-
-		/* clear display for next progress update */
-		printf("\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b");
-		for (i = 0; i < dots; i++) {
-			printf("\b");
-		}
-		fflush(stdout);
-		total_seconds++;
-
-		/* check for test complete */
-		test_run = DWC_ETH_QOS_check_test_done(sockfd, ifname);
-	} while (test_run);
-
-	printf("\n");
-	printf("RUN HAS COMPLETED\n");
-	printf("\n");
-	printf("Enter any number to view the run results::");
-	fscanf(stdin, "%s", user_string);
-	sscanf(user_string, "%d", &user_input);
-
-	DWC_ETH_QOS_get_pg_result_from_hw(sockfd, ifname, pg_struct);
-	DWC_ETH_QOS_gen_pg_report(pg_params, pg_struct);
-
-	return 0;
-}
-
-/* returun 0 success and -ve number on failure */
-static int DWC_ETH_QOS_pg_test(int sockfd, char *ifname)
-{
-	struct DWC_ETH_QOS_pg_user_input pg_params;
-	struct DWC_ETH_QOS_PGStruct pg_struct;
-	char user_string[10];
-	int user_input = 0;
-
-	if (tx_queue_count <= 0 || rx_queue_count <= 0) {
-		printf("ERROR: Tx/Rx Queue count is zero\n");
-		return -1;
-	}
-
-	DWC_ETH_QOS_init_default_pg(&pg_params);
-	DWC_ETH_QOS_populate_pg_struct(&pg_params, &pg_struct);
-	DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
-	DWC_ETH_QOS_config_hw_for_pg_test(sockfd, ifname);
-
-	printf("You are about to start PG Testing....\n");
-	do {
-		system("clear");
-		printf("--------------------------------------------\n");
-		printf("Select the Option Below:\n");
-		printf("--------------------------------------------\n");
-
-		printf("(01) Show/Get the PG Parameters\n");
-		printf("(02) Send Parameters to Driver\n");
-		printf("(03) Configure HW for PG Test\n");
-		printf("(04) Run PG test\n");
-		printf("(05) Show PG Test Reports\n");
-		printf("(06) Print PG Structure\n");
-		printf("(99) To quit this menu\n\n");
-
-		printf("Your Option here::");
-		fscanf(stdin, "%s", user_string);
-		sscanf(user_string, "%d", &user_input);
-
-		switch (user_input) {
-		case 01:
-			DWC_ETH_QOS_get_pg_params(&pg_params);
-			DWC_ETH_QOS_populate_pg_struct(&pg_params, &pg_struct);
-			break;
-		case 02:
-			DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
-			break;
-		case 03:
-			DWC_ETH_QOS_config_hw_for_pg_test(sockfd, ifname);
-			break;
-		case 04:
-			/* reset selected PG parameters in app and kernel before run */
-			DWC_ETH_QOS_reset_run_parameters(&pg_struct);
-			DWC_ETH_QOS_send_pg_param_to_driver(sockfd, ifname, &pg_struct);
-			DWC_ETH_QOS_run_pg_test(sockfd, ifname, &pg_struct);
-			DWC_ETH_QOS_display_progress(sockfd, ifname, &pg_struct, &pg_params);
-			break;
-		case 05:
-			DWC_ETH_QOS_get_pg_result_from_hw(sockfd, ifname, &pg_struct);
-			DWC_ETH_QOS_gen_pg_report(&pg_params, &pg_struct);
-			break;
-		case 06:
-			DWC_ETH_QOS_print_pg_struct(&pg_struct);
-			break;
-		case 99:
-			printf("Exiting....\n");
-			break;
-		default:
-			printf("Sorry, wrong input....\n");
-		}
-	} while(user_input != 99);
-
-	return 0;
-}
-
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 void usage_common(char *cmd)
 {
 	if (print_all) {
@@ -4036,13 +2793,7 @@ main(int argc, char *argv[])
 			}
 			ret = program_avb_algorithm(sockfd, argv[1], argv[3],
 					argv[4], argv[5], argv[6]);
-		}
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-		else if (0 == strcmp(argv[2], "pgtest")) {
-			ret = DWC_ETH_QOS_pg_test(sockfd, argv[1]);
-		}
-#endif /* DWC_ETH_QOS_CONFIG_PGTEST */
-		else if (0 == strcmp(argv[2], "split_hdr")) {
+		} else if (0 == strcmp(argv[2], "split_hdr")) {
 			if (argc < 4) {
 				usage_split_hdr();
 				goto argc_failed;
-- 
2.10.1

