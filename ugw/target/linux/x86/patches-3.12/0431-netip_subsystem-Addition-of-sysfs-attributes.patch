From 5a53ba90bfe76b15123f96a7fbc5560411987a7d Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Thu, 16 Jun 2016 17:01:10 -0700
Subject: [PATCH 431/639] netip_subsystem: Addition of sysfs attributes

Power Manager need to know all the netip services available as soon as
possible. Currently there is no sysfs attribute that user space can
query to know all the available netip services. So providing a sysfs
attribute that provides all the services listed in netip properties
message.

Signed-off-by: Emmanuel Jillela <emmanuel.jillela@intel.com>
---
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c    | 272 ++++++-----
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.h    |   2 +-
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c | 565 +++++++----------------
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h |  57 ++-
 4 files changed, 344 insertions(+), 552 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index 1c997fe..d15c61c 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -296,34 +296,32 @@ static void netss_send_reply_msg(void)
  */
 static void ness_process_netip_props_msg(void)
 {
-   uint8_t *data = (uint8_t  *)(&pnetss_drv_data->netip_msg.payload[4]);
-   while(*data != 0 )
-   {
-      /*netip properties message is null terminated
-       *set the bit n-1, for the service id n
-       *service id starts from 1  */
-      if(*data < NETSS_SERVICE_ID_MAX)
-      {
-         g_netip_services_available |= 1 << (*data-1);
-      }
-      else
-      {
-         printk("Invalid service id in properties msg %d\n", *data);
-      }
-      /*Check next two bytes */
-      data++;
-   }
-   /**Internal BBU service does not exist */
-   if(!(g_netip_services_available & (1 << (NETSS_SERVICE_ID_BBU-1))))
-   {
-      /**Inform ACPI internal BBU service is off */
-      netss_indicate_bbu_service_level(0);
-   }
-   NETSS_PM_PRINT("services that are available = %x\n", g_netip_services_available);
-
-   /*Remove the sysfs attribute files of the services that are not available */
-   //netss_sysfs_clean_up(g_netip_services_available);
-   return;
+	uint8_t *data = (uint8_t  *)(&pnetss_drv_data->netip_msg.payload[4]);
+	while (*data != 0) {
+		/*netip properties message is null terminated
+		 *set the bit n-1, for the service id n
+		 *service id starts from 1  */
+		if (*data < NETSS_SERVICE_ID_MAX) {
+			g_netip_services_available |= 1 << (*data-1);
+			/** Update sysfs service_available attribute */
+			g_netss_sysfs_attributes_info.service_available |=
+					NETSS_SET_SERVICE_POWER_LEVEL(*data, 1);
+		} else {
+			pr_err("Invalid service id in properties msg %d\n",
+									*data);
+		}
+		/*Check next two bytes */
+		data++;
+	}
+	/**Internal BBU service does not exist */
+	if (!(g_netip_services_available & (1 << (NETSS_SERVICE_ID_BBU-1)))) {
+		/**Inform ACPI internal BBU service is off */
+		netss_indicate_bbu_service_level(0);
+	}
+	NETSS_PM_PRINT("services that are available = %x\n",
+			g_netip_services_available);
+
+	return;
 }
 /** NetIP configure message format
  * ------------------------------------
@@ -941,36 +939,45 @@ void netss_stop_handshake_thread(void)
 
 uint32_t netss_get_attribute(uint32_t attr_id, uint32_t service_id)
 {
-   uint32_t value = 0, bit_offset = 0, service_id_mask = 0xFFFFFFFF;
-   if(service_id == 0) {
-      service_id_mask = 0xF;
-   } else if(service_id < NETSS_SERVICE_ID_MAX) {
-      bit_offset = (2 * (service_id + 1));
-      service_id_mask = NETSS_BIT_MASK_POWER_LEVEL << bit_offset;
-   }
-   mutex_lock(&g_netss_sysfs_attributes_info.lock);
-   switch (attr_id)
-   {
-      case NETSS_SERVICE_LEVEL_ATTR:
-         value = (g_netss_sysfs_attributes_info.service_level & service_id_mask) >> bit_offset;
-      break;
-      case NETSS_SERVICE_STATE_ATTR:
-         value = (g_netss_sysfs_attributes_info.service_status & service_id_mask) >> bit_offset;
-      break;
-      case NETSS_SERVICE_READY_ATTR:
-         value = (g_netss_sysfs_attributes_info.service_ready & service_id_mask) >> bit_offset;
-      break;
-      case NETSS_NETIP_SOFT_OFF_ATTR:
-	 value = g_netss_sysfs_attributes_info.netip_soft_off;
-      break;
-      case NETSS_ENABLE_DEBUG_ATTR:
-         value = g_netss_sysfs_attributes_info.enable_debug;
-      break;
-      default:
-         printk(KERN_ERR "Attempting to get an invalid attribute ID!\n");
-   }
-   mutex_unlock(&g_netss_sysfs_attributes_info.lock);
-   return value;
+	uint32_t value = 0, bit_offset = 0, service_id_mask = 0xFFFFFFFF;
+	if (service_id == 0) {
+		service_id_mask = 0xF;
+	} else if (service_id < NETSS_SERVICE_ID_MAX) {
+		bit_offset = (2 * (service_id + 1));
+		service_id_mask = NETSS_BIT_MASK_POWER_LEVEL << bit_offset;
+	}
+	mutex_lock(&g_netss_sysfs_attributes_info.lock);
+	switch (attr_id) {
+	case NETSS_SERVICE_LEVEL_ATTR:
+		value = (g_netss_sysfs_attributes_info.service_level &
+					service_id_mask) >> bit_offset;
+		break;
+	case NETSS_SERVICE_STATE_ATTR:
+		value = (g_netss_sysfs_attributes_info.service_status &
+					service_id_mask) >> bit_offset;
+		break;
+	case NETSS_SERVICE_AVAILABLE_ATTR:
+		value = (g_netss_sysfs_attributes_info.service_available &
+					service_id_mask) >> bit_offset;
+		break;
+	case NETSS_NETIP_SOFT_OFF_ATTR:
+		value = g_netss_sysfs_attributes_info.netip_soft_off;
+		break;
+	case NETSS_ENABLE_DEBUG_ATTR:
+		value = g_netss_sysfs_attributes_info.enable_debug;
+		break;
+	case NETSS_SERVICE_READY_ATTR:
+		value = (g_netss_sysfs_attributes_info.service_ready &
+					service_id_mask) >> bit_offset;
+		break;
+	case NETSS_BOOT_HANDSHAKE_DONE_ATTR:
+		value = g_netss_boot_handshake_done;
+		break;
+	default:
+		pr_err("Attempting to get an invalid attribute ID!\n");
+	}
+	mutex_unlock(&g_netss_sysfs_attributes_info.lock);
+	return value;
 }
 
 int netss_set_attribute(uint32_t attr_id, uint32_t value, uint32_t service_id)
@@ -1001,74 +1008,91 @@ int netss_set_attribute(uint32_t attr_id, uint32_t value, uint32_t service_id)
 
 int __netss_set_service_level(uint32_t level)
 {
-   int ret = -1;
-   netss_power_level_t new_state = level & NETSS_BIT_MASK_POWER_LEVEL;
-
-   /** Updated the global service level */
-   g_netss_sysfs_attributes_info.service_level = level;
-   /** Service request reply is pending mark service request is pending
-       so this request will be sent after receiving all replies to the earlier request */
-   if(g_netip_service_request_reply_pending) {
-      NETSS_PM_PRINT("service level Request pending %X\n", level);
-      g_netip_service_level_request_pending = true;
-   } else if(g_netss_boot_handshake_done) {
-
-      /**NOTE: WHEN TO CALL PLATFORM API
-       * If new power state is greater old power state, call before making service request
-       * Else if new power state old power state, call after making service request
-       * ORDER OF THE POWER states FROM HIGHEST TO LOWEST
-       * |======================= ===================|
-       * |POWER LEVELS                  | ENUMERATION|
-       * |===========================================|
-       * |NETSS_POWER_LEVEL_ACTIVE      |     0      |
-       * |NETSS_POWER_LEVEL_RESERVED    |     1      |
-       * |NETSS_POWER_LEVEL_DISABLE     |     2      |
-       * |NETSS_POWER_LEVEL_DEEP_STANDBY|     3      |
-       * |===========================================|
-       */
-
-      if(new_state == NETSS_POWER_LEVEL_DEEP_STANDBY && g_current_netip_power_state != NETSS_POWER_LEVEL_DEEP_STANDBY) {
-         /**We are going to deep standby lowest power level */
-         ret = netss_send_service_request_msg(level);
-         /* This has to be done in the netss_update_sysfs_attributes after
-          * receiving the reply for all the service requests
-          * 1. Call the platform driver api
-          */
-      } else if(new_state == NETSS_POWER_LEVEL_ENABLE && g_current_netip_power_state == NETSS_POWER_LEVEL_DEEP_STANDBY) {
-         /*
-          * 1. Call the platform driver api
-          */
-         puma_netip_notify_state(((level & NETSS_BIT_MASK_ON_BATTERY)? 1:0));
-	 if(g_is_netip_in_soft_off_state) {
-	    /**We are coming out of netip soft off state to active */
-	    ret = netss_send_service_request_msg(level);
-	 } else {
+	int ret = 0;
+	netss_power_level_t new_state = level & NETSS_BIT_MASK_POWER_LEVEL;
+
+	/** Updated the global service level */
+	g_netss_sysfs_attributes_info.service_level = level;
+	/* Service request reply is pending mark service request is pending
+	 * so this request will be sent after receiving all replies to
+	 * the earlier request
+	 */
+	if (g_netip_service_request_reply_pending) {
+		NETSS_PM_PRINT("service level Request pending %X\n", level);
+		g_netip_service_level_request_pending = true;
+	} else if (g_netss_boot_handshake_done) {
+
+		/* NOTE: WHEN TO CALL PLATFORM API
+		 * If new power state is greater old power state,
+		 * call before making service request
+		 * Else if new power state old power state,
+		 * call after making service request
+		 * ORDER OF THE POWER states FROM HIGHEST TO LOWEST
+		 * |======================= ===================|
+		 * |POWER LEVELS                  | ENUMERATION|
+		 * |===========================================|
+		 * |NETSS_POWER_LEVEL_ACTIVE      |     0      |
+		 * |NETSS_POWER_LEVEL_RESERVED    |     1      |
+		 * |NETSS_POWER_LEVEL_DISABLE     |     2      |
+		 * |NETSS_POWER_LEVEL_DEEP_STANDBY|     3      |
+		 * |===========================================|
+		 */
+
+		if (new_state == NETSS_POWER_LEVEL_DEEP_STANDBY &&
+				g_current_netip_power_state !=
+					NETSS_POWER_LEVEL_DEEP_STANDBY) {
+			/**We are going to deep standby lowest power level */
+			ret = netss_send_service_request_msg(level);
+			/* This has to be done in the
+			 * netss_update_sysfs_attributes after
+			 * receiving the reply for all the service requests
+			 * 1. Call the platform driver api
+			 */
+		} else if (new_state == NETSS_POWER_LEVEL_ENABLE &&
+				g_current_netip_power_state ==
+					NETSS_POWER_LEVEL_DEEP_STANDBY) {
+			/*
+			 * 1. Call the platform driver api
+			 */
+			puma_netip_notify_state(((level &
+					NETSS_BIT_MASK_ON_BATTERY) ? 1 : 0));
+			if (g_is_netip_in_soft_off_state) {
+				/* We are coming out of netip soft off
+				 * state to active
+				 */
+				ret = netss_send_service_request_msg(level);
+			} else {
 #ifdef CONFIG_PM_RUNTIME
-	    pm_runtime_get(&pnetss_drv_data->dev->dev);
+				pm_runtime_get(&pnetss_drv_data->dev->dev);
 #endif
-	 }
-      } else if(new_state > g_current_netip_power_state) {
-         /*Going to lower power state Ex: Active to BBU, Active to Standby
-          *BBU to standby */
-         ret = netss_send_service_request_msg(level);
-         /* This has to be done in the netss_update_sysfs_attributes after
-          * receiving the reply for all the service requests
-          * 1. Call the platform driver api
-          */
-      } else if(new_state < g_current_netip_power_state) {
-         /*Going to higher power state Ex: BBU to Active or Standby to Active */
-         /*
-          * 1. Call the platform driver api
-          */
-          puma_netip_notify_state(((level & NETSS_BIT_MASK_ON_BATTERY)? 1:0));
-          ret = netss_send_service_request_msg(level);
-      } else {
-         /* This is 'probably' changing the individual services without changing netip level */
-         ret = netss_send_service_request_msg(level);
-      }
-   }
-
-   return ret;
+			}
+		} else if (new_state > g_current_netip_power_state) {
+			/* Going to lower power state Ex: Active to BBU,
+			 * Active to Standby BBU to standby
+			 */
+			ret = netss_send_service_request_msg(level);
+			/* This has to be done in the
+			 * netss_update_sysfs_attributes after
+			 * receiving the reply for all the service requests
+			 * 1. Call the platform driver api
+			 */
+		} else if (new_state < g_current_netip_power_state) {
+			/* Going to higher power state
+			 * Ex: BBU to Active or Standby to Active
+			 * 1. Call the platform driver api
+			 */
+			puma_netip_notify_state(((level &
+				NETSS_BIT_MASK_ON_BATTERY) ? 1 : 0));
+			ret = netss_send_service_request_msg(level);
+		} else {
+			/* This is 'probably' changing the individual services
+			 * without changing netip level
+			 */
+			ret = netss_send_service_request_msg(level);
+		}
+	}
+
+	return ret;
 }
 
 int netss_turn_off_netip_clock(void)
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
index 5cb97be..b3d921d 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
@@ -37,7 +37,7 @@
 #define NETIP_STATUS_REQUEST_REPLY 3
 
 /**Bit position in sysfs service level vector that indicates whether we are on Battery or not */
-#define NETSS_BIT_MASK_ON_BATTERY (8)
+#define NETSS_BIT_MASK_ON_BATTERY (3)
 /**Bit mask to extract power level of netip or service. two bits  */
 #define NETSS_BIT_MASK_POWER_LEVEL (3)
 
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
index df8a3ad..3b67b8e 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
@@ -1,7 +1,7 @@
-/*  netip_subsystem_sysfs.c: 
+/*  netip_subsystem_sysfs.c:
  *  GPL LICENSE SUMMARY
  *
- *  Copyright(c) 2015 Intel Corporation. All rights reserved.
+ *  Copyright(c) 2015-2016 Intel Corporation. All rights reserved.
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of version 2 of the GNU General Public License as
@@ -36,450 +36,205 @@
 
 static int netssdev_dummy_init(struct net_device *dev)
 {
-   return 0;
+	return 0;
 }
 
 static void netssdev_dummy_uninit(struct net_device *dev)
 {
-   return;
+	return;
 }
 
 static const struct net_device_ops dummy_netdev_ops = {
-   .ndo_init   = netssdev_dummy_init,
-   .ndo_uninit = netssdev_dummy_uninit,
+	.ndo_init   = netssdev_dummy_init,
+	.ndo_uninit = netssdev_dummy_uninit,
 };
 
 static void dummy_setup(struct net_device *dev)
 {
-   /* Initialize the device structure. */
-   dev->netdev_ops = &dummy_netdev_ops;
-   dev->destructor = free_netdev;
+	/* Initialize the device structure. */
+	dev->netdev_ops = &dummy_netdev_ops;
+	dev->destructor = free_netdev;
 }
 
-struct netss_dev_priv_data_t {
-   netss_service_id_t service_id;
-};
-
-extern const char power_group_name[];
-
-static struct net_device *g_netssdevs[NETSS_SERVICES_MAX];
+static struct net_device *g_netss_netdev;
 
-static ssize_t service_show(struct device * dev, struct device_attribute *attr, char *buf)
+static ssize_t service_show(struct device *dev,
+			struct device_attribute *attr,
+			char *buf)
 {
-   uint32_t attribute_value = 0;
-   if(strncmp(attr->attr.name, "service_level", 13) == 0)
-   {
-      attribute_value = netss_get_attribute(NETSS_SERVICE_LEVEL_ATTR, NETSS_SERVICE_ID_MAX);
-   }
-   else if(strncmp(attr->attr.name, "service_status", 14) == 0)
-   {
-      attribute_value = netss_get_attribute(NETSS_SERVICE_STATE_ATTR, NETSS_SERVICE_ID_MAX);
-   }
-   else if(strncmp(attr->attr.name, "service_available", 17) == 0)
-   {
-      attribute_value = netss_get_attribute(NETSS_SERVICE_READY_ATTR, NETSS_SERVICE_ID_MAX);
-   }
-   else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0)
-   {
-      attribute_value = netss_get_attribute(NETSS_NETIP_SOFT_OFF_ATTR, 0);
-   }
-   else
-   {
-      attribute_value = netss_get_attribute(NETSS_ENABLE_DEBUG_ATTR, 0);
-   }
-   return sprintf(buf, "0x%08X\n", (unsigned int)attribute_value);
+	uint32_t attribute_value = 0;
+	ssize_t ret = 0;
+	if (strncmp(attr->attr.name, "service_level", 13) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_SERVICE_LEVEL_ATTR,
+					NETSS_SERVICE_ID_MAX);
+	} else if (strncmp(attr->attr.name, "service_status", 14) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_SERVICE_STATE_ATTR,
+					NETSS_SERVICE_ID_MAX);
+	} else if (strncmp(attr->attr.name, "service_available", 17) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_SERVICE_AVAILABLE_ATTR,
+					NETSS_SERVICE_ID_MAX);
+	} else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_NETIP_SOFT_OFF_ATTR, 0);
+	} else if (strncmp(attr->attr.name, "enable_debug", 12) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_ENABLE_DEBUG_ATTR, 0);
+	} else if (strncmp(attr->attr.name, "service_ready", 13) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_SERVICE_READY_ATTR,
+					NETSS_SERVICE_ID_MAX);
+	} else if (strncmp(attr->attr.name, "boot_handshake_done", 19) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_BOOT_HANDSHAKE_DONE_ATTR, 0);
+	} else {
+		ret = -EIO;
+	}
+
+	if (!ret)
+		ret = sprintf(buf, "0x%08X\n", (unsigned int)attribute_value);
+	return ret;
 }
 
-static ssize_t service_store(struct device * dev, struct device_attribute *attr, const char *buf, size_t count)
+static ssize_t service_store(struct device *dev,
+			struct device_attribute *attr,
+			const char *buf, size_t count)
 {
-   uint32_t attribute_value = simple_strtoul(buf, NULL, 0);
-   if(strncmp(attr->attr.name, "service_level", 13) == 0)
-   {
-      attribute_value = netss_set_attribute(NETSS_SERVICE_LEVEL_ATTR, attribute_value, NETSS_SERVICE_ID_MAX);
-   }
-  else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0)
-   {
-      attribute_value = netss_set_attribute(NETSS_NETIP_SOFT_OFF_ATTR, attribute_value, 0);
-   }
-   else
-   {
-      attribute_value = netss_set_attribute(NETSS_ENABLE_DEBUG_ATTR, attribute_value, 0);
-   }
-   return count;
+	unsigned long attribute_value;
+	ssize_t ret;
+	ret = kstrtoul(buf, 0, &attribute_value);
+	if (ret != 0)
+		return ret;
+	if (strncmp(attr->attr.name, "service_level", 13) == 0) {
+		ret = netss_set_attribute(NETSS_SERVICE_LEVEL_ATTR,
+					attribute_value, NETSS_SERVICE_ID_MAX);
+	} else if (strncmp(attr->attr.name, "netip_soft_off", 14) == 0) {
+		ret = netss_set_attribute(NETSS_NETIP_SOFT_OFF_ATTR,
+					attribute_value, 0);
+	} else if (strncmp(attr->attr.name, "enable_debug", 12) == 0) {
+		ret = netss_set_attribute(NETSS_ENABLE_DEBUG_ATTR,
+					attribute_value, 0);
+	} else {
+		ret = -EIO;
+	}
+	if (!ret)
+		ret = count;
+	return ret;
 }
 
-//static DEVICE_ATTR(runtime_state, 0644, runtime_state_show, runtime_state_store);
 static DEVICE_ATTR(service_level, S_IWUSR, NULL, service_store);
 static DEVICE_ATTR(service_status, S_IRUGO, service_show, NULL);
 static DEVICE_ATTR(service_available, S_IRUGO, service_show, NULL);
-static DEVICE_ATTR(enable_debug,  S_IRUGO | S_IWUSR, service_show, service_store);
-static DEVICE_ATTR(netip_soft_off, S_IRUGO | S_IWUSR, service_show, service_store);
+static DEVICE_ATTR(service_ready, S_IRUGO, service_show, NULL);
+static DEVICE_ATTR(boot_handshake_done, S_IRUGO, service_show, NULL);
+static DEVICE_ATTR(enable_debug, S_IRUGO|S_IWUSR, service_show, service_store);
+static DEVICE_ATTR(netip_soft_off, S_IRUGO|S_IWUSR,
+			service_show, service_store);
 
-char * get_netss_service_name(int i)
+char *get_netss_service_name(int i)
 {
-   switch(i) 
-   {
-      case NETIP_SUBSYSTEM:
-         return "netip_subsystem";
-      case NETSS_SERVICE_ID_DOCSIS:
-         return "docsis";
-      case NETSS_SERVICE_ID_SPECTRAL_ANALYSIS:
-         return "spectraAnalysis";
-      case NETSS_SERVICE_ID_VIDEO:
-         return "video";
-      case NETSS_SERVICE_ID_VOICE:
-         return "voice"; 
-      case NETSS_SERVICE_ID_MOCA:
-         return "moca";
-      case NETSS_SERVICE_ID_BBU:
-         return "bbu";
-      case NETSS_SERVICE_ID_WIFI:
-         return "wifi";
-      case NETSS_SERVICE_ID_EXSW:
-         return "exSw";
-      case NETSS_SERVICE_ID_SGMII0:
-         return "sgmii0";
-      case NETSS_SERVICE_ID_SGMII1:
-         return "sgmii1";
-      case NETSS_SERVICE_ID_RGMII2:
-         return "rgmii2";
-      case NETSS_SERVICE_ID_RGMII3:
-         return "rgmii3";
-      default:
-	return "";
-   }
+	switch (i) {
+	case NETIP_SUBSYSTEM:
+		return "netip_subsystem";
+	case NETSS_SERVICE_ID_DOCSIS:
+		return "docsis";
+	case NETSS_SERVICE_ID_SPECTRAL_ANALYSIS:
+		return "spectraAnalysis";
+	case NETSS_SERVICE_ID_VIDEO:
+		return "video";
+	case NETSS_SERVICE_ID_VOICE:
+		return "voice";
+	case NETSS_SERVICE_ID_MOCA:
+		return "moca";
+	case NETSS_SERVICE_ID_BBU:
+		return "bbu";
+	case NETSS_SERVICE_ID_WIFI:
+		return "wifi";
+	case NETSS_SERVICE_ID_EXSW:
+		return "exSw";
+	case NETSS_SERVICE_ID_SGMII0:
+		return "sgmii0";
+	case NETSS_SERVICE_ID_SGMII1:
+		return "sgmii1";
+	case NETSS_SERVICE_ID_RGMII2:
+		return "rgmii2";
+	case NETSS_SERVICE_ID_RGMII3:
+		return "rgmii3";
+	default:
+		return "";
+	}
 }
 
 static int __init netss_sysfs_create_netip_attributes(void)
 {
-   struct netss_dev_priv_data_t *pnetss_dev_priv_data;
-   int ret;
-
-   g_netssdevs[0] = alloc_netdev(sizeof(struct netss_dev_priv_data_t), get_netss_service_name(0), dummy_setup);
-
-   if(!g_netssdevs[0])
-   {
-      ret = -ENOMEM;
-   }
-   else
-   {
-      pnetss_dev_priv_data = netdev_priv(g_netssdevs[0]);
-      pnetss_dev_priv_data->service_id = 0;
-   
-      ret = register_netdevice(g_netssdevs[0]);
-      if (ret < 0) 
-      {
-         free_netdev(g_netssdevs[0]);
-      }
-      else
-      {
-         ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_service_level);
-         if(ret < 0)
-         {
-            printk("NetIP subsystem service_level sysfs could not be created\n");
-         }
-         else if (0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_service_status)))
-         {
-            printk("NetIP subsystem service_status sysfs could not be created\n");
-         }
-         else if( 0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_service_available)))
-         {
-            printk("NetIP subsystem service_available sysfs could not be created\n");
-         } 
-	 else if( 0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_netip_soft_off)))
-	 {
-	    printk("NetIP subsystem netip_soft_off sysfs could not be created\n");
-	 }
-         else if( 0 > (ret = device_create_file(&g_netssdevs[0]->dev, &dev_attr_enable_debug)))
-         {
-            printk("NetIP subsystem enable_debug sysfs could not be created\n");
-         } 
-      }
-   
-   }
-   return ret;
+	int ret;
+
+	g_netss_netdev = alloc_netdev(0,
+				get_netss_service_name(0), dummy_setup);
+
+	if (!g_netss_netdev) {
+		return -ENOMEM;
+	} else {
+
+		ret = register_netdevice(g_netss_netdev);
+		if (ret < 0) {
+			free_netdev(g_netss_netdev);
+			return ret;
+		}
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_service_level);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_service_status);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_service_available);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_netip_soft_off);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_enable_debug);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_service_ready);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_boot_handshake_done);
+	}
+	return ret;
 }
 
 static int __init netss_sysfs_init_module(void)
 {
-   int i, err = 0;
-   for(i=0; i<NETSS_SERVICES_MAX; i++)
-   {
-      g_netssdevs[i] = NULL;
-   }
-   rtnl_lock();
-   err = netss_sysfs_create_netip_attributes();
-   rtnl_unlock();
- 
-   return err;
+	int err = 0;
+	rtnl_lock();
+	g_netss_netdev = NULL;
+	err = netss_sysfs_create_netip_attributes();
+	rtnl_unlock();
+
+	return err;
 }
 
 static void __exit netss_sysfs_cleanup_module(void)
 {
-   int i;
-   for(i=0; i<NETSS_SERVICES_MAX; i++)
-   {
-      if(g_netssdevs[i] != NULL) {
-         unregister_netdevice(g_netssdevs[i]);
-         free_netdev(g_netssdevs[i]);
-         g_netssdevs[i] = NULL;
-     }
-   }
+	if (g_netss_netdev != NULL) {
+		unregister_netdevice(g_netss_netdev);
+		free_netdev(g_netss_netdev);
+		g_netss_netdev = NULL;
+	}
 }
-void netss_sysfs_clean_up(uint32_t available_services)
-{
-   int i = 1;
-   for(i=0; i<NETSS_SERVICES_MAX; i++)
-   {
-     if(!(available_services & (1 << i))) {
-        if(g_netssdevs[i] != NULL) {
-           unregister_netdevice(g_netssdevs[i]);
-           free_netdev(g_netssdevs[i]);
-           g_netssdevs[i] = NULL;
-        }
-     }
-   }
-
-   return;
-}
-EXPORT_SYMBOL(netss_sysfs_clean_up);
 
 module_init(netss_sysfs_init_module);
 module_exit(netss_sysfs_cleanup_module);
 MODULE_DESCRIPTION("Intel(R) NET SUBSYSTEM sysfs Driver");
 MODULE_AUTHOR("Intel Corporation");
 MODULE_LICENSE("GPL");
-
-#if 0
-static char * convert_level_to_string_and_show(netss_service_id_t id, uint32_t state)
-{
-   char *ret = NULL;
-   if(id == NETIP_SUBSYSTEM) 
-   {
-      switch(state)
-      {
-         case 0:
-            ret = "Active";
-            break;
-         case 1:
-            ret = "bbu";
-            break;
-         case 2:
-            ret = "standby";
-            break;
-         case 3:
-            ret = "off";
-            break;
-         default:
-            break;
-      }
-   }
-   else
-   {
-      switch(state)
-      {
-         case 0:
-            ret = "enabled";
-            break;
-         case 1:
-            ret = "low";
-            break;
-         case 2:
-            ret = "initialized";
-            break;
-         case 3:
-            ret = "disabled";
-            break;
-         case 4:
-            if(id != NETIP_SUBSYSTEM) {
-               ret = "unusable";
-            }
-            break;
-         default:
-            break;
-      }
-
-   }
-   return ret;
-}
-
-static ssize_t runtime_state_show(struct device * dev, struct device_attribute *attr, char *buf)
-{
-   struct net_device * pnetssdev;
-   struct netss_dev_priv_data_t *pnetss_dev_priv_data;
-   char * string_state = NULL;
-   uint32_t state;
-   pnetssdev = to_net_dev(dev);
-   pnetss_dev_priv_data = netdev_priv(pnetssdev);
-   state = netss_get_service_state(pnetss_dev_priv_data->service_id); 
-   string_state = convert_level_to_string_and_show(pnetss_dev_priv_data->service_id, state);
-   if( string_state != NULL) {
-      strcpy(buf, string_state);
-      printk("showing runtime state of service id = %d current state %s\n", pnetss_dev_priv_data->service_id, string_state);
-      return strlen(string_state);
-   }
-   return 0;
-}
-
-static int convert_level_to_int_and_store(const char *buf, netss_service_id_t id)
-{
-   int ret = -1, i;
-#if 0
-   char active[] = "active";
-   char low[] = "low";
-   char disable[] = "disable";
-     
-   for(i=0; i<strlen(active);i++)
-   {
-     if(buf[i] != active[i]) {
-        ret = -1;
-        break;
-     } else {
-       ret = 0;
-     }
-   }
-
-   if(ret == 0) return 0;
-
-   for(i=0; i<strlen(low);i++)
-   {
-     if(buf[i] != low[i]) {
-        ret = -1;
-        break;
-     } else {
-       ret = 0;
-     }
-   }
-
-   if(ret == 0) {
-    if(id == NETIP_SUBSYSTEM) return 2;
-    return 1;
-   }
-
-   for(i=0; i<strlen(disable);i++)
-   {
-     if(buf[i] != disable[i]) {
-        ret = -1;
-        break;
-     } else {
-       ret = 0;
-     }
-   }
-
-   if(ret == 0) return 3;
-
-   printk("cmp4 -1 ret = %d len1 %d len2 %d\n", ret, strlen(buf), strlen(disable));
-#endif
-
-   if(id == NETIP_SUBSYSTEM)
-   {
-      if((strncmp(buf, "active", 6)) == 0) {
-         printk("buf is active\n");
-         ret = 0;
-      } else if (((strncmp(buf, "bbu", 3)) == 0)){
-         printk("buf is bbu\n");
-         ret = 1;
-      } else if ((strncmp(buf, "standby", 7)) == 0) {
-         printk("buf is disable\n");
-         ret = 2;
-      } else if ((strncmp(buf, "off", 3)) == 0) {
-         printk("buf is disable\n");
-         ret = 3;
-      }
-   }
-   else
-   {
-      if((strncmp(buf, "active", 6)) == 0) {
-         printk("buf is active\n");
-         ret = 0;
-      } else if (((strncmp(buf, "low", 3)) == 0) || ((strncmp(buf, "1x1", 3)) == 0)) {
-         printk("buf is low or 1x1\n");
-         ret = 1;
-      } else if ((strncmp(buf, "disable", 7)) == 0) {
-         printk("buf is disable\n");
-         ret = 3;
-      }
-
-   }
-   return ret;
-}
-
-static ssize_t runtime_state_store(struct device * dev, struct device_attribute *attr, const char *buf, size_t count)
-{
-   struct net_device * pnetssdev;
-   struct netss_dev_priv_data_t *pnetss_dev_priv_data;
-   int requested_state = -1;
-   pnetssdev = to_net_dev(dev);
-   pnetss_dev_priv_data = netdev_priv(pnetssdev);
-
-   requested_state = convert_level_to_int_and_store(buf,pnetss_dev_priv_data->service_id); 
-   if(requested_state > -1) {
-      /*call netss api to send mesage and update attribute value*/
-      netss_set_service_state(pnetss_dev_priv_data->service_id, requested_state);
-   }
-   printk("Writing to runtime_state of service id %d buf %s val %d \n", pnetss_dev_priv_data->service_id, buf, requested_state);
-   /*Return count on success otherwise return zero */
-   return count;
-}
-
-static int __init netss_sysfs_create_netip_attributes(void)
-{
-   struct netss_dev_priv_data_t *pnetss_dev_priv_data;
-
-   int i,j, ret;
-
-   for(i=0; i < NETSS_SERVICES_MAX; i++) 
-   {
-      if(i==BBU) {
-         continue;
-      }
-      g_netssdevs[i] = alloc_netdev(sizeof(struct netss_dev_priv_data_t), get_netss_service_name(i), dummy_setup);
-      if (!g_netssdevs[i]) {
-         ret = -ENOMEM;
-         goto free_netdevs;
-      }
-   }
-
-   for(i=0; i < NETSS_SERVICES_MAX; i++)
-   {
-      if(i==BBU) {
-         continue;
-      }
-      pnetss_dev_priv_data = netdev_priv(g_netssdevs[i]);
-      pnetss_dev_priv_data->service_id = i;
-      ret = register_netdevice(g_netssdevs[i]);
-      if (ret < 0) {
-         goto unregister_netdevs;
-      }
-
-      if(i == NETIP_SUBSYSTEM) {
-         sysfs_add_file_to_group(&g_netssdevs[i]->dev.kobj, &dev_attr_service_level, power_group_name);
-      }
-      sysfs_add_file_to_group(&g_netssdevs[i]->dev.kobj, &dev_attr_runtime_state, power_group_name);
-   }
-   return 0;
-unregister_netdevs:
-   for(j=i-1; j>=0; j--)
-   {
-      if(g_netssdevs[j] != NULL) {
-         unregister_netdevice(g_netssdevs[j]);
-      }
-   }
-   for(j=0; j<NETSS_SERVICES_MAX; j++)
-   {
-      if(g_netssdevs[j] != NULL) {
-         free_netdev(g_netssdevs[j]);
-      }
-   }
-   return ret;
-free_netdevs:
-   for(j=i-1; j<=0; j--)
-   {
-      if(g_netssdevs[j] != NULL) {
-         free_netdev(g_netssdevs[j]);
-      }
-   }
-   return ret;
-}
-
-#endif
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
index 20a1919..4acbba8 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
@@ -3,7 +3,7 @@
  *
  *  GPL LICENSE SUMMARY
  *
- *  Copyright(c) 2015 Intel Corporation. All rights reserved.
+ *  Copyright(c) 2015-2016 Intel Corporation. All rights reserved.
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of version 2 of the GNU General Public License as
@@ -32,31 +32,44 @@
 /** Attributes ID */
 typedef enum
 {
-   NETSS_SERVICE_LEVEL_ATTR,
-   NETSS_SERVICE_STATE_ATTR,
-   NETSS_SERVICE_READY_ATTR,
-   NETSS_NETIP_SOFT_OFF_ATTR,
-   NETSS_ENABLE_DEBUG_ATTR
+	NETSS_SERVICE_LEVEL_ATTR,
+	NETSS_SERVICE_STATE_ATTR,
+	NETSS_SERVICE_AVAILABLE_ATTR,
+	NETSS_NETIP_SOFT_OFF_ATTR,
+	NETSS_ENABLE_DEBUG_ATTR,
+	NETSS_SERVICE_READY_ATTR,
+	NETSS_BOOT_HANDSHAKE_DONE_ATTR,
 } netss_attribute_id_t;
 
 /** Attributes structure */
 typedef struct netss_sysfs_attributes_info {
-   uint32_t service_level;    /** Vector representing the requested NetIP and its services power states.
-                                  This is write-only from user space. */
-   uint32_t service_status;   /** Vector representing the current NetIP and its services power states
-                                  This is updated after the service request reply is received.
-                                  This is read-only from user space. */
-   uint32_t service_ready;    /** Vector that represents the ready NetIP services.
-                                  This is updated during boot time, while handshake is done between cores
-                                  This is read-only from user space. */
-   uint32_t netip_soft_off;   /** This is used by power manager while handling the NETIP initiated rest and
-				  low battery events.
-				  It is used to gracefully turn OFF all the NETIP services.
-				  The NETIP subsystem will not be clock gated or suspended.
-				  This is read-write from user space. */
-   bool enable_debug;         /** Flag to indicate whether to enable or disable the debug prints */
-   struct mutex lock;         /** to synchronise between the thread that is writing to service_level and thread that is sending message
-                                  This lock may be needed only during boot time. */
+	/** Vector representing the requested NetIP and its services power
+	states. This is write-only from user space. */
+	uint32_t service_level;
+	/** Vector representing the current NetIP and its services power
+	states. This is updated after the service request reply is
+	received.This is read-only from user space. */
+	uint32_t service_status;
+	/** Vector that represents the ready NetIP services. This is updated
+	during boot time, while handshake is done between cores.
+	This is read-only from user space. */
+	uint32_t service_ready;
+	/** This is used by power manager while handling the NETIP initiated
+	rest and low battery events. It is used to gracefully turn OFF all
+	the NETIP services. The NETIP subsystem will not be clock gated or
+	suspended. This is read-write from user space. */
+	uint32_t netip_soft_off;
+	/** Flag to indicate whether to enable or disable the debug prints */
+	bool enable_debug;
+	/** Vector that represents all available NetIP services. This is
+	updated by the services listed in NetIP properties message, the first
+	message received while handshake is done between cores.
+	This is read-only from user space. */
+	uint32_t service_available;
+	/** to synchronise between the thread that is writing to service_level
+	and thread that is sending message. This lock may be needed only during
+	boot time. */
+	struct mutex lock;
 } netss_sysfs_attributes_info_t;
 
 uint32_t netss_get_attribute(uint32_t attr_id, uint32_t service_id);
-- 
2.10.1

