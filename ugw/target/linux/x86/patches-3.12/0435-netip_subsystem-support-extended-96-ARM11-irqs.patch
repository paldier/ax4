From 22c81ac0f268011d0aba798c8eb1a56cdcb57bb4 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Tue, 21 Jun 2016 19:16:20 -0700
Subject: [PATCH 435/639] netip_subsystem: support extended 96 ARM11 irqs

There are 96 ARM11 interrupts and sofar only 64 were supported. Extended
support for 96 interrupts for any future usage from ATOM side.

Signed-off-by: Emmanuel Jillela <emmanuel.jillela@intel.com>
---
 arch/x86/NetIP_SubSystem/netip_subsystem_defs.h |  7 +++---
 arch/x86/NetIP_SubSystem/netip_subsystem_lld.c  | 30 ++++++++++++++++++++-----
 include/linux/netip_subsystem.h                 |  2 +-
 3 files changed, 30 insertions(+), 9 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
index 0948a39..034351e 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_defs.h
@@ -3,7 +3,7 @@
  *
  *  GPL LICENSE SUMMARY
  *
- *  Copyright(c) 2015 Intel Corporation. All rights reserved.
+ *  Copyright(c) 2015-2016 Intel Corporation. All rights reserved.
  *
  *  This program is free software; you can redistribute it and/or modify
  *  it under the terms of version 2 of the GNU General Public License as
@@ -43,13 +43,14 @@
 #define NETSS_DBG_PRINT(fmt, args...) ;
 #endif
 
-#define NETSS_MAX_ARM11_INTR 96
+#define NUM_ARM11_INTR_PER_REG 32
+#define NUM_ARM11_INTR_REGS (NETSS_INTERUPT_ARM11_MAX / NUM_ARM11_INTR_PER_REG)
 
 
 struct net_subsystem_drv_data {
    uint32_t irq_num;          /* The irq number used for Net SubSystem driver */
    uint32_t pending_interrupts;
-   uint32_t pending_arm11_interrupts;
+   uint32_t pending_arm11_interrupts[NUM_ARM11_INTR_REGS]; /* For NETSS_INTERUPT_ARM11_MAX (96) Bundle Interrupts */
    uint32_t ier_reg;  /**NetIP bridge interrupt enable register */
    uint32_t imr_reg;  /**NetIP bridge interrupt mask register */
    bool netss_driver_initialized;
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
index f026276..3149097 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_lld.c
@@ -79,8 +79,21 @@ void netss_stop_handshake_thread(void);
 
 struct net_subsystem_drv_data *pnetss_drv_data;
 
+static unsigned int netss_get_bit_position (unsigned int irq)
+{
+   return irq % NUM_ARM11_INTR_PER_REG;
+}
+
+static unsigned int netss_get_reg_index(unsigned int irq)
+{
+   return irq / NUM_ARM11_INTR_PER_REG;
+}
+
 void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_interrupt_info_t *irq_info)
 {
+   unsigned int reg_indx = 0;
+   unsigned int irq_bit  = 0;
+
    spin_lock(&pnetss_drv_data->irq_lock);
    if(intrpt > NETSS_INTERUPT_MAX)
    {
@@ -114,7 +127,10 @@ void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_
         }
         else
         {
-            if(pnetss_drv_data->pending_arm11_interrupts & (1<<arm11_int_id))
+            reg_indx = netss_get_reg_index(arm11_int_id);
+            irq_bit  = netss_get_bit_position(arm11_int_id);
+
+            if(pnetss_drv_data->pending_arm11_interrupts[reg_indx] & (1 << irq_bit))
             {
                 irq_info->func(pnetss_drv_data->irq_num, irq_info->args);
                 /*Clear interrupt in bridge only if it is present
@@ -123,11 +139,10 @@ void netss_interrupt_register(netss_interrupt_t intrpt, int arm11_int_id, netss_
                 {
                     netss_interrupt_ack(intrpt);
                 }
-
-                pnetss_drv_data->pending_arm11_interrupts &= ~(1<<arm11_int_id);
+                pnetss_drv_data->pending_arm11_interrupts[reg_indx] &= ~(1 << irq_bit);
                 NETSS_DBG_PRINT("Cleared pending interrupt for armm11 %d IIR %08x pending %08x\n", arm11_int_id,
                                         __raw_readl(pnetss_drv_data->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET),
-                                                                     pnetss_drv_data->pending_arm11_interrupts);
+                                                                     pnetss_drv_data->pending_arm11_interrupts[reg_indx]);
             }
         }
     }
@@ -279,6 +294,8 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
     unsigned long flags;
     uint32_t volatile reg_val = 0;
     uint32_t ack_intr = 0;
+    unsigned int reg_indx = 0;
+    unsigned int irq_bit  = 0;
 
     spin_lock_irqsave(&pnet_ss->irq_lock, flags);
     reg_val = __raw_readl(pnet_ss->bridge_reg_base + NETIP_BRIDGE_IIR_OFFSET);
@@ -314,7 +331,10 @@ static irqreturn_t net_subsystem_isr(int irq, void *dev_id)
                         }
                         else
                         {
-                            pnet_ss->pending_arm11_interrupts |=  (1 << j);
+                            reg_indx = netss_get_reg_index(j);
+                            irq_bit  = netss_get_bit_position(j);
+
+                            pnet_ss->pending_arm11_interrupts[reg_indx] |=  (1 << irq_bit);
                             avalanche_intc_disable_irq(j);
                             ack_intr |= (1 << i);
                             NETSS_DBG_PRINT("No irq registered for ARM11 interrupt %d, Marking it pending\n", j) ;
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
index 2f47792..897ea2f 100644
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -62,7 +62,7 @@
 #define NETSS_DEV_PERIPHERAL_SRAM_MMIO_OFFSET (0xFFF0000)
 #define NETSS_DEV_PERIPHERAL_SRAM_MMIO_SIZE   (0x4000)
 
-#define NETSS_INTERUPT_ARM11_MAX (64)  /*ARM11 is a bundle of 64 interrupts */
+#define NETSS_INTERUPT_ARM11_MAX (96)  /*ARM11 is a bundle of 96 interrupts */
 
 typedef enum {
    NETSS_DEV_HW_MAILBOX = 0,
-- 
2.10.1

