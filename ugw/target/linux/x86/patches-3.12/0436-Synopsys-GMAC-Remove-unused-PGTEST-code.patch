From 7c3d40f80dedccd3e770699e12105d4821c530eb Mon Sep 17 00:00:00 2001
From: "Vital Yep, Marco A" <marco.a.vital.yep@intel.com>
Date: Thu, 23 Jun 2016 15:30:17 -0700
Subject: [PATCH 436/639] Synopsys GMAC: Remove unused PGTEST code

Removing unused PGTEST code.

Signed-off-by: Vital Yep, Marco A <marco.a.vital.yep@intel.com>
---
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c    |    7 -
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c   |   68 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c    |  256 ----
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c    |   47 +-
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c   |    2 -
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c    |   26 -
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c | 1466 --------------------
 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h |   67 -
 .../net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h    |  178 ---
 .../net/ethernet/synopsys/DWC_ETH_QOS_yheader.h    |   60 -
 drivers/net/ethernet/synopsys/Kconfig              |    6 -
 drivers/net/ethernet/synopsys/Makefile             |   10 -
 12 files changed, 3 insertions(+), 2190 deletions(-)
 delete mode 100644 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
 delete mode 100644 drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h

diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
index d0c1b44..3bc43a7 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_api.c
@@ -2392,12 +2392,6 @@ void usage_avb()
 			"\n");
 }
 
-void usage_pgtest()
-{
-	usage_common("pgtest");
-	fprintf(stderr, "\n\n");
-}
-
 void usage_split_hdr()
 {
 	usage_common("split_hdr");
@@ -2569,7 +2563,6 @@ void print_all_usage()
 	usage_queue_count();
 	usage_dcb();
 	usage_avb();
-	usage_pgtest();
 	usage_split_hdr();
 	usage_l3_l4_filter();
 	usage_ip4_filter();
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
index 9fed31d..a7c73cf 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -306,11 +306,6 @@ static void DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q(
 		GET_TX_DESC_DMA_ADDR(qInx, i) =
 		    (desc_dma + sizeof(tx_descriptor_t) * i);
 		GET_TX_BUF_PTR(qInx, i) = &buffer[i];
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-		if (DWC_ETH_QOS_alloc_tx_buf_pg(pdata, GET_TX_BUF_PTR(qInx, i),
-			GFP_KERNEL))
-			break;
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 	}
 
 	desc_data->cur_tx = 0;
@@ -319,12 +314,7 @@ static void DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q(
 	desc_data->tx_pkt_queued = 0;
 	desc_data->packet_count = 0;
 	desc_data->free_desc_cnt = TX_DESC_CNT;
-
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	hw_if->tx_desc_init_pg(pdata, qInx);
-#else
 	hw_if->tx_desc_init(pdata, qInx);
-#endif
 	desc_data->cur_tx = 0;
 
 	DBGPR("<--DWC_ETH_QOS_wrapper_tx_descriptor_init_single_q\n");
@@ -366,15 +356,9 @@ static void DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q(
 		GET_RX_DESC_DMA_ADDR(qInx, i) =
 		    (desc_dma + sizeof(rx_descriptor_t) * i);
 		GET_RX_BUF_PTR(qInx, i) = &buffer[i];
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-		if (DWC_ETH_QOS_alloc_rx_buf_pg(pdata, GET_RX_BUF_PTR(qInx, i), GFP_KERNEL))
-			break;
-#else
 		/* allocate skb & assign to each desc */
 		if (pdata->alloc_rx_buf(pdata, GET_RX_BUF_PTR(qInx, i), GFP_KERNEL))
 			break;
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 		wmb();
 	}
 
@@ -383,13 +367,8 @@ static void DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q(
 	desc_data->skb_realloc_idx = 0;
 	desc_data->skb_realloc_threshold = MIN_RX_DESC_CNT;
 	desc_data->pkt_received = 0;
-
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	hw_if->rx_desc_init_pg(pdata, qInx);
-#else
-	hw_if->rx_desc_init(pdata, qInx);
-#endif
 	desc_data->cur_rx = 0;
+	hw_if->rx_desc_init(pdata, qInx);
 
 	DBGPR("<--DWC_ETH_QOS_wrapper_rx_descriptor_init_single_q\n");
 }
@@ -483,10 +462,6 @@ static void DWC_ETH_QOS_tx_free_mem(struct DWC_ETH_QOS_prv_data *pdata)
 	DBGPR("-->DWC_ETH_QOS_tx_free_mem\n");
 	/* free TX descriptor */
 	DWC_ETH_QOS_tx_desc_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	/* free TX skb's */
-	DWC_ETH_QOS_tx_skb_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 	/* free TX buffer */
 	DWC_ETH_QOS_tx_buf_free_mem(pdata, DWC_ETH_QOS_TX_QUEUE_CNT);
 	DBGPR("<--DWC_ETH_QOS_tx_free_mem\n");
@@ -533,36 +508,6 @@ static void DWC_ETH_QOS_tx_skb_free_mem(struct DWC_ETH_QOS_prv_data *pdata,
 	DBGPR("<--DWC_ETH_QOS_tx_skb_free_mem\n");
 }
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-/*!
- * \details This function is used to release Rx socket buffer.
- *
- * \param[in] pdata – pointer to private device structure.
- * \param[in] buffer – pointer to rx wrapper buffer structure.
- *
- * \return void
- */
-static void DWC_ETH_QOS_unmap_rx_skb_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				     struct DWC_ETH_QOS_rx_buffer *buffer)
-{
-	//DBGPR("-->DWC_ETH_QOS_unmap_rx_skb_pg\n");
-
-	/* unmap the first buffer */
-	if (buffer->dma) {
-		dma_unmap_single(&pdata->pdev->dev, buffer->dma,
-				 DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
-		buffer->dma = 0;
-	}
-
-	if (buffer->skb) {
-		dev_kfree_skb_any(buffer->skb);
-		buffer->skb = NULL;
-	}
-
-	//DBGPR("<--DWC_ETH_QOS_unmap_rx_skb_pg\n");
-}
-#endif
-
 /*!
  * \details This function is invoked by other function to free
  * the rx socket buffers.
@@ -582,11 +527,7 @@ static void DWC_ETH_QOS_rx_skb_free_mem_single_q(struct DWC_ETH_QOS_prv_data *pd
 	for (i = 0; i < RX_DESC_CNT; i++) {
 		buffer = GET_RX_BUF_PTR(qInx, i);
 		if (buffer) {
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-			DWC_ETH_QOS_unmap_rx_skb_pg(pdata, );
-#else
-		DWC_ETH_QOS_unmap_rx_skb(pdata, GET_RX_BUF_PTR(qInx, i));
-#endif
+			DWC_ETH_QOS_unmap_rx_skb(pdata, buffer);
 		}
 	}
 	/* there are also some cached data from a chained rx */
@@ -1059,16 +1000,11 @@ err_out_dma_map_fail:
 *
 * \return void
 */
-
 static void DWC_ETH_QOS_unmap_tx_skb(struct DWC_ETH_QOS_prv_data *pdata,
 				     struct DWC_ETH_QOS_tx_buffer *buffer)
 {
 	DBGPR("-->DWC_ETH_QOS_unmap_tx_skb\n");
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
-#endif
-
 	if (buffer->dma) {
 		if (buffer->buf1_mapped_as_page == Y_TRUE)
 			dma_unmap_page((&pdata->pdev->dev), buffer->dma,
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
index 87b1ec4..c915d14 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -36,149 +36,6 @@
 #include "DWC_ETH_QOS_yapphdr.h"
 #include "DWC_ETH_QOS_yregacc.h"
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-
-static int prepare_dev_pktgen(struct DWC_ETH_QOS_prv_data *pdata)
-{
-   uint32_t qInx = 0;
-   /* set MAC loop back mode */
-   DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_LM, 0x1);
-   /* Do not strip received VLAN tag */
-   DWC_REG_WR_FIELD(MAC_VLANTR, MAC_VLANTR_EVLS, 0x0);
-   /* set promiscuous mode */
-   DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_PR, 0x1);
-   /* disable autopad or CRC stripping */
-   DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_ACS, 0x0);
-   /* enable drop tx status */
-   DWC_REG_WR_BIT(MTL_OMR, MTL_OMR_DTXSTS, 0x1);
-   for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-      /* enable avg bits per slot interrupt */
-      DWC_REG_WR_BIT(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_ABPSSIE, 0x1);
-      /* enable OSF mode */
-      DWC_REG_WR_BIT(DMA_TCR(qInx), DMA_TCR_OSP, 0x1);
-      /* disable slot checks */
-      DWC_REG_WR(DMA_SFCSR(qInx), 0x0);
-   }
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure slot count The software
-* can program the number of slots(of duration 125us) over which the
-* average transmitted bits per slot need to be computed for
-* channel 1 to 7 when CBS alogorithm is enabled.
-* \param[in] qInx
-* \param[in] slot_count
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_slot_count(uint32_t qInx, uint8_t slot_count)
-{
-   if (slot_count == 1) {
-      DWC_REG_WR_FIELD(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_SLC, 0x0);
-   } else if (slot_count == 2) {
-      DWC_REG_WR_FIELD(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_SLC, 0x1);
-   } else if (slot_count == 4) {
-      DWC_REG_WR_FIELD(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_SLC, 0x3);
-   } else if (slot_count == 8) {
-      DWC_REG_WR_FIELD(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_SLC, 0x4);
-   } else if (slot_count == 16) {
-      DWC_REG_WR_FIELD(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_SLC, 0x5);
-   }
-
-  return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to enable/disable slot interrupt:
-* When this bit is set,the MAC asserts an interrupt when the average
-* bits per slot status is updated for channel 1 to 7.
-* \param[in] qInx
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int config_slot_interrupt(uint32_t qInx, uint8_t slot_int)
-{
-   DWC_REG_WR_BIT(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_ABPSSIE, slot_int);
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure DMA Tx:Rx/Rx:Tx
-* Priority Ratio These bits control the priority ratio in WRR
-* arbitration between the TX and RX DAM.
-* \param[in] prio_ratio
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_tx_rx_prio_ratio(uint8_t prio_ratio)
-{
-   DWC_REG_WR_FIELD(DMA_BMR, DMA_BMR_PR, prio_ratio);
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure DMA Transmit Arbitration algorithm
-* \param[in] arb_algo
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_dma_tx_arb_algorithm(uint8_t arb_algo)
-{
-   DWC_REG_WR_FIELD(DMA_BMR, DMA_BMR_TAA, arb_algo);
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure DMA Tx Priority When this
-* bit is set, it indicates that the TX DMA has higher priority than
-* the RX DMA during arbitration for the system-side bus.
-* \param[in] prio
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_tx_rx_prio(uint8_t prio)
-{
-   DWC_REG_WR_BIT(DMA_BMR, DMA_BMR_TXPR, prio);
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure DMA Tx/Rx Arbitration Scheme
-* This bit specifies the arbitration scheme between the Tx and Rx paths
-* of all channels.
-* \param[in] prio_policy
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_tx_rx_prio_policy(uint8_t prio_policy)
-{
-   DWC_REG_WR_BIT(DMA_BMR, DMA_BMR_DA, prio_policy);
-   return Y_SUCCESS;
-}
-
-/*!
-* \brief This sequence is used to configure TX Channel Weight
-* \param[in] qInx
-* \param[in] weight
-* \return Success or Failure
-* \retval  0 Success
-* \retval -1 Failure
-*/
-static int set_ch_arb_weights(uint32_t qInx, uint8_t weight)
-{
-   if (weight > 0 && weight < 9)
-      DWC_REG_WR_FIELD(DMA_TCR(qInx), DMA_TCR_TCW, weight - 1);
-   return Y_SUCCESS;
-}
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 /*!
 * \brief This sequence is used to enable/disable MAC loopback mode
 * \param[in] enb_dis
@@ -3138,13 +2995,8 @@ static int configure_dma_channel(uint32_t qInx,
    CFG_PRINT("%s Rx Split header mode\n",
       (pdata->rx_split_hdr ? "Enabled" : "Disabled"));
 
-   /*
-    * For PG don't start TX DMA now.
-    */
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
    /* start TX DMA */
    DWC_REG_WR_BIT(DMA_TCR(qInx), DMA_TCR_ST, 0x1);
-#endif
    /* start RX DMA */
    DWC_REG_WR_BIT(DMA_RCR(qInx), DMA_RCR_SR, 0x1);
 
@@ -3323,102 +3175,6 @@ static int DWC_ETH_QOS_yinit(struct DWC_ETH_QOS_prv_data *pdata)
    return Y_SUCCESS;
 }
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-
-/*!
-* \brief This sequence is used to initialize the tx descriptors.
-* \param[in] pdata
-*/
-
-static void tx_descriptor_init_pg(struct DWC_ETH_QOS_prv_data *pdata,
-               uint32_t qInx)
-{
-   struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
-      GET_TX_WRAPPER_DESC(qInx);
-   tx_descriptor_t *TX_NORMAL_DESC =
-      GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
-   struct DWC_ETH_QOS_tx_buffer *buffer =
-      GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
-   int i;
-   int start_index = tx_desc_data->cur_tx;
-
-   DBGPR("-->tx_descriptor_init_pg\n");
-
-   /* initialze all descriptors. */
-
-   for (i = 0; i < TX_DESC_CNT; i++) {
-      /* update buffer 1 address pointer to zero */
-      TX_NORMAL_DESC->TDES0 = 0;
-      /* update buffer 2 address pointer to zero */
-      TX_NORMAL_DESC->TDES1 = 0;
-      /* set all other control bits (IC, TTSE, B2L & B1L) to zero */
-      TX_NORMAL_DESC->TDES2 = 0;
-      /* set all other control bits (OWN, CTXT, FD, LD, CPC, CIC etc) to zero */
-      TX_NORMAL_DESC->TDES3 = 0;
-
-      INCR_TX_DESC_INDEX(tx_desc_data->cur_tx, 1);
-      TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, tx_desc_data->cur_tx);
-      buffer = GET_TX_BUF_PTR(qInx, tx_desc_data->cur_tx);
-   }
-   /* update the total no of Tx descriptors count */
-   DWC_REG_WR(DMA_TDRLR(qInx), (TX_DESC_CNT - 1));
-   /* update the starting address of desc chain/ring */
-   DWC_REG_WR(DMA_TDLAR(qInx), GET_TX_DESC_DMA_ADDR(qInx, start_index));
-
-   DBGPR("<--tx_descriptor_init_pg\n");
-}
-
-/*!
-* \brief This sequence is used to initialize the rx descriptors.
-* \param[in] pdata
-*/
-
-static void rx_descriptor_init_pg(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
-{
-   struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
-       GET_RX_WRAPPER_DESC(qInx);
-   struct DWC_ETH_QOS_rx_buffer *buffer =
-       GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
-   rx_descriptor_t *RX_NORMAL_DESC =
-       GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
-   int i;
-   int start_index = rx_desc_data->cur_rx;
-   int last_index;
-
-   DBGPR("-->rx_descriptor_init_pg\n");
-
-   /* initialize all desc */
-
-   for (i = 0; i < RX_DESC_CNT; i++) {
-      memset(RX_NORMAL_DESC, 0, sizeof(rx_descriptor_t));
-      /* update buffer 1 address pointer */
-      RX_NORMAL_DESC->RDES0 = buffer->dma;
-      /* set to zero  */
-      RX_NORMAL_DESC->RDES1 = 0;
-
-      /* set buffer 2 address pointer to zero */
-      RX_NORMAL_DESC->RDES2 = 0;
-      /* set control bits - OWN, INTE and BUF1V */
-      RX_NORMAL_DESC->RDES3 = 0xc1000000;
-
-      INCR_RX_DESC_INDEX(rx_desc_data->cur_rx, 1);
-      RX_NORMAL_DESC =
-         GET_RX_DESC_PTR(qInx, rx_desc_data->cur_rx);
-      buffer = GET_RX_BUF_PTR(qInx, rx_desc_data->cur_rx);
-   }
-   /* update the total no of Rx descriptors count */
-   DWC_REG_WR_FIELD(DMA_RDRLR(qInx), DMA_RDRLR_RDRL, (RX_DESC_CNT - 1));
-   /* update the Rx Descriptor Tail Pointer */
-   last_index = GET_CURRENT_RCVD_LAST_DESC_INDEX(start_index, 0);
-   DWC_REG_WR(DMA_RDTPR(qInx), GET_RX_DESC_DMA_ADDR(qInx, last_index));
-   /* update the starting address of desc chain/ring */
-   DWC_REG_WR(DMA_RDLAR(qInx), GET_RX_DESC_DMA_ADDR(qInx, start_index));
-
-   DBGPR("<--rx_descriptor_init_pg\n");
-}
-
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 /*!
 * \brief API to initialize the function pointers.
 *
@@ -3563,18 +3319,6 @@ void DWC_ETH_QOS_init_function_ptrs_dev(hw_interface_t *hw_if)
    hw_if->config_low_credit = config_low_credit;
    hw_if->config_slot_num_check = config_slot_num_check;
    hw_if->config_advance_slot_num_check = config_advance_slot_num_check;
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   hw_if->tx_desc_init_pg = tx_descriptor_init_pg;
-   hw_if->rx_desc_init_pg = rx_descriptor_init_pg;
-   hw_if->set_ch_arb_weights = set_ch_arb_weights;
-   hw_if->config_slot_interrupt = config_slot_interrupt;
-   hw_if->set_slot_count = set_slot_count;
-   hw_if->set_tx_rx_prio_policy = set_tx_rx_prio_policy;
-   hw_if->set_tx_rx_prio = set_tx_rx_prio;
-   hw_if->set_tx_rx_prio_ratio = set_tx_rx_prio_ratio;
-   hw_if->set_dma_tx_arb_algorithm = set_dma_tx_arb_algorithm;
-   hw_if->prepare_dev_pktgen = prepare_dev_pktgen;
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 
    /* for hw time stamping */
    hw_if->config_hw_time_stamping = config_hw_time_stamping;
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
index 256023a..5da1ecc 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -1464,13 +1464,9 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
    }
 
    pdata->irq_number = dev->irq;
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   ret = request_irq(pdata->irq_number, DWC_ETH_QOS_ISR_pg,
-           IRQF_SHARED, DEV_NAME, pdata);
-#else
    ret = request_irq(pdata->irq_number, DWC_ETH_QOS_ISR,
            0, DEV_NAME, pdata);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
+
    if (ret != 0) {
       printk(KERN_ALERT "Unable to register IRQ %d\n", pdata->irq_number);
       ret = -EBUSY;
@@ -1486,16 +1482,12 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
    }
 
    /* default configuration */
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   DWC_ETH_QOS_default_confs(pdata);
-#else
    DWC_ETH_QOS_default_common_confs(pdata);
    DWC_ETH_QOS_default_tx_confs(pdata);
    DWC_ETH_QOS_default_rx_confs(pdata);
    DWC_ETH_QOS_configure_rx_fun_ptr(pdata);
 
    DWC_ETH_QOS_napi_enable(pdata);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 
    DWC_ETH_QOS_set_rx_mode(dev);
    desc_if->wrapper_tx_desc_init(pdata);
@@ -1514,17 +1506,12 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
    if (pdata->hw_feat.pcs_sel)
       hw_if->control_an(1, 0);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   hw_if->prepare_dev_pktgen(pdata);
-#endif
-
    if (pdata->phydev) {
       phy_start(pdata->phydev);
       pdata->eee_enabled = DWC_ETH_QOS_eee_init(pdata);
    } else
       pdata->eee_enabled = false;
 
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
    if (pdata->mux_cfg == GMCR_GMAC5_TO_GMAC4) {
       hw_if->set_full_duplex();
       hw_if->set_speed(pdata, 5000);
@@ -1543,10 +1530,6 @@ static int DWC_ETH_QOS_open(struct net_device *dev)
    netss_interrupt_enable(NETSS_INTERUPT_GBE);
 #endif
 
-#else
-   netif_tx_disable(dev);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
    CFG_PRINT("<--DWC_ETH_QOS_open\n");
 
    return ret;
@@ -1594,11 +1577,9 @@ static int DWC_ETH_QOS_close(struct net_device *dev)
       if (pdata->phydev)
          phy_stop(pdata->phydev);
 
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
       hrtimer_cancel(&pdata->rx_itr_timer);
       netif_tx_disable(dev);
       DWC_ETH_QOS_napi_disable(pdata);
-#endif
 
       /* Stop DMA TX/RX */
       DWC_ETH_QOS_stop_all_ch_tx_dma(pdata);
@@ -1618,10 +1599,6 @@ static int DWC_ETH_QOS_close(struct net_device *dev)
       pdata->irq_number = 0;
    }
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   del_timer(&pdata->pg_timer);
-#endif
-
    CFG_PRINT("<--DWC_ETH_QOS_close\n");
 
    return Y_SUCCESS;
@@ -1857,12 +1834,6 @@ static void DWC_ETH_QOS_set_rx_mode(struct net_device *dev)
 
    spin_lock_irqsave(&pdata->lock, flags);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   DBGPR("PG Test running, no parameters will be changed\n");
-   spin_unlock_irqrestore(&pdata->lock, flags);
-   return;
-#endif
-
    if (dev->flags & IFF_PROMISC) {
       DBGPR_FILTER("PROMISCUOUS MODE (Accept all packets irrespective of DA)\n");
       pr_mode = 1;
@@ -2025,11 +1996,6 @@ static int DWC_ETH_QOS_start_xmit(struct sk_buff *skb, struct net_device *dev)
 
    spin_lock_irqsave(&pdata->tx_lock, flags);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   retval = NETDEV_TX_BUSY;
-   goto tx_netdev_return;
-#endif
-
    if (skb->len <= 0) {
       dev_kfree_skb_any(skb);
       printk(KERN_ERR "%s : Empty skb received from stack\n",
@@ -4805,11 +4771,6 @@ static int DWC_ETH_QOS_handle_prv_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
    case DWC_ETH_QOS_PFC_CMD:
       ret = DWC_ETH_QOS_config_pfc(dev, req->flags);
       break;
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   case DWC_ETH_QOS_PG_TEST:
-      ret = DWC_ETH_QOS_handle_pg_ioctl(pdata, (void *)req);
-      break;
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
    default:
       ret = -EOPNOTSUPP;
       printk(KERN_ALERT "Unsupported command call\n");
@@ -5082,12 +5043,10 @@ static int DWC_ETH_QOS_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 
    DBGPR("-->DWC_ETH_QOS_ioctl\n");
 
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
    if ((!netif_running(dev)) || (!pdata->phydev)) {
       DBGPR("<--DWC_ETH_QOS_ioctl - error\n");
       return -EINVAL;
    }
-#endif
 
    spin_lock(&pdata->lock);
    switch (cmd) {
@@ -5156,10 +5115,6 @@ static int DWC_ETH_QOS_change_mtu(struct net_device *dev, int new_mtu)
 
    CFG_PRINT("-->DWC_ETH_QOS_change_mtu: new_mtu:%d\n", new_mtu);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   printk(KERN_ALERT "jumbo frames not supported with PG test\n");
-   return -EOPNOTSUPP;
-#endif
    if (dev->mtu == new_mtu) {
       printk(KERN_ALERT "%s: is already configured to %d mtu\n",
              dev->name, new_mtu);
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
index 8707451..0b460c4 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -483,9 +483,7 @@ static int DWC_ETH_QOS_init_phy(struct net_device *dev)
 		phydev->supported = PHY_BASIC_FEATURES;
 	}
 
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
 	phydev->supported |= (SUPPORTED_Pause | SUPPORTED_Asym_Pause);
-#endif
 
 	phydev->advertising = phydev->supported;
 
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
index e8631df..f3a981a 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -546,7 +546,6 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
       printk(KERN_ALERT "%s: MDIO is not present\n\n", DEV_NAME);
    }
 
-#ifndef DWC_ETH_QOS_CONFIG_PGTEST
    /* enabling and registration of irq with magic wakeup */
    if (1 == pdata->hw_feat.mgk_sel) {
       device_set_wakeup_capable(&pdev->dev, 1);
@@ -597,27 +596,10 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
    DWC_ETH_QOS_ptp_init(pdata);
 #endif   /* end of DWC_ETH_QOS_CONFIG_PTP */
 
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
    spin_lock_init(&pdata->lock);
    spin_lock_init(&pdata->tx_lock);
    spin_lock_init(&pdata->pmt_lock);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   ret = DWC_ETH_QOS_alloc_pg(pdata);
-   if (ret < 0) {
-      printk(KERN_ALERT "ERROR:Unable to allocate PG memory\n");
-      goto err_out_pg_failed;
-   }
-   printk(KERN_ALERT "\n");
-   printk(KERN_ALERT "/*******************************************\n");
-   printk(KERN_ALERT "*\n");
-   printk(KERN_ALERT "* PACKET GENERATOR MODULE ENABLED IN DRIVER\n");
-   printk(KERN_ALERT "*\n");
-   printk(KERN_ALERT "*******************************************/\n");
-   printk(KERN_ALERT "\n");
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
    ret = register_netdev(dev);
    if (ret) {
       printk(KERN_ALERT "%s: Net device registration failed\n",
@@ -658,10 +640,6 @@ int DWC_ETH_QOS_probe(struct pci_dev *pdev,
    DWC_ETH_QOS_ptp_remove(pdata);
 #endif   /* end of DWC_ETH_QOS_CONFIG_PTP */
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   DWC_ETH_QOS_free_pg(pdata);
-err_out_pg_failed:
-#endif
    if (1 == pdata->hw_feat.sma_sel)
       DWC_ETH_QOS_mdio_unregister(dev);
 
@@ -731,10 +709,6 @@ void DWC_ETH_QOS_remove(struct pci_dev *pdev)
 
    unregister_netdev(dev);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-   DWC_ETH_QOS_free_pg(pdata);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 #ifdef DWC_ETH_QOS_CONFIG_DEBUGFS
    remove_debug_files();
 #endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
deleted file mode 100644
index 164bda1..0000000
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.c
+++ /dev/null
@@ -1,1466 +0,0 @@
-/* =========================================================================
- * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
- * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
- * otherwise expressly agreed to in writing between Synopsys and you.
- *
- * The Software IS NOT an item of Licensed Software or Licensed Product under
- * any End User Software License Agreement or Agreement for Licensed Product
- * with Synopsys or any supplement thereto.  Permission is hereby granted,
- * free of charge, to any person obtaining a copy of this software annotated
- * with this license and the Software, to deal in the Software without
- * restriction, including without limitation the rights to use, copy, modify,
- * merge, publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so, subject
- * to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
- * DAMAGE.
- * ========================================================================= */
-
-/*!@file: DWC_ETH_QOS_drv.c
- * @brief: Driver functions.
- */
-
-#include "DWC_ETH_QOS_yheader.h"
-#include "DWC_ETH_QOS_yapphdr.h"
-#include "DWC_ETH_QOS_pktgen.h"
-
-extern uint32_t dwc_eth_qos_pci_base_addr;
-
-#include "DWC_ETH_QOS_yregacc.h"
-
-static int DWC_ETH_QOS_GStatus;
-
-static int DWC_ETH_QOS_FRAME_PATTERN_CH[8] = {
-	0x11111111,
-	0x22222222,
-	0x33333333,
-	0x44444444,
-	0x55555555,
-	0x66666666,
-	0x77777777,
-	0x88888888,
-};
-
-static int DWC_ETH_QOS_frame_hdrs[8][4] = {
-	/* for channel 0 : Non tagged header
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x800
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x00000008},
-
-	/* for channel 1 : VLAN tagged header with priority 1
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64200081},
-
-	/* for channel 2 : VLAN tagged header with priority 2
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64400081},
-
-	/* for channel 3 : VLAN tagged header with priority 3
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64600081},
-
-	/* for channel 4 : VLAN tagged header with priority 4
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64800081},
-
-	/* for channel 5 : VLAN tagged header with priority 5
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64A00081},
-
-	/* for channel 6 : VLAN tagged header with priority 6
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64C00081},
-
-	/* for channel 7 : VLAN tagged header with priority 7
-	 * Dst addr : 0x00:0x0D:0x56:0x73:0xD0:0xF3
-	 * Src addr : 0x00:0x55:0x7B:0xB5:0x7D:0xF7
-	 * Type/Length : 0x8100
-	 * */
-	{0x73560D00, 0x5500F3D0, 0xF77DB57B, 0x64E00081},
-};
-
-
-/*!
-* \brief API to receiv the data from device.
-*
-* \details This function reads as many packets are possible from
-* device, reinitialize the descriptor buffer pointers and other
-* control bits such that device owns the descriptor. It also does
-* some housekeeping work to manage the descriptors.
-*
-* \param[in] pdata - pointer to private data structure.
-* \param[in] qInx - DMA channel/queue no. to be checked for packet.
-*
-* \return integer
-*
-* \retval number of packets received.
-*/
-static int DWC_ETH_QOS_poll_pg_sq(struct DWC_ETH_QOS_prv_data *pdata,
-				unsigned int qInx)
-{
-	struct DWC_ETH_QOS_rx_wrapper_descriptor *desc_data =
-		GET_RX_WRAPPER_DESC(qInx);
-	struct net_device *dev = pdata->dev;
-	rx_descriptor_t *RX_NORMAL_DESC = NULL;
-	struct DWC_ETH_QOS_rx_buffer *buffer = NULL;
-	unsigned int varrx_error_counters = 0;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
-		&(pdata->pg->pg_ch_input[qInx]);
-	int received = 0;
-	hw_interface_t *hw_if = &pdata->hw_if;
-	struct sk_buff *skb = NULL;
-
-	DBGPR_PG("-->DWC_ETH_QOS_poll_pg_sq: qInx = %u\n", qInx);
-
-	while (1) {
-		DBGPR_PG("cur_rx = %d\n", desc_data->cur_rx);
-		RX_NORMAL_DESC = GET_RX_DESC_PTR(qInx, desc_data->cur_rx);
-		buffer = GET_RX_BUF_PTR(qInx, desc_data->cur_rx);
-
-		/* reset rx packets attributes */
-		memset(&(pdata->rx_pkt_features), 0,
-		       sizeof(struct s_rx_pkt_features));
-		/* reset error counters */
-		pdata->rx_error_counters = 0;
-		buffer->len = 0;
-
-		hw_if->dev_read(pdata, qInx);
-
-		varrx_error_counters = pdata->rx_error_counters;
-		/* no more data to read */
-		if ((buffer->len == 0x0) && (varrx_error_counters == 0x0))
-			break;
-
-		/* assign it to new skb */
-		skb = buffer->skb;
-		/* good packet */
-		if (varrx_error_counters == 0) {
-			dev->last_rx = jiffies;
-			/* update the statistics */
-			dev->stats.rx_packets++;
-			dev->stats.rx_bytes += buffer->len;
-			pg_ch_input->ch_FramecountRx++;
-
-			dma_sync_single_for_cpu(&pdata->pdev->dev, buffer->dma,
-					DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
-#ifdef DWC_ETH_QOS_ENABLE_RX_PKT_DUMP
-			if (0 == (pg_ch_input->ch_FramecountRx % 500)) {
-				//print_pkt(skb, buffer->len, 0, (desc_data->cur_rx));
-				dump_rx_desc(qInx, RX_NORMAL_DESC, desc_data->cur_rx);
-			}
-#endif
-		} else {
-			DBGPR_PG("Error in received pkt, hence failed to pass it to upper layer\n");
-			dev->stats.rx_errors++;
-			DWC_ETH_QOS_update_rx_errors(dev, varrx_error_counters);
-		}
-
-		/* Reassign same buffer pointer and give ownership to DMA */
-		//memset(buffer->skb->data, 0, buffer->len);
-		/* update buffer 1 address pointer */
-		RX_NORMAL_DESC_RDES0_Ml_Wr(RX_NORMAL_DESC->RDES0, buffer->dma);
-		/* set to zero */
-		RX_NORMAL_DESC_RDES1_Ml_Wr(RX_NORMAL_DESC->RDES1, 0);
-		/* set buffer 2 address pointer to zero */
-		RX_NORMAL_DESC_RDES2_Ml_Wr(RX_NORMAL_DESC->RDES2, 0);
-		/* set control bits - OWN, INTE and BUF1V */
-		RX_NORMAL_DESC_RDES3_Ml_Wr(RX_NORMAL_DESC->RDES3, (0xc1000000));
-
-		/* update the Rx Tail Pointer Register with address of
-		 * descriptors from which data is read */
-		DMA_RDTP_RPDR_RgWr(qInx, GET_RX_DESC_DMA_ADDR(qInx, desc_data->cur_rx));
-
-		received++;
-		INCR_RX_DESC_INDEX(desc_data->cur_rx, 1);
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_poll_pg_sq: received = %d\n", received);
-
-	return received;
-}
-
-/*!
-* \brief API to receiv the data from device.
-*
-* \details This function is called from ISR upon receive interrupt.
-* This function will call other helper function to read the packets
-* from all DMA channel.
-*
-* \param[in] pdata - pointer to private data structure.
-*
-* \return void
-*/
-static void DWC_ETH_QOS_poll_pg(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	unsigned int qInx;
-	int received = 0;
-
-	DBGPR_PG("-->DWC_ETH_QOS_poll_pg\n");
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
-		received = DWC_ETH_QOS_poll_pg_sq(pdata, qInx);
-		DBGPR_PG("Received %d packets from RX queue %u\n",
-			received, qInx);
-	}
-
-	/* Enable all ch RX interrupt */
-	DWC_ETH_QOS_enable_rx_interrupts(pdata);
-
-	DBGPR_PG("<--DWC_ETH_QOS_poll_pg\n");
-}
-
-
-/*!
-* \brief API to update the tx status.
-*
-* \details This function is called from ISR upon transmit complete
-* interrupt to check the status of packet transmitted by device. It
-* also updates the private data structure fields.
-*
-* \param[in] pdata - pointer to private data structure.
-* \param[in] qInx - DMA channel number.
-*
-* \return void
-*/
-static void DWC_ETH_QOS_tx_interrupt_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				     uint32_t qInx)
-{
-	struct net_device *dev = pdata->dev;
-	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data =
-	    GET_TX_WRAPPER_DESC(qInx);
-	tx_descriptor_t *txptr = NULL;
-	struct DWC_ETH_QOS_tx_buffer *buffer = NULL;
-	hw_interface_t *hw_if = &(pdata->hw_if);
-	int err_incremented;
-	uint32_t reg_tail_ptr = 0, var_tail_ptr = 0, tail_ptr = 0, head_ptr = 0;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
-		&(pdata->pg->pg_ch_input[qInx]);
-
-	DBGPR_PG("-->DWC_ETH_QOS_tx_interrupt_pg: dirty_tx = %d, qInx = %u\n",
-			desc_data->dirty_tx, qInx);
-
-	while (1) {
-		txptr = GET_TX_DESC_PTR(qInx, desc_data->dirty_tx);
-		buffer = GET_TX_BUF_PTR(qInx, desc_data->dirty_tx);
-
-		if (!hw_if->tx_complete(txptr))
-			break;
-
-		dev->stats.tx_bytes += buffer->len;
-
-		/* update the tx error if any by looking at last segment
-		 * for NORMAL descriptors
-		 * */
-		if ((hw_if->get_tx_desc_ls(txptr)) && !(hw_if->get_tx_desc_ctxt(txptr))) {
-			err_incremented = 0;
-			if (txptr->TDES3 & 0x8000)
-				dump_tx_desc(pdata, desc_data->dirty_tx, desc_data->dirty_tx, 0, qInx);
-
-			if (hw_if->tx_window_error) {
-				if (hw_if->tx_window_error(txptr)) {
-					err_incremented = 1;
-					dev->stats.tx_window_errors++;
-				}
-			}
-			if (hw_if->tx_aborted_error) {
-				if (hw_if->tx_aborted_error(txptr)) {
-					err_incremented = 1;
-					dev->stats.tx_aborted_errors++;
-					if (hw_if->tx_handle_aborted_error)
-						hw_if->tx_handle_aborted_error(txptr);
-				}
-			}
-			if (hw_if->tx_carrier_lost_error) {
-				if (hw_if->tx_carrier_lost_error(txptr)) {
-					err_incremented = 1;
-					dev->stats.tx_carrier_errors++;
-				}
-			}
-			if (hw_if->tx_fifo_underrun) {
-				if (hw_if->tx_fifo_underrun(txptr)) {
-					dev->stats.tx_fifo_errors++;
-					if (hw_if->tx_update_fifo_threshold)
-						hw_if->tx_update_fifo_threshold(txptr);
-				}
-			}
-			if (hw_if->tx_get_collision_count)
-				dev->stats.collisions +=
-				    hw_if->tx_get_collision_count(txptr);
-
-			if (err_incremented == 1) {
-				dev->stats.tx_errors++;
-				printk(KERN_ALERT "Error in transmission of packet\n");
-			}
-			dev->stats.tx_packets++;
-			pg_ch_input->ch_FramecountTx++;
-		}
-		else {
-			if (!hw_if->get_tx_desc_ls(txptr))
-				printk(KERN_ALERT "LS not set for %d\n", desc_data->dirty_tx);
-			if (hw_if->get_tx_desc_ctxt(txptr))
-				printk(KERN_ALERT "Context desc in %d\n", desc_data->dirty_tx);
-		}
-
-		/* reset the descriptor so that driver/host can reuse it */
-		hw_if->tx_desc_reset(desc_data->dirty_tx, pdata, qInx);
-
-		if ((pdata->prepare_pg_packet == Y_TRUE)) {
-			if (pg_ch_input->ch_debug_mode == 0) {
-				/* reassign the same buffer pointers and make it ready for transmission */
-				DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_data->dirty_tx, qInx);
-				/* issue a poll command to Tx DMA by writing address
-				 * of next immediate free descriptor */
-				tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
-				DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
-			} else {
-				/* DEBUG ON */
-				if (pg_ch_input->ch_FramecountTx <= pg_ch_input->ch_desc_prepare) {
-					/* reassign the same buffer pointers and make it ready for transmission */
-					DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_data->dirty_tx, qInx);
-					/* issue a poll command to Tx DMA by writing address
-					* of next immediate free descriptor */
-					tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
-					DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
-				}
-			}
-		}
-
-		INCR_TX_DESC_INDEX(desc_data->dirty_tx, 1);
-	}
-
-	/* debug print */
-	if (pg_ch_input->interrupt_prints && !(pg_ch_input->tx_interrupts % 1) &&
-			(pg_ch_input->ch_FramecountTx <= 8 /*|| pg_ch_input->ch_FramecountTx >= TX_DESC_CNT*/)) {
-		var_tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_data->dirty_tx);
-		DMA_TDTP_TPDR_RgRd(qInx, reg_tail_ptr);
-		DMA_CHTDR_RgRd(qInx, head_ptr);
-		printk(KERN_ALERT
-				"%d] Tail @ run     [%3llu]%#x,r%#x\n"
-				"    Head @ run     [%3llu]%#x\n"
-				"    dirty_tx @ run  %d\n"
-				"    ch_FramecountTx %lu\n\n",
-				qInx,
-				GET_TX_DESC_IDX(qInx, var_tail_ptr), var_tail_ptr, reg_tail_ptr,
-				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
-				desc_data->dirty_tx,
-				pg_ch_input->ch_FramecountTx);
-		pg_ch_input->interrupt_prints--;
-	}
-	pg_ch_input->tx_interrupts++;
-
-	DBGPR_PG("<--DWC_ETH_QOS_tx_interrupt_pg\n");
-}
-
-
-static void DWC_ETH_QOS_save_abs_count(struct DWC_ETH_QOS_prv_data *pdata,
-		uint32_t qInx)
-{
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	uint32_t varMTL_QESR = 0;
-
-	MTL_QESR_RgRd(qInx, varMTL_QESR);
-	if (varMTL_QESR & 0x1000000) {
-		switch (pg_ch_input[qInx].ch_operating_mode) {
-		case eDWC_ETH_QOS_QDCB:
-			pg_ch_input[qInx].ch_AvgBits += (varMTL_QESR & 0xffffff);
-			break;
-
-		case eDWC_ETH_QOS_QAVB:
-			// TODO: calculation pending
-			pg_ch_input[qInx].ch_AvgBits += (varMTL_QESR & 0xffffff);
-			break;
-		}
-		pg_ch_input[qInx].ch_AvgBits_interrupt_count++;
-	}
-
-	return;
-}
-
-/*!
-* \brief Interrupt Service Routine
-*
-* \details This function is invoked by Linux when there is any interrupt
-* from GMAC. This function will check for all interrupts and call
-* appropriate functions to service them.
-*
-* \param[in] irq         - interrupt number for particular device
-* \param[in] device_id   - pointer to device structure
-*
-* \return integer
-*
-* \retval IRQ_HANDLED if inerrupt is handled successfully and
-*         IRQ_NONE if interrupt is not ours.
-*/
-irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg(int irq, void *device_id)
-{
-	uint32_t varDMA_ISR;
-	uint32_t varDMA_SR;
-	uint32_t varDMA_IER;
-	struct DWC_ETH_QOS_prv_data *pdata =
-	    (struct DWC_ETH_QOS_prv_data *)device_id;
-	uint32_t qInx;
-
-	DBGPR_PG("-->DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg\n");
-
-	DMA_ISR_RgRd(varDMA_ISR);
-	if (varDMA_ISR == 0x0)
-		return IRQ_NONE;
-
-	DBGPR_PG("DMA_ISR = %#lx\n", varDMA_ISR);
-
-	/* Handle DMA interrupts */
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		DMA_SR_RgRd(qInx, varDMA_SR);
-		DMA_IER_RgRd(qInx, varDMA_IER);
-
-		/* handle only those DMA interrupts which are enabled */
-		varDMA_SR = (varDMA_SR & varDMA_IER);
-
-		DBGPR_PG("DMA_SR[%d] = %#lx\n", qInx, varDMA_SR);
-
-		if (varDMA_SR == 0)
-			continue;
-
-		if (GET_VALUE(varDMA_SR, DMA_SR_TI_LPOS, DMA_SR_TI_HPOS) & 1) {
-			DWC_ETH_QOS_tx_interrupt_pg(pdata, qInx);
-			DMA_SR_TI_UdfWr(qInx, 1);
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_TPS_LPOS, DMA_SR_TPS_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = -E_DMA_SR_TPS;
-			printk(KERN_ALERT "%d] TPS Interrupt\n", qInx);
-			DMA_SR_TPS_UdfWr(qInx, 1);
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_TBU_LPOS, DMA_SR_TBU_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = -E_DMA_SR_TBU;
-			//if (pdata->prepare_pg_packet == Y_FALSE) {
-				printk(KERN_ALERT "%d] TBU Interrupt\n", qInx);
-				pdata->pg->channel_running[qInx] = Y_FALSE;
-			//}
-			DMA_SR_TBU_UdfWr(qInx, 1);
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_RI_LPOS, DMA_SR_RI_HPOS) & 1) {
-			DWC_ETH_QOS_disable_rx_interrupts(pdata);
-			DWC_ETH_QOS_poll_pg(pdata);
-			DMA_SR_RI_UdfWr(qInx, 1);
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_RBU_LPOS, DMA_SR_RBU_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = -E_DMA_SR_RBU;
-			DMA_SR_RBU_UdfWr(qInx, 1);
-			printk(KERN_ALERT "RBU Interrupt\n");
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_RPS_LPOS, DMA_SR_RPS_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = -E_DMA_SR_RPS;
-			DMA_SR_RPS_UdfWr(qInx, 1);
-			printk(KERN_ALERT "RPS Interrupt\n");
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_RWT_LPOS, DMA_SR_RWT_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = S_DMA_SR_RWT;
-		}
-		if (GET_VALUE(varDMA_SR, DMA_SR_FBE_LPOS, DMA_SR_FBE_HPOS) & 1) {
-			DWC_ETH_QOS_GStatus = -E_DMA_SR_FBE;
-			DMA_SR_FBE_UdfWr(qInx, 1);
-			DBGPR_PG("FATAL bus error interrupt\n");
-		}
-	}
-
-	/* MTL Interrupt handler */
-	if (GET_VALUE(varDMA_ISR, DMA_ISR_MTLIS_LPOS, DMA_ISR_MTLIS_HPOS) & 1) {
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			/* ABS Interrupt handler */
-			DWC_ETH_QOS_save_abs_count(pdata, qInx);
-		}
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg\n");
-
-	return IRQ_HANDLED;
-
-}
-
-/*!
- * \brief api to initialize default values.
- *
- * \details This function is used to initialize differnet parameters to
- * default values which are common parameters between Tx and Rx path.
- *
- * \param[in] pdata – pointer to private data structure.
- *
- * \return void
- */
-void DWC_ETH_QOS_default_confs(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data = NULL;
-	struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data = NULL;
-	uint32_t qInx;
-
-	pdata->incr_incrx = DWC_ETH_QOS_INCR_ENABLE;
-	pdata->flow_ctrl = 0;
-	pdata->oldflow_ctrl = 0;
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		tx_desc_data = GET_TX_WRAPPER_DESC(qInx);
-
-		tx_desc_data->tx_threshold_val = DWC_ETH_QOS_TX_THRESHOLD_32;
-		tx_desc_data->tsf_on = DWC_ETH_QOS_TSF_ENABLE;
-		tx_desc_data->osf_on = DWC_ETH_QOS_OSF_ENABLE;
-		tx_desc_data->tx_pbl = DWC_ETH_QOS_PBL_16;
-	}
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_RX_QUEUE_CNT; qInx++) {
-		rx_desc_data = GET_RX_WRAPPER_DESC(qInx);
-
-		rx_desc_data->rx_threshold_val = DWC_ETH_QOS_RX_THRESHOLD_64;
-		rx_desc_data->rsf_on = DWC_ETH_QOS_RSF_DISABLE;
-		rx_desc_data->rx_pbl = DWC_ETH_QOS_PBL_16;
-	}
-}
-
-/*!
-* \brief API to prepare descriptor.
-*
-* \details This function is called by other driver function to prepare
-* the transmit descriptor.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] txptr   - pointer to transmit descriptor structure
-* \param[in] buffer  - pointer to transmit buffer structure
-* \param[in] i       - descriptor index
-* \param[in] qInx    - DMA channel number
-*
-* \return void
-*/
-static void DWC_ETH_QOS_prepare_desc(struct DWC_ETH_QOS_prv_data *pdata,
-				tx_descriptor_t *txptr,
-				struct DWC_ETH_QOS_tx_buffer *buffer,
-				int i,
-				unsigned int qInx)
-{
-	//DBGPR_PG("-->DWC_ETH_QOS_prepare_desc\n");
-
-	/* update packet address */
-	TX_NORMAL_DESC_TDES0_Ml_Wr(txptr->TDES0, buffer->dma);
-	/* update the packet length */
-	TX_NORMAL_DESC_TDES2_HL_B1L_Mlf_Wr(txptr->TDES2, buffer->len);
-	/* update the frame length */
-	TX_NORMAL_DESC_TDES3_FL_Mlf_Wr(txptr->TDES3, buffer->len);
-	/* set Interrupt on Completion for last descriptor */
-	TX_NORMAL_DESC_TDES2_IC_Mlf_Wr(txptr->TDES2, 0x1);
-	/* Mark it as First Descriptor */
-	TX_NORMAL_DESC_TDES3_FD_Mlf_Wr(txptr->TDES3, 0x1);
-	/* Mark it as LAST descriptor */
-	TX_NORMAL_DESC_TDES3_LD_Mlf_Wr(txptr->TDES3, 0x1);
-	/* Disable CRC and Pad Insertion */
-	TX_NORMAL_DESC_TDES3_CPC_Mlf_Wr(txptr->TDES3, 0);
-	/* Mark it as NORMAL descriptor */
-	TX_NORMAL_DESC_TDES3_CTXT_Mlf_Wr(txptr->TDES3, 0);
-	/* set slot number */
-	TX_NORMAL_DESC_TDES3_SLOTNUM_TCPHDRLEN_Mlf_Wr(txptr->TDES3, buffer->slot_number);
-	/* set OWN bit at end to avoid race condition */
-	TX_NORMAL_DESC_TDES3_OWN_Mlf_Wr(txptr->TDES3, 0x1);
-
-	//DBGPR_PG("<--DWC_ETH_QOS_prepare_desc\n");
-}
-
-
-/*!
-* \brief API to prepare tx descriptor.
-*
-* \details This function will prepare all DMA channel Tx descriptor
-* in advance before starting the Tx DMA engine.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_prepare_tx_packets_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data = NULL;
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	uint32_t head_ptr = 0, tail_ptr = 0, desc_ring_ptr = 0, i, qInx, frame_size;
-	unsigned short ch_tx_desc_slot_no_start = 0;
-	unsigned short ch_tx_desc_slot_no_skip = 0;
-	unsigned int tx_pkt_cnt = 0;
-	int desc_idx = 0;
-
-	DBGPR_PG("-->DWC_ETH_QOS_prepare_tx_packets_for_pg_test\n");
-
-	/* Descriptor memory allocation for transmission */
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		tx_descriptor_t *txptr = NULL;
-		struct DWC_ETH_QOS_tx_buffer *buffer = NULL;
-		unsigned int *skb_data = NULL;
-		unsigned int avtype = DWC_ETH_QOS_AVTYPE;
-		int payload_cnt = 0;
-		desc_data = GET_TX_WRAPPER_DESC(qInx);
-
-		/* for channel 0 no slot number checking */
-		if (qInx > 0) {
-			ch_tx_desc_slot_no_start = pg_ch_input[qInx].ch_tx_desc_slot_no_start;
-			ch_tx_desc_slot_no_skip = pg_ch_input[qInx].ch_tx_desc_slot_no_skip;
-		}
-
-		if (pg_ch_input[qInx].ch_debug_mode == 1) {
-			DMA_CHTDR_RgRd(qInx, head_ptr);
-			desc_idx = GET_TX_DESC_IDX(qInx, head_ptr);
-			if (pg_ch_input[qInx].ch_max_tx_frame_cnt >= TX_DESC_CNT) {
-				tx_pkt_cnt = TX_DESC_CNT;
-				pg_ch_input[qInx].ch_desc_prepare =
-					(pg_ch_input[qInx].ch_max_tx_frame_cnt - TX_DESC_CNT);
-				pg_ch_input[qInx].ch_desc_prepare++;
-			}
-			else {
-				pg_ch_input[qInx].ch_desc_prepare = 0;
-				tx_pkt_cnt = (pg_ch_input[qInx].ch_max_tx_frame_cnt % TX_DESC_CNT);
-				/* DUT stops when tail & head become equal,
-					 prepare one extra packet for transmit */
-				tx_pkt_cnt++;
-			}
-		} else {
-			tx_pkt_cnt = TX_DESC_CNT;
-			desc_idx = 0;
-		}
-
-		for (i = 0; i < tx_pkt_cnt; i++) {
-			txptr = GET_TX_DESC_PTR(qInx, desc_idx);
-			buffer = GET_TX_BUF_PTR(qInx, desc_idx);
-			skb_data = (unsigned int *)buffer->skb->data;
-
-			if (!skb_data) {
-				printk(KERN_ALERT "ERROR: No SKB Allocated for channel\n");
-				break;
-			}
-
-			/* populate tx pg data */
-			frame_size = pg_ch_input[qInx].ch_frame_size;
-			if (qInx == 0) {
-				/* Add Ethernet header */
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][0];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][1];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][2];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][3];
-				/* Add payload */
-				for (payload_cnt = 0; payload_cnt < frame_size;) {
-					*skb_data++ = DWC_ETH_QOS_FRAME_PATTERN_CH[qInx];
-					/* increment by 4 since we are writing
-					 * one dword at a time */
-					payload_cnt += 4;
-				}
-				buffer->len = frame_size;
-			} else {
-				/* Add Ethernet header */
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][0];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][1];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][2];
-				*skb_data++ = DWC_ETH_QOS_frame_hdrs[qInx][3];
-
-				if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
-					avtype = ((avtype << 8) | (avtype >> 8)) & 0x0000FFFF;
-					*skb_data++ = (DWC_ETH_QOS_FRAME_PATTERN_CH[qInx] << 16) | avtype;
-					payload_cnt = 4;
-				} else {
-					payload_cnt = 0;
-				}
-
-				/* Add payload */
-				while (payload_cnt < frame_size) {
-					*skb_data++ = DWC_ETH_QOS_FRAME_PATTERN_CH[qInx];
-					/* increment by 4 since we are writing
-					 * one dword at a time */
-					payload_cnt += 4;
-				}
-				buffer->len = frame_size;
-			}
-
-			dma_sync_single_for_device(&pdata->pdev->dev, buffer->dma,
-					DWC_ETH_QOS_PG_FRAME_SIZE, DMA_TO_DEVICE);
-
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB &&
-					pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
-				/* slot number preparation */
-				if (ch_tx_desc_slot_no_skip != 0) {
-					if ((desc_idx % ch_tx_desc_slot_no_skip) == 0) {
-						ch_tx_desc_slot_no_start++;
-						/* max value of slot number is 15 */
-						ch_tx_desc_slot_no_start &= 0xF;
-					}
-				}
-				buffer->slot_number = ch_tx_desc_slot_no_start;
-			}
-			else {
-				buffer->slot_number = 0;
-			}
-
-			/* prepare descriptor for transmission */
-			DWC_ETH_QOS_prepare_desc(pdata, txptr, buffer, desc_idx, qInx);
-#ifdef DWC_ETH_QOS_ENABLE_TX_PKT_DUMP
-			if (desc_idx < 1)
-				print_pkt(buffer->skb, buffer->len, 1, desc_idx);
-#endif
-			INCR_TX_DESC_INDEX(desc_idx, 1);
-		}
-
-		if (pg_ch_input[qInx].ch_debug_mode == 1) {
-			DECR_TX_DESC_INDEX(desc_idx);
-			tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, desc_idx);
-			printk(KERN_ALERT "ch_desc_prepare     %d\n",
-					pg_ch_input[qInx].ch_desc_prepare);
-		}
-		else {
-			/* Updating tail pointer to one descriptor behind head pointer */
-			DMA_CHTDR_RgRd(qInx, head_ptr);
-			DMA_TDLAR_RgRd(qInx, desc_ring_ptr);
-			if ((head_ptr == 0) || (desc_ring_ptr == head_ptr)) {
-				tail_ptr = GET_TX_DESC_DMA_ADDR(qInx, tx_pkt_cnt - 1);
-			}
-			else {
-				tail_ptr = (head_ptr - sizeof(tx_descriptor_t));
-			}
-		}
-		DMA_TDTP_TPDR_RgWr(qInx, tail_ptr);
-		desc_data->dirty_tx = GET_TX_DESC_IDX(qInx, head_ptr);
-
-		printk(KERN_ALERT
-				"%d] Tail @ init    [%3llu]%#x\n"
-				"    Head @ init    [%3llu]%#x\n"
-				"    dirty_tx @ init %d\n\n",
-				qInx, GET_TX_DESC_IDX(qInx, tail_ptr), tail_ptr,
-				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
-				desc_data->dirty_tx);
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_prepare_tx_packets_for_pg_test\n");
-}
-
-
-/*!
-* \brief API to configure HW for PG test.
-*
-* \details This function will configures all the TX DMA channels for
-* packet generator module.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_prepare_hw_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	unsigned int qInx;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	hw_interface_t *hw_if = &(pdata->hw_if);
-	struct timespec now;
-	uint32_t varMAC_TCR = 0;
-
-	DBGPR_PG("-->DWC_ETH_QOS_prepare_hw_for_pg_test\n");
-
-	hw_if->set_tx_rx_prio_policy(pg_struct->ch_tx_rx_arb_scheme);
-	hw_if->set_tx_rx_prio(pg_struct->ch_use_tx_high_prio);
-	hw_if->set_tx_rx_prio_ratio(pg_struct->ch_tx_rx_prio_ratio);
-	hw_if->set_dma_tx_arb_algorithm(pg_struct->dma_tx_arb_algo);
-	hw_if->set_dcb_algorithm(pg_struct->queue_dcb_algorithm);
-    hw_if->config_mac_loopback_mode(pg_struct->mac_lb_mode);
-
-	/* Timer programming */
-	hw_if->config_sub_second_increment(DWC_ETH_QOS_SYSCLOCK);
-
-	varMAC_TCR = (MAC_TCR_TSENA | MAC_TCR_TSCTRLSSR);
-	hw_if->config_hw_time_stamping(varMAC_TCR);
-
-	getnstimeofday(&now);
-	hw_if->init_systime(now.tv_sec, now.tv_nsec);
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		hw_if->set_tx_queue_operating_mode(qInx, pg_ch_input[qInx].ch_operating_mode);
-
-		/* DCB parameters */
-		hw_if->set_dcb_queue_weight(qInx, pg_ch_input[qInx].ch_queue_weight);
-		hw_if->set_ch_arb_weights(qInx, pg_ch_input[qInx].ch_arb_weight);
-
-		/* Slot parameters */
-		hw_if->config_slot_num_check(qInx, pg_ch_input[qInx].ch_EnableSlotCheck);
-		hw_if->config_slot_interrupt(qInx, pg_ch_input[qInx].ch_EnableSlotCheck);
-		hw_if->set_slot_count(qInx, pg_ch_input[qInx].ch_SlotCount);
-		hw_if->config_advance_slot_num_check(qInx, pg_ch_input[qInx].ch_EnableAdvSlotCheck);
-
-		/* AVB parameters */
-		if ((pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) && (qInx > 0)) {
-			hw_if->set_avb_algorithm(qInx, pg_ch_input[qInx].ch_avb_algorithm);
-			if (pg_ch_input[qInx].ch_avb_algorithm == eDWC_ETH_QOS_AVB_CBS) {
-				hw_if->config_credit_control(qInx, pg_ch_input[qInx].ch_CreditControl);
-				hw_if->config_send_slope(qInx, pg_ch_input[qInx].ch_SendSlope);
-				hw_if->config_idle_slope(qInx, pg_ch_input[qInx].ch_IdleSlope);
-				hw_if->config_high_credit(qInx, pg_ch_input[qInx].ch_HiCredit);
-				hw_if->config_low_credit(qInx, pg_ch_input[qInx].ch_LoCredit);
-			}
-		}
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_prepare_hw_for_pg_test\n");
-}
-
-
-/*!
-* \brief timer function to stop tx DMA engine.
-*
-* \details This function will stop all TX DMA engine.
-*
-* \param[in] data   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_pg_timer_fun(unsigned long data)
-{
-	struct DWC_ETH_QOS_prv_data *pdata = (struct DWC_ETH_QOS_prv_data *)data;
-	hw_interface_t *hw_if = &(pdata->hw_if);
-	struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data = NULL;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = NULL;
-	uint32_t qInx, head_ptr = 0, tail_ptr = 0, dma_dsr = 0;
-
-	printk(KERN_ALERT "-->DWC_ETH_QOS_pg_timer_fun\n");
-
-	/* allow device to transmit pending prepared packets */
-	pdata->prepare_pg_packet = Y_FALSE;
-
-	mdelay(500);
-
-	DMA_DSR0_RgRd(dma_dsr);
-	printk(KERN_ALERT "DMA Channel state: %#x\n", dma_dsr);
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		pg_ch_input = &(pdata->pg->pg_ch_input[qInx]);
-		desc_data = GET_TX_WRAPPER_DESC(qInx);
-		/* disable only that channel for which ENABLE bit is set */
-		if ((pdata->pg->ch_SelMask) & (1 << qInx)) {
-			hw_if->stop_dma_tx(qInx);
-		}
-		DMA_TDTP_TPDR_RgRd(qInx, tail_ptr);
-		DMA_CHTDR_RgRd(qInx, head_ptr);
-		printk(KERN_ALERT
-				"%d] Tail @ stop     [%3llu]%#x\n"
-				"    Head @ stop     [%3llu]%#x\n"
-				"    dirty_tx @ stop  %d\n"
-				"    ch_FramecountTx  %lu\n"
-				"    Total interrupts %d\n\n",
-				qInx, GET_TX_DESC_IDX(qInx, tail_ptr), tail_ptr,
-				GET_TX_DESC_IDX(qInx, head_ptr), head_ptr,
-				desc_data->dirty_tx,
-				pg_ch_input->ch_FramecountTx,
-				pg_ch_input->tx_interrupts);
-	}
-	// TODO: add code to disable slot interrupt except channel 0
-
-	pdata->run_test = Y_FALSE;
-
-	printk(KERN_ALERT "PG Experiment is completed ....\n"\
-		"You can retrieve the Report\n");
-	DBGPR_PG("PG Experiment is completed ....\n"\
-		"You can retrieve the Report\n");
-
-	printk(KERN_ALERT "<--DWC_ETH_QOS_pg_timer_fun\n");
-}
-
-
-/*!
-* \brief APT to start tx DMA engine.
-*
-* \details This function will prepare all TX DMA engine in advance
-* for data transfer and start all DMA TX engine.
-*
-* \param[in] data   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_pg_run(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	hw_interface_t *hw_if = &(pdata->hw_if);
-	unsigned int qInx;
-
-	DBGPR_PG("-->DWC_ETH_QOS_pg_run\n");
-
-	DWC_ETH_QOS_prepare_tx_packets_for_pg_test(pdata);
-
-	pdata->run_test = Y_TRUE;
-	pdata->prepare_pg_packet = Y_TRUE;
-
-	/* start pg timer before enabling the DMA's */
-	add_timer(&pdata->pg_timer);
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		/* enable only that channel for which ENABLE bit is set */
-		if ((pdata->pg->ch_SelMask) & (1 << qInx)) {
-			pdata->pg->channel_running[qInx] = Y_TRUE;
-			hw_if->start_dma_tx(qInx);
-		}
-		else {
-			pdata->pg->channel_running[qInx] = Y_FALSE;
-		}
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_pg_run\n");
-}
-
-
-/*!
-* \brief APT to setup krnel timer function.
-*
-* \details This function setup a kernel timer function for packet
-* generator test.
-*
-* \param[in] data   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_setup_timer(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	DBGPR_PG("-->DWC_ETH_QOS_setup_timer\n");
-
-	init_timer(&pdata->pg_timer);
-	pdata->pg_timer.expires = (HZ * (pdata->pg->DurationOfExp) + jiffies);
-	pdata->pg_timer.data = (unsigned long)pdata;
-	pdata->pg_timer.function = DWC_ETH_QOS_pg_timer_fun;
-
-	printk(KERN_ALERT "Test will expire at %d\n\n", (int)pdata->pg_timer.expires);
-
-	DBGPR_PG("<--DWC_ETH_QOS_setup_timer\n");
-}
-
-
-/*!
-* \brief APT to start PG test.
-*
-* \details This function will start the packet generator test. It calls
-* other driver functions which steup kernel timer, prepares descriptor
-* and start the Tx DMA.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_pg_run_test(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	DBGPR_PG("-->DWC_ETH_QOS_pg_run_test\n");
-
-	printk(KERN_ALERT "PG Experiment has started ....\n");
-	DWC_ETH_QOS_setup_timer(pdata);
-	DWC_ETH_QOS_pg_run(pdata);
-
-	DBGPR_PG("<--DWC_ETH_QOS_pg_run_test\n");
-}
-
-
-/*!
-* \brief APT to display PG data structure.
-*
-* \details This function will display the packet generator data structure
-* for debugging purpose. The display shows what are the configurations are
-* enabled in the device.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input = pg_struct->pg_ch_input;
-	unsigned int qInx;
-	char *space = "                               ", *strptr = NULL;
-	unsigned char display_avb_params = 0, display_dcb_params = 0;
-
-	DBGPR_PG("-->DWC_ETH_QOS_print_pg_struct\n");
-
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB) {
-			display_avb_params = 1;
-			break;
-		}
-	}
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QDCB) {
-			display_dcb_params = 1;
-			break;
-		}
-	}
-
-	printk(KERN_ALERT "DurationOfExp                       = %#02x\n",
-		pg_struct->DurationOfExp);
-	printk(KERN_ALERT "ch_SelMask                          = %#02x\n",
-		pg_struct->ch_SelMask);
-	printk(KERN_ALERT "ch_tx_rx_arb_scheme                 = %#02x\n",
-		pg_struct->ch_tx_rx_arb_scheme);
-	printk(KERN_ALERT "Ch_use_tx_high_prio                 = %#02x\n",
-		pg_struct->ch_use_tx_high_prio);
-	printk(KERN_ALERT "ch_tx_rx_prio_ratio                 = %#02x\n",
-		pg_struct->ch_tx_rx_prio_ratio);
-	printk(KERN_ALERT "dma_tx_arb_algo                     = %#02x\n",
-			pg_struct->dma_tx_arb_algo);
-    printk(KERN_ALERT "mac_lb_mode                         = %#02x\n",
-			pg_struct->mac_lb_mode);
-
-	if (display_dcb_params) {
-		switch (pg_struct->queue_dcb_algorithm) {
-			case eDWC_ETH_QOS_DCB_WRR:
-				strptr = "WRR (Weighted Round Robin)";
-				break;
-			case eDWC_ETH_QOS_DCB_WFQ:
-				strptr = "WFQ (Weighted Fair Queuing)";
-				break;
-			case eDWC_ETH_QOS_DCB_DWRR:
-				strptr = "DWRR (Deficit Weighted Round Robin)";
-				break;
-			case eDWC_ETH_QOS_DCB_SP:
-				strptr = "SP (Strict Priority)";
-				break;
-		}
-		printk(KERN_ALERT "queue_dcb_algorithm                 = %s\n",
-				strptr);
-	}
-
-	printk(KERN_ALERT "PrioTagForAV (not used)             = %#02x\n",
-		pg_struct->PrioTagForAV);
-
-	printk(KERN_ALERT "ch_operating_mode\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		switch (pg_ch_input[qInx].ch_operating_mode) {
-		case eDWC_ETH_QOS_QDISABLED:
-			printk(KERN_ALERT "%s[Ch%d] = Disabled\n", space, qInx);
-			break;
-		case eDWC_ETH_QOS_QAVB:
-			printk(KERN_ALERT "%s[Ch%d] = AVB\n", space, qInx);
-			break;
-		case eDWC_ETH_QOS_QDCB:
-			printk(KERN_ALERT "%s[Ch%d] = DCB\n", space, qInx);
-			break;
-		case eDWC_ETH_QOS_QGENERIC:
-			printk(KERN_ALERT "%s[Ch%d] = Generic\n", space, qInx);
-			break;
-		}
-	}
-
-	printk(KERN_ALERT "ch_arb_weight [DMA]\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
-				pg_ch_input[qInx].ch_arb_weight);
-	}
-	printk(KERN_ALERT "ch_bw\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %d%%\n", space, qInx,
-			pg_ch_input[qInx].ch_bw);
-	}
-
-	printk(KERN_ALERT "ch_queue_weight\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
-			pg_ch_input[qInx].ch_queue_weight);
-	}
-
-	printk(KERN_ALERT "ch_frame_size\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
-			pg_ch_input[qInx].ch_frame_size);
-	}
-
-	printk(KERN_ALERT "ch_EnableSlotCheck\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
-			pg_ch_input[qInx].ch_EnableSlotCheck ? "YES" : "NO");
-	}
-
-	printk(KERN_ALERT "ch_EnableAdvSlotCheck\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
-			pg_ch_input[qInx].ch_EnableAdvSlotCheck ? "YES" : "NO");
-	}
-
-	printk(KERN_ALERT "ch_SlotCount\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %d\n", space, qInx,
-			pg_ch_input[qInx].ch_SlotCount);
-	}
-
-	printk(KERN_ALERT "ch_tx_desc_slot_no_start\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
-			pg_ch_input[qInx].ch_tx_desc_slot_no_start);
-	}
-
-	printk(KERN_ALERT "ch_tx_desc_slot_no_skip\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %#01x\n", space, qInx,
-			pg_ch_input[qInx].ch_tx_desc_slot_no_skip);
-	}
-
-	printk(KERN_ALERT "ch_AvgBits\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
-			pg_ch_input[qInx].ch_AvgBits);
-	}
-
-	printk(KERN_ALERT "ch_AvgBits_interrupt_count\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
-			pg_ch_input[qInx].ch_AvgBits_interrupt_count);
-	}
-
-	if (display_avb_params) {
-		printk(KERN_ALERT "ch_avb_algorithm\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
-						(pg_ch_input[qInx].ch_avb_algorithm == eDWC_ETH_QOS_AVB_SP ?
-						 "Strict Priority": "Credit Based Shaper"));
-		}
-
-		printk(KERN_ALERT "ch_CreditControl\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %s\n", space, qInx,
-						pg_ch_input[qInx].ch_CreditControl ? "YES" : "NO");
-		}
-
-		printk(KERN_ALERT "ch_SendSlope\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
-						pg_ch_input[qInx].ch_SendSlope);
-		}
-
-		printk(KERN_ALERT "ch_IdleSlope\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
-						pg_ch_input[qInx].ch_IdleSlope);
-		}
-
-		printk(KERN_ALERT "ch_HiCredit\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
-						pg_ch_input[qInx].ch_HiCredit);
-		}
-
-		printk(KERN_ALERT "ch_LoCredit\n");
-		for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-			if (pg_ch_input[qInx].ch_operating_mode == eDWC_ETH_QOS_QAVB)
-				printk(KERN_ALERT "%s[Ch%d] = %#08x\n", space, qInx,
-						pg_ch_input[qInx].ch_LoCredit);
-		}
-	}
-
-	printk(KERN_ALERT "ch_FramecountTx\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
-			pg_ch_input[qInx].ch_FramecountTx);
-	}
-
-	printk(KERN_ALERT "ch_FramecountRx\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[Ch%d] = %lu\n", space, qInx,
-			pg_ch_input[qInx].ch_FramecountRx);
-	}
-
-	printk(KERN_ALERT "Debug mode\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[CH%d]  %s\n",
-			space, qInx, (pg_ch_input[qInx].ch_debug_mode ? "YES" : "NO"));
-	}
-
-	printk(KERN_ALERT "Maximum Tx packet count\n");
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		printk(KERN_ALERT "%s[CH%d]  %d\n",
-			space, qInx, pg_ch_input[qInx].ch_max_tx_frame_cnt);
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_print_pg_struct\n");
-}
-
-
-/*!
-* \brief APT to sync the kernel and user data structure.
-*
-* \details This function is invoked by IOCTL function when the user
-* issues a command to synchronize the user space data structure to
-* kernel space data structure.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] req   - pointer to IOCTL specific data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_pg_set_config(struct DWC_ETH_QOS_prv_data *pdata,
-					struct ifr_data_struct *req)
-{
-	struct DWC_ETH_QOS_PGStruct l_pg_struct;
-	struct DWC_ETH_QOS_PGStruct *user_pg_struct =
-		(struct DWC_ETH_QOS_PGStruct *)req->ptr;
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
-		pg_struct->pg_ch_input;
-	unsigned int qInx;
-
-	DBGPR_PG("-->DWC_ETH_QOS_pg_set_config\n");
-
-	/* First, copy contents of user info in a local structure */
-	if(copy_from_user(&l_pg_struct, user_pg_struct,
-				sizeof(struct DWC_ETH_QOS_PGStruct)))
-		printk(KERN_ALERT "Failed to fetch PG Struct info from user\n");
-
-	/* Second, copy required members into kernel structure */
-	copy_PGStruct_members(pg_struct, &l_pg_struct);
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		copy_pg_ch_input_members(&(pg_ch_input[qInx]), &(l_pg_struct.pg_ch_input[qInx]));
-	}
-
-	DWC_ETH_QOS_print_pg_struct(pdata);
-
-	DBGPR_PG("<--DWC_ETH_QOS_pg_set_config\n");
-}
-
-
-/*!
-* \brief APT to sync the kernel and user data structure.
-*
-* \details This function is invoked by IOCTL function when the user
-* issue a command to get the packet generator data. This function
-* will copy kernel data structure into user data structure.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] req   - pointer to IOCTL specific data structure
-*
-* \return void
-*/
-static void DWC_ETH_QOS_pg_get_result(struct DWC_ETH_QOS_prv_data *pdata,
-					struct ifr_data_struct *req)
-{
-	struct DWC_ETH_QOS_PGStruct l_pg_struct;
-	struct DWC_ETH_QOS_PGStruct *user_pg_struct =
-		(struct DWC_ETH_QOS_PGStruct *)req->ptr;
-	struct DWC_ETH_QOS_PGStruct *pg_struct = pdata->pg;
-	struct DWC_ETH_QOS_pg_ch_input *pg_ch_input =
-		pg_struct->pg_ch_input;
-	unsigned int qInx;
-
-	DBGPR_PG("-->DWC_ETH_QOS_pg_get_result\n");
-	copy_PGStruct_members(&l_pg_struct, pg_struct);
-	l_pg_struct.speed_100M_1G = pdata->speed;/* Update the speed information */
-	printk(KERN_CRIT "l_pg_struct->speed_100M_1G: %d\n",l_pg_struct.speed_100M_1G);
-	for (qInx = 0; qInx < DWC_ETH_QOS_TX_QUEUE_CNT; qInx++) {
-		copy_pg_ch_input_members(&(l_pg_struct.pg_ch_input[qInx]), &(pg_ch_input[qInx]));
-	}
-	if (copy_to_user(user_pg_struct, &l_pg_struct, sizeof(struct DWC_ETH_QOS_PGStruct)))
-		printk(KERN_ALERT "Failed to send PG Struct info to user\n");
-
-	DBGPR_PG("<--DWC_ETH_QOS_pg_get_result\n");
-}
-
-/*!
-* \brief IOCTL function to handle user request.
-*
-* \details This function is invoked by IOCTL function when the user
-* issues a command to get the packet generator data. This function
-* will copy kernel data structure into user data structure.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] ptr   - pointer to IOCTL specific data structure
-*
-* \return zero on success and -ve number on failure.
-*/
-int DWC_ETH_QOS_handle_pg_ioctl(struct DWC_ETH_QOS_prv_data *pdata,
-				void *ptr)
-{
-	struct ifr_data_struct *req = ptr;
-	int ret = 0;
-
-	DBGPR_PG("-->DWC_ETH_QOS_handle_pg_ioctl\n");
-
-	switch (req->flags) {
-	case DWC_ETH_QOS_PG_SET_CONFIG:
-		DWC_ETH_QOS_pg_set_config(pdata, req);
-		break;
-	case DWC_ETH_QOS_PG_CONFIG_HW:
-		DWC_ETH_QOS_prepare_hw_for_pg_test(pdata);
-		DWC_ETH_QOS_prepare_tx_packets_for_pg_test(pdata);
-		printk(KERN_ALERT "\nCONFIGURING THE HW FOR PG ....\n");
-		break;
-	case DWC_ETH_QOS_PG_RUN_TEST:
-		DWC_ETH_QOS_pg_run_test(pdata);
-		printk(KERN_ALERT "PG RUN TEST STARTED ....\n");
-		break;
-	case DWC_ETH_QOS_PG_GET_RESULT:
-		DWC_ETH_QOS_pg_get_result(pdata, req);
-		break;
-	case DWC_ETH_QOS_PG_TEST_DONE:
-		req->test_done = pdata->run_test;
-		break;
-	default:
-		printk(KERN_ALERT "Wrong Parameter for PG TEST\n");
-		ret = -EINVAL;
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_handle_pg_ioctl\n");
-
-	return ret;
-}
-
-
-/*!
-* \brief API to allocate local data structure.
-*
-* \details This function is used to allocate local data structure
-* for handling packet generator module.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return zero on success and -ve number on failure.
-*/
-int DWC_ETH_QOS_alloc_pg(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	DBGPR_PG("-->DWC_ETH_QOS_alloc_pg\n");
-
-	pdata->pg = kzalloc(sizeof(struct DWC_ETH_QOS_PGStruct), GFP_KERNEL);
-	if (pdata->pg == NULL) {
-		printk(KERN_ALERT "%s:Unable to alloc pg structure\n", DEV_NAME);
-		return -ENOMEM;
-	}
-
-	DBGPR_PG("<--DWC_ETH_QOS_alloc_pg\n");
-
-	return 0;
-}
-
-
-/*!
-* \brief API to free local data structure.
-*
-* \details This function is used to free the local data structure
-* which is allocated for handling packet generator module.
-*
-* \param[in] pdata   - pointer to private data structure
-*
-* \return void
-*/
-void DWC_ETH_QOS_free_pg(struct DWC_ETH_QOS_prv_data *pdata)
-{
-	DBGPR_PG("-->DWC_ETH_QOS_free_pg\n");
-
-	//kfree(pdata->pg->pg_ch_input);
-	kfree(pdata->pg);
-
-	DBGPR_PG("<--DWC_ETH_QOS_free_pg\n");
-}
-
-
-/*!
-* \brief API to allocate tx buffer.
-*
-* \details This function is used to allocate tx buffer for data
-* transmission.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] buffer  - pointer to tx buffer data structure
-* \param[in] gfp     - type of memory allocation.
-*
-* \return zero on success and -ve number on failure.
-*/
-int DWC_ETH_QOS_alloc_tx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				struct DWC_ETH_QOS_tx_buffer *buffer,
-				gfp_t gfp)
-{
-	struct sk_buff *skb = NULL;
-
-	//DBGPR_PG("-->DWC_ETH_QOS_alloc_tx_buf_pg\n");
-
-	skb = dev_alloc_skb(DWC_ETH_QOS_PG_FRAME_SIZE);
-	if (skb == NULL) {
-		printk(KERN_ALERT "Failed to allocate tx skb\n");
-		return -ENOMEM;
-	}
-	buffer->skb = skb;
-	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
-	buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
-				     DWC_ETH_QOS_PG_FRAME_SIZE, DMA_TO_DEVICE);
-	if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
-		printk(KERN_ALERT "failed to do the TX dma map\n");
-
-	buffer->buf1_mapped_as_page = Y_FALSE;
-
-	//DBGPR_PG("<--DWC_ETH_QOS_alloc_tx_buf_pg\n");
-
-	return 0;
-}
-
-
-/*!
-* \brief API to allocate rx buffer.
-*
-* \details This function is used to allocate rx buffer for data
-* receive by device.
-*
-* \param[in] pdata   - pointer to private data structure
-* \param[in] buffer  - pointer to rx buffer data structure
-* \param[in] gfp     - type of memory allocation.
-*
-* \return zero on success and -ve number on failure.
-*/
-int DWC_ETH_QOS_alloc_rx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				struct DWC_ETH_QOS_rx_buffer *buffer,
-				gfp_t gfp)
-{
-	struct sk_buff *skb = NULL;
-
-	//DBGPR_PG("-->DWC_ETH_QOS_alloc_rx_buf_pg\n");
-
-	skb = dev_alloc_skb(DWC_ETH_QOS_PG_FRAME_SIZE);
-	if (skb == NULL) {
-		printk(KERN_ALERT "Failed to allocate tx skb\n");
-		return -ENOMEM;
-	}
-	buffer->skb = skb;
-	buffer->len = DWC_ETH_QOS_PG_FRAME_SIZE;
-	buffer->dma = dma_map_single(&pdata->pdev->dev, skb->data,
-				     DWC_ETH_QOS_PG_FRAME_SIZE, DMA_FROM_DEVICE);
-	if (dma_mapping_error(&pdata->pdev->dev, buffer->dma))
-		printk(KERN_ALERT "failed to do the RX dma map\n");
-
-	buffer->mapped_as_page = Y_FALSE;
-	wmb();
-
-	//DBGPR_PG("<--DWC_ETH_QOS_alloc_rx_buf_pg\n");
-
-	return 0;
-}
-
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h
deleted file mode 100644
index a90f504..0000000
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pktgen.h
+++ /dev/null
@@ -1,67 +0,0 @@
-/* =========================================================================
- * The Synopsys DWC ETHER QOS Software Driver and documentation (hereinafter
- * "Software") is an unsupported proprietary work of Synopsys, Inc. unless
- * otherwise expressly agreed to in writing between Synopsys and you.
- *
- * The Software IS NOT an item of Licensed Software or Licensed Product under
- * any End User Software License Agreement or Agreement for Licensed Product
- * with Synopsys or any supplement thereto.  Permission is hereby granted,
- * free of charge, to any person obtaining a copy of this software annotated
- * with this license and the Software, to deal in the Software without
- * restriction, including without limitation the rights to use, copy, modify,
- * merge, publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so, subject
- * to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THIS SOFTWARE IS BEING DISTRIBUTED BY SYNOPSYS SOLELY ON AN "AS IS" BASIS
- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
- * ARE HEREBY DISCLAIMED. IN NO EVENT SHALL SYNOPSYS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
- * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
- * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
- * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
- * DAMAGE.
- * ========================================================================= */
-
-#ifndef __DWC_ETH_QOS_YPG_H__
-
-#define __DWC_ETH_QOS_YPG_H__
-
-static void DWC_ETH_QOS_tx_interrupt_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				     uint32_t qInx);
-
-static void DWC_ETH_QOS_prepare_desc(struct DWC_ETH_QOS_prv_data *pdata,
-				tx_descriptor_t *txptr,
-				struct DWC_ETH_QOS_tx_buffer *buffer,
-				int i,
-				unsigned int qInx);
-
-static int DWC_ETH_QOS_poll_pg_sq(struct DWC_ETH_QOS_prv_data *pdata,
-					unsigned int qInx);
-
-static void DWC_ETH_QOS_poll_pg(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_prepare_hw_for_pg_test(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_pg_timer_fun(unsigned long data);
-
-static void DWC_ETH_QOS_pg_run(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_setup_timer(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_pg_run_test(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_print_pg_struct(struct DWC_ETH_QOS_prv_data *pdata);
-
-static void DWC_ETH_QOS_pg_set_config(struct DWC_ETH_QOS_prv_data *pdata,
-					struct ifr_data_struct *req);
-
-static void DWC_ETH_QOS_pg_get_result(struct DWC_ETH_QOS_prv_data *pdata,
-					struct ifr_data_struct *req);
-#endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
index 67bd85c..4f4d492 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yapphdr.h
@@ -387,182 +387,4 @@ struct DWC_ETH_QOS_config_ptpoffloading {
 	int mc_uc;
 };
 
-
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-
-/* uncomment below macro to enable application
- * to record all run reports to file */
-//#define PGTEST_LOGFILE
-
-/* TX DMA CHANNEL Weights */
-#define DWC_ETH_QOS_TX_CH_WEIGHT1	0x0
-#define DWC_ETH_QOS_TX_CH_WEIGHT2	0x1
-#define DWC_ETH_QOS_TX_CH_WEIGHT3	0x2
-#define DWC_ETH_QOS_TX_CH_WEIGHT4	0x3
-#define DWC_ETH_QOS_TX_CH_WEIGHT5	0x4
-#define DWC_ETH_QOS_TX_CH_WEIGHT6	0x5
-#define DWC_ETH_QOS_TX_CH_WEIGHT7	0x6
-#define DWC_ETH_QOS_TX_CH_WEIGHT8	0x7
-
-/* PG test sub commands macro's */
-#define DWC_ETH_QOS_PG_SET_CONFIG	0x1
-#define DWC_ETH_QOS_PG_CONFIG_HW	  0x2
-#define DWC_ETH_QOS_PG_RUN_TEST		0x3
-#define DWC_ETH_QOS_PG_GET_RESULT	0x4
-#define DWC_ETH_QOS_PG_TEST_DONE	0x5
-
-
-/* DMA channel bandwidth allocation parameters */
-struct DWC_ETH_QOS_pg_user_ch_input {
-	unsigned char ch_arb_weight;	/* Channel weights(1/2/3/4/5/6/7/8) for arbitration */
-	unsigned int ch_fr_size;	/* Channel Frame size */
-	unsigned char ch_bw_alloc;	/* The percentage bandwidth allocation for ch */
-
-	unsigned char ch_use_slot_no_check;	/* Should Ch use slot number checking ? */
-	unsigned char ch_use_adv_slot_no_check;
-	unsigned char ch_slot_count_to_use;	/* How many slot used to report pg bits per slot value */
-
-	unsigned char ch_use_credit_shape;	/* Should Ch use Credid shape algorithm for traffic shaping ? */
-	unsigned char ch_CreditControl;	/* Sould Ch use Credit Control algorithm for traffic shaping ? */
-
-	unsigned char ch_tx_desc_slot_no_start;
-	unsigned char ch_tx_desc_slot_no_skip;
-	unsigned char ch_operating_mode;
-	unsigned long ch_AvgBits;
-	unsigned long ch_AvgBits_interrupt_count;
-	unsigned char ch_avb_algorithm;
-	unsigned char ch_debug_mode; /* enable/disable debug mode */
-	unsigned int ch_max_tx_frame_cnt; /* maximum pkts to be sent on this channel, can be used for debug purpose */
-};
-
-struct DWC_ETH_QOS_pg_user_input {
-	unsigned char duration_of_exp;
-	/* enable bits for DMA. bit0=>ch0, bit1=>ch1, bit2=>ch2 */
-	unsigned char dma_ch_en;
-
-	unsigned char ch_tx_rx_arb_scheme;	/* Should Ch use Weighted RR policy with Rx:Tx/Tx:Rx or Fixed Priority */
-	unsigned char ch_use_tx_high_prio;	/* Should Ch Tx have High priority over Rx */
-	unsigned char ch_tx_rx_prio_ratio;	/* For RR what is the ratio between Tx:Rx/Rx:Tx */
-	unsigned char dma_tx_arb_algo; /* Refer DMA Mode register TAA field */
-
-	unsigned char queue_dcb_algorithm;
-
-	unsigned char mac_lb_mode; /* 0 => No MAC Loopback; 1 => MAC Loopback On */
-	unsigned int speed_100M_1G; /* 0 => No MAC Loopback; 1 => MAC Loopback On */
-
-	struct DWC_ETH_QOS_pg_user_ch_input ch_input[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
-};
-
-#define copy_pg_ch_input_members(to, from) do { \
-	(to)->interrupt_prints = (from)->interrupt_prints; \
-	(to)->tx_interrupts = (from)->tx_interrupts; \
-	(to)->ch_arb_weight = (from)->ch_arb_weight; \
-	(to)->ch_queue_weight = (from)->ch_queue_weight; \
-	(to)->ch_bw = (from)->ch_bw; \
-	(to)->ch_frame_size = (from)->ch_frame_size; \
-	(to)->ch_EnableSlotCheck = (from)->ch_EnableSlotCheck; \
-	(to)->ch_EnableAdvSlotCheck = (from)->ch_EnableAdvSlotCheck; \
-	(to)->ch_avb_algorithm = (from)->ch_avb_algorithm; \
-	(to)->ch_SlotCount = (from)->ch_SlotCount; \
-	(to)->ch_AvgBits = (from)->ch_AvgBits; \
-	(to)->ch_AvgBits_interrupt_count = (from)->ch_AvgBits_interrupt_count; \
-	(to)->ch_CreditControl = (from)->ch_CreditControl; \
-	(to)->ch_tx_desc_slot_no_start = (from)->ch_tx_desc_slot_no_start; \
-	(to)->ch_tx_desc_slot_no_skip = (from)->ch_tx_desc_slot_no_skip; \
-	(to)->ch_SendSlope = (from)->ch_SendSlope; \
-	(to)->ch_IdleSlope = (from)->ch_IdleSlope; \
-	(to)->ch_HiCredit = (from)->ch_HiCredit; \
-	(to)->ch_LoCredit = (from)->ch_LoCredit; \
-	(to)->ch_FramecountTx = (from)->ch_FramecountTx; \
-	(to)->ch_FramecountRx = (from)->ch_FramecountRx; \
-	(to)->ch_operating_mode = (from)->ch_operating_mode; \
-	(to)->ch_debug_mode = (from)->ch_debug_mode;\
-	(to)->ch_max_tx_frame_cnt = (from)->ch_max_tx_frame_cnt;\
-} while (0)
-
-struct DWC_ETH_QOS_pg_ch_input {
-	unsigned int interrupt_prints;
-	unsigned int tx_interrupts;
-	unsigned char ch_arb_weight;
-	unsigned int ch_queue_weight;
-	unsigned char ch_bw;
-	unsigned int ch_frame_size;
-	unsigned char ch_EnableSlotCheck;	/* Enable checking of slot numbers programmed in the Tx Desc */
-	unsigned char ch_EnableAdvSlotCheck;	/* When Set Data fetched for current slot and for next 2 slots in advance
-						When reset data fetched for current slot and in advance for next slot*/
-
-	unsigned char ch_avb_algorithm;
-	unsigned char ch_SlotCount;	/* Over which transmiteed bits per slot needs to be computed (Only for Credit based shaping) */
-	unsigned long ch_AvgBits;
-	unsigned long ch_AvgBits_interrupt_count;
-
-	unsigned char ch_CreditControl;	/* Will be zero (Not used) */
-
-	unsigned char ch_tx_desc_slot_no_start;
-	unsigned char ch_tx_desc_slot_no_skip;
-
-	unsigned int ch_SendSlope;
-	unsigned int ch_IdleSlope;
-	unsigned int ch_HiCredit;
-	unsigned int ch_LoCredit;
-
-	unsigned long ch_FramecountTx;	/* No of Frames Transmitted on Channel 1 */
-	unsigned long ch_FramecountRx;	/* No of Frames Received on Channel 1 */
-	unsigned char ch_operating_mode;
-
-	unsigned char ch_debug_mode; /* enable/disable debug mode */
-	unsigned int ch_max_tx_frame_cnt; /* maximum pkts to be sent on this channel, can be used for debug purpose */
-	unsigned int ch_desc_prepare; /* max packets which will be reprepared in Tx-interrupt
- 																	 do not copy contents to app-copy, only driver should use this variable*/
-};
-
-#define copy_PGStruct_members(to, from)	do { \
-	(to)->ch_SelMask = (from)->ch_SelMask; \
-	(to)->DurationOfExp = (from)->DurationOfExp; \
-	(to)->PrioTagForAV = (from)->PrioTagForAV; \
-	(to)->queue_dcb_algorithm = (from)->queue_dcb_algorithm; \
-	(to)->ch_tx_rx_arb_scheme = (from)->ch_tx_rx_arb_scheme; \
-	(to)->ch_use_tx_high_prio = (from)->ch_use_tx_high_prio; \
-	(to)->ch_tx_rx_prio_ratio = (from)->ch_tx_rx_prio_ratio; \
-	(to)->dma_tx_arb_algo = (from)->dma_tx_arb_algo; \
-	(to)->mac_lb_mode = (from)->mac_lb_mode; \
-} while (0)
-
-struct DWC_ETH_QOS_PGStruct {
-	/* This gives which DMA channel is enabled and which is disabled
-	 * Bit0 for Ch0
-	 * Bit1 for Ch1
-	 * Bit2 for Ch2 and so on
-	 * Bit7 for Ch7
-	 * */
-	unsigned char ch_SelMask;
-
-	/* Duration for which experiment should be conducted in minutes - Default 2 Minutes */
-	unsigned char DurationOfExp;
-
-	/* Used when more than One channel enabled in Rx path (Not Used)
-	 * for only CH1 Enabled:
-	 * Frames sith Priority > Value programmed, frames sent to CH1
-	 * Frames with priority < Value programmed are sent to CH0
-	 *
-	 * For both CH1 and CH2 Enabled:
-	 * Frames sith Priority > Value programmed, frames sent to CH2
-	 * Frames with priority < Value programmed are sent to CH
-	 * */
-	unsigned char PrioTagForAV;
-
-	unsigned char queue_dcb_algorithm;
-
-	unsigned char ch_tx_rx_arb_scheme;	/* Should Ch use Weighted RR policy with Rx:Tx/Tx:Rx or Fixed Priority */
-	unsigned char ch_use_tx_high_prio;	/* Should Ch Tx have High priority over Rx */
-	unsigned char ch_tx_rx_prio_ratio;	/* For RR what is the ratio between Tx:Rx/Rx:Tx */
-	unsigned char dma_tx_arb_algo; /* Refer DMA Mode register TAA field */
-
-	unsigned char mac_lb_mode; /* 0 => No MAC Loopback; 1 => MAC Loopback On */
-	unsigned int speed_100M_1G;
-	struct DWC_ETH_QOS_pg_ch_input pg_ch_input[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
-	unsigned char channel_running[DWC_ETH_QOS_MAX_TX_QUEUE_CNT];
-};
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 #endif
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
index e2d2a0f..08303dbe 100644
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -94,10 +94,6 @@
 #define MAC_VER_4_00	0x40
 #define MAC_VER_4_10	0x41
 
-#ifdef CONFIG_PGTEST_OBJ
-#define DWC_ETH_QOS_CONFIG_PGTEST
-#endif
-
 #ifdef CONFIG_PTPSUPPORT_OBJ
 #define DWC_ETH_QOS_CONFIG_PTP
 #endif
@@ -106,20 +102,6 @@
 #define DWC_ETH_QOS_CONFIG_DEBUGFS
 #endif
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-
-#define DWC_ETH_QOS_DA_SA 12
-#define DWC_ETH_QOS_TYPE 2
-#define DWC_ETH_QOS_VLAN_TAG 4
-#define DWC_ETH_QOS_ETH_HDR_AVB (DWC_ETH_QOS_DA_SA + \
-		DWC_ETH_QOS_TYPE + \
-		DWC_ETH_QOS_VLAN_TAG)
-
-#define DWC_ETH_QOS_PG_FRAME_SIZE (pdata->dev->mtu + DWC_ETH_QOS_ETH_HDR_AVB)
-#define DWC_ETH_QOS_AVTYPE 0x22f0
-
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 /* NOTE: Uncomment below line for TX and RX DESCRIPTOR DUMP in KERNEL LOG */
 //#define DWC_ETH_QOS_ENABLE_RX_DESC_DUMP
 
@@ -151,11 +133,6 @@
 #undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
 #endif
 
-
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-#undef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
-#endif
-
 #ifdef DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT_HALFDUPLEX
 #define DWC_ETH_QOS_CERTIFICATION_PKTBURSTCNT
 #endif
@@ -630,18 +607,6 @@ typedef struct {
 	int(*config_low_credit)(uint32_t qInx, uint32_t lo_credit);
 	int(*config_slot_num_check)(uint32_t qInx, uint8_t slot_check);
 	int(*config_advance_slot_num_check)(uint32_t qInx, uint8_t adv_slot_check);
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	void(*tx_desc_init_pg)(struct DWC_ETH_QOS_prv_data *, uint32_t qInx);
-	void(*rx_desc_init_pg)(struct DWC_ETH_QOS_prv_data *, uint32_t qInx);
-	int(*set_ch_arb_weights)(uint32_t qInx, uint8_t weight);
-	int(*config_slot_interrupt)(uint32_t qInx, uint8_t config);
-	int(*set_slot_count)(uint32_t qInx, uint8_t slotCount);
-	int(*set_tx_rx_prio_policy)(uint8_t prio_policy);
-	int(*set_tx_rx_prio)(uint8_t prio);
-	int(*set_tx_rx_prio_ratio)(uint8_t prio_ratio);
-	int(*set_dma_tx_arb_algorithm)(uint8_t arb_algo);
-	int(*prepare_dev_pktgen)(struct DWC_ETH_QOS_prv_data *);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
 
 	/* for hw time stamping */
 	int(*config_hw_time_stamping)(uint32_t);
@@ -734,9 +699,6 @@ struct DWC_ETH_QOS_tx_buffer {
 	unsigned short len2; /* length of second skb */
 	unsigned char buf2_mapped_as_page;
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	unsigned char slot_number;
-#endif
 };
 
 struct DWC_ETH_QOS_tx_wrapper_descriptor {
@@ -1157,14 +1119,6 @@ struct DWC_ETH_QOS_prv_data {
 	struct DWC_ETH_QOS_mmc_counters mmc;
 	struct DWC_ETH_QOS_extra_stats xstats;
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-	struct DWC_ETH_QOS_PGStruct *pg;
-	struct timer_list pg_timer;
-	int prepare_pg_packet;
-	int run_test;
-	int max_counter;
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 	/* rx split header mode */
 	unsigned char rx_split_hdr;
 
@@ -1317,20 +1271,6 @@ void DWC_ETH_QOS_handle_eee_interrupt(struct DWC_ETH_QOS_prv_data *pdata);
 void DWC_ETH_QOS_disable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata);
 void DWC_ETH_QOS_enable_eee_mode(struct DWC_ETH_QOS_prv_data *pdata);
 
-#ifdef DWC_ETH_QOS_CONFIG_PGTEST
-irqreturn_t DWC_ETH_QOS_ISR_SW_DWC_ETH_QOS_pg(int irq, void *device_id);
-void DWC_ETH_QOS_default_confs(struct DWC_ETH_QOS_prv_data *pdata);
-int DWC_ETH_QOS_handle_pg_ioctl(struct DWC_ETH_QOS_prv_data *pdata, void *ptr);
-int DWC_ETH_QOS_alloc_pg(struct DWC_ETH_QOS_prv_data *pdata);
-void DWC_ETH_QOS_free_pg(struct DWC_ETH_QOS_prv_data *pdata);
-int DWC_ETH_QOS_alloc_rx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				struct DWC_ETH_QOS_rx_buffer *buffer,
-				gfp_t gfp);
-int DWC_ETH_QOS_alloc_tx_buf_pg(struct DWC_ETH_QOS_prv_data *pdata,
-				struct DWC_ETH_QOS_tx_buffer *buffer,
-				gfp_t gfp);
-#endif /* end of DWC_ETH_QOS_CONFIG_PGTEST */
-
 #define MIN(a,b) ((a) < (b))? (a) : (b)
 
 /* For debug prints*/
diff --git a/drivers/net/ethernet/synopsys/Kconfig b/drivers/net/ethernet/synopsys/Kconfig
index 8a1f081..92ff6ad 100644
--- a/drivers/net/ethernet/synopsys/Kconfig
+++ b/drivers/net/ethernet/synopsys/Kconfig
@@ -22,10 +22,4 @@ config DWC_QOS_PTP
 	help
 	  Adds PTP support.
 
-config DWC_QOS_PG
-	bool "Packet generator support"
-	default n
-	help
-	  Adds PG support.
-
 endif # DWC_QOS
diff --git a/drivers/net/ethernet/synopsys/Makefile b/drivers/net/ethernet/synopsys/Makefile
index 96f5f20..1a3a5b1 100644
--- a/drivers/net/ethernet/synopsys/Makefile
+++ b/drivers/net/ethernet/synopsys/Makefile
@@ -1,16 +1,7 @@
 #default values
-#PGTEST=n	#pg(packet generator) is disabled	
 #DEBUGFS=y	#debugfs is enabled
 #PTPSUPPORT=n	#ptp is disabled
 
-ifeq "$(CONFIG_DWC_QOS_PG)" "y"
-CONFIG_PGTEST_OBJ=y
-DWC_ETH_QOS_CONFIG_PGTEST=-DPGTEST
-EXTRA_CFLAGS+=-DCONFIG_PGTEST_OBJ
-else
-CONFIG_PGTEST_OBJ=n
-endif
-
 ifeq "$(CONFIG_DWC_QOS_DEBUGFS)" "y"
 CONFIG_DEBUGFS_OBJ=y
 DWC_ETH_QOS_CONFIG_DEBUGFS=-DDEBUGFS
@@ -38,5 +29,4 @@ DWC_ETH_QOS-y += DWC_ETH_QOS_dev.o \
 			DWC_ETH_QOS_eee.o
 
 DWC_ETH_QOS-$(CONFIG_DEBUGFS_OBJ) += DWC_ETH_QOS_debug_operation.o
-DWC_ETH_QOS-$(CONFIG_PGTEST_OBJ) += DWC_ETH_QOS_pktgen.o
 DWC_ETH_QOS-$(CONFIG_PTPSUPPORT_OBJ) += DWC_ETH_QOS_ptp.o
-- 
2.10.1

