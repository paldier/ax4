From 9fe59bf111696853a961baed57addd123d9ddb69 Mon Sep 17 00:00:00 2001
From: Sindhura Grandhi <sindhura.grandhi@intel.com>
Date: Mon, 19 Sep 2016 12:39:25 -0700
Subject: [PATCH 478/639] net: phy: SFP PHY Driver Implementation.

SFP modules needs to be supported on CGM platforms.
This driver does the power sequencing, init, handle interrupts and
process them accordingly. Without this driver, the Atom will cause a
hard-hang whenever SFP module is removed/ejected.

Signed-off-by: Sindhura Grandhi <sindhura.grandhi@intel.com>
---
 Documentation/networking/sfp_phy.txt |  66 ++++
 drivers/net/phy/Kconfig              |  11 +
 drivers/net/phy/Makefile             |   1 +
 drivers/net/phy/sfp_phy.c            | 612 +++++++++++++++++++++++++++++++++++
 drivers/net/phy/sfp_phy.h            | 107 ++++++
 5 files changed, 797 insertions(+)
 create mode 100644 Documentation/networking/sfp_phy.txt
 create mode 100644 drivers/net/phy/sfp_phy.c
 create mode 100644 drivers/net/phy/sfp_phy.h

diff --git a/Documentation/networking/sfp_phy.txt b/Documentation/networking/sfp_phy.txt
new file mode 100644
index 0000000..3eb4f00
--- /dev/null
+++ b/Documentation/networking/sfp_phy.txt
@@ -0,0 +1,66 @@
+SFP PHY Driver
+--------------------------
+--------------------------
+
+Introduction
+-------------
+--------------
+This document describes the SFP (Small FormFactor Pluggable) module driver implementation.
+
+
+SFP driver is used to support SFP PHY modules. At a high level, it does the following:
+- Register as an I2C client device.
+- Implement the state machine in order to maintain the state for On,Off,Active events.
+- Register interrupt handlers for Tx fault, LOS and present events.
+- Process the interrupts and events that occur in the workqueue and do the appropriate action for each case.
+- Export the sysfs attributes for SFP service level, Tx fault count, LOS (Loss of Signal) count and state.
+
+
+Design flow
+------------
+------------
+It starts with Power Manager who sets the SFP service level to ON in Active and Off to BBU (battery) based on the policy. Once this is done, SFP driver gets the service level event and changes the "state" accordingly.
+The state machine below describes the way the state changes and what events are being triggered in each case.
+Interrupts and events comes in either when service level attribute is changed or when SFP in plugged in/removed which causes SFP HW interrupts to occur.
+The event handler implements the actions described in this state machine.
+
+
+|---------------------------------------------------------------------------------------------------------------|
+|	Event	|	On AC		  |	On Battery		  |	SFP Present			|
+|State		|			  |			          |					|
+|---------------------------------------------------------------------------------------------------------------|
+|SFP OFF	|  Change state to SFP ON |  NetIP resource control       |					|
+|		|			  |  method in ACPI on recieving  | 	SFP Present = x			|
+|		|			  |  SGMII0 service OFF will turn |	State remains OFF		|
+|		|			  |  on the SFP Power and Tx      |					|
+|		|			  |  Disable OFF.                 |					|
+|---------------------------------------------------------------------------------------------------------------|
+|               |                         |                               |					|
+|SFP ON		|  Power on SFP		  |  Change state to SFP=OFF	  |	SFP Present=0			|
+|		|  State = SFP ON	  |				  | 	Change State to SFP active	|
+|		|  Check if SFP PRESENT   |                               |					|
+|		|  is Low. If yes, Change |                               |					|
+|		|  state to Active and    |                               |					|
+|		|  trigger NetLink SFP    |                               |  					|
+|		|  active event	          |                               |					|
+|---------------------------------------------------------------------------------------------------------------|
+|SFP Active	|  State remains Active.  |  Change state to SFP=OFF	  |	If SFP present =0,		|
+|		|  Trigger Netlink SFP 	  |				  |	Turns on the SFP Tx Disable	|
+|		|  active event and set   |				  |	Trigger Netlink SFP active	|
+|		|  SFP Tx Disable=0	  |				  |	event and set State= Active	|
+|		|   			  |				  |	If SFP present=1,		|
+|		|			  |				  |	Trigger a Netlink SFP inactive 	|
+|		|			  |				  |	event and set State=OFF		|
+|---------------------------------------------------------------------------------------------------------------|
+
+Implementation
+---------------
+---------------
+Implementing the SFP driver are in the lines of how the design flow is described above.
+
+
+Existing Issues
+---------------
+---------------
+- I2C communication errors.
+- Slight SFP Power leakage when turned off.
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 342561a..f9263c9 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -273,6 +273,17 @@
 	tristate "Micrel KS8995MA 5-ports 10/100 managed Ethernet switch"
 	depends on SPI
 
+config SFP_PHY
+	tristate "Drivers for the SFP PHY"
+	depends on I2C
+	help
+	  This driver supports the SFP PHY module. It powers up the device and
+	  registers interrupt handlers for Tx fault, LOS and present events.
+	  It implements the state machine to maintain the On,Off,Active events.
+	  It exposes SFP service level, Tx fault count, LOS count and state.
+	  It processes the interrupts and events that occur in the workqueue and
+	  will do the appropriate action for each individual use-case.
+
 config PSB6970_PHY
 	tristate "Lantiq XWAY Tantos (PSB6970) Ethernet switch"
 	select SWCONFIG
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index 23a2ab2..a2782ff 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -31,3 +31,4 @@ obj-$(CONFIG_MDIO_BUS_MUX)	+= mdio-mux.o
 obj-$(CONFIG_MDIO_BUS_MUX_GPIO)	+= mdio-mux-gpio.o
 obj-$(CONFIG_MDIO_BUS_MUX_MMIOREG) += mdio-mux-mmioreg.o
 obj-$(CONFIG_MDIO_SUN4I)	+= mdio-sun4i.o
+obj-$(CONFIG_SFP_PHY)		+= sfp_phy.o
\ No newline at end of file
diff --git a/drivers/net/phy/sfp_phy.c b/drivers/net/phy/sfp_phy.c
new file mode 100644
index 0000000..6ea4954
--- /dev/null
+++ b/drivers/net/phy/sfp_phy.c
@@ -0,0 +1,612 @@
+/* sfp_phy.c - Puma SFP Phy module
+ *
+ *  Copyright (C) 2016 Intel Corporation. All rights reserved.
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307
+ *  USA
+ */
+
+#include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/i2c.h>
+#include <linux/err.h>
+#include <linux/wait.h>
+#include <acpi/acpi_bus.h>
+#include <linux/interrupt.h>
+#include <linux/spinlock.h>
+#include <linux/gpio.h>
+#include <linux/acpi_gpio.h>
+#include <acpi/acpi_drivers.h>
+#include "sfp_phy.h"
+#include <linux/workqueue.h>
+#include <linux/atomic.h>
+
+static void sfp_service_handler(struct work_struct *cmd_work)
+{
+	struct puma7_sfp_phy *sfp_hdlr;
+
+	sfp_hdlr = container_of(cmd_work,
+			struct puma7_sfp_phy,
+			cmd_work);
+
+	int txfault = 0, los = 0, present = 0, servicelevel = 0;
+
+	mutex_lock(&sfp_hdlr->event_lock);
+
+	if (atomic_read(&sfp_hdlr->txfault_event)) {
+		atomic_set(&sfp_hdlr->txfault_event, 0);
+		txfault = PROCESS_TXFAULT;
+	}
+	if (atomic_read(&sfp_hdlr->los_event)) {
+		atomic_set(&sfp_hdlr->los_event, 0);
+		los = PROCESS_LOS;
+	}
+	if (atomic_read(&sfp_hdlr->present_event)) {
+		atomic_set(&sfp_hdlr->present_event, 0);
+		present = PROCESS_TXFAULT;
+	}
+	if (atomic_read(&sfp_hdlr->servicelevel_event)) {
+		atomic_set(&sfp_hdlr->servicelevel_event, 0);
+		if (atomic_read(
+					&sfp_hdlr->service_level_value)
+				== SFP_EVENT_AC)
+
+			servicelevel = PROCESS_ONAC;
+		else if (atomic_read(
+					&sfp_hdlr->service_level_value)
+				== SFP_EVENT_ONBAT)
+			servicelevel = PROCESS_ONBAT;
+	}
+
+	/* Process TxFault ISR deferred handling logic */
+	if (txfault) {
+
+		if (sfp_hdlr->state == SFP_STATE_ACTIVE)
+			sfp_hdlr->txfault_counter += 1;
+	}
+	/* Process LOS ISR deferred handling logic */
+	if (los) {
+
+		if (sfp_hdlr->state == SFP_STATE_ACTIVE)
+			sfp_hdlr->los_counter += 1;
+	}
+	/* Process Present ISR deferred handling logic */
+	if (present) {
+
+		if (sfp_hdlr->state == SFP_STATE_ON)
+			sfp_hdlr->state = SFP_STATE_ACTIVE;
+
+		if (sfp_hdlr->state == SFP_STATE_ACTIVE) {
+			int gpiopresent;
+			gpiopresent = gpio_get_value(
+					sfp_hdlr->gpio_present
+					);
+			if (gpiopresent == SFP_PRESENT) {
+				gpio_set_value(
+						sfp_hdlr->gpio_tx_disable,
+						SFP_TX_ENABLE);
+
+				/* Trigger a NetLink SFP active event
+				 * to Power Manager
+				 */
+				acpi_bus_generate_netlink_event(
+						PUMA_SFP_CLASS,
+						PUMA_SFP_DEVICE_NAME,
+						PUMA_ACPI_NOTIFY_SFP_EVENT,
+						SFP_PRESENT);
+			} else {
+				sfp_hdlr->state = SFP_STATE_OFF;
+
+				/* Trigger a NetLink SFP inactive
+				 * event to Power Manager
+				 */
+				acpi_bus_generate_netlink_event(
+						PUMA_SFP_CLASS,
+						PUMA_SFP_DEVICE_NAME,
+						PUMA_ACPI_NOTIFY_SFP_EVENT,
+						SFP_NOT_PRESENT);
+			}
+		}
+	}
+	/* Process service_Level OnAC sysfs deferred handling logic */
+	if (servicelevel == PROCESS_ONAC) {
+		if (sfp_hdlr->state == SFP_STATE_OFF)
+			sfp_hdlr->state = SFP_STATE_ON;
+		if (sfp_hdlr->state == SFP_STATE_ON) {
+			gpio_set_value(sfp_hdlr->gpio_power,
+					SFP_POWER_ON);
+
+			if (gpio_get_value(
+						sfp_hdlr->gpio_present)
+					== 0) {
+				sfp_hdlr->state =
+					SFP_STATE_ACTIVE;
+
+				gpio_set_value(
+						sfp_hdlr->gpio_tx_disable,
+						SFP_TX_ENABLE);
+
+				acpi_bus_generate_netlink_event(
+						PUMA_SFP_CLASS,
+						PUMA_SFP_DEVICE_NAME,
+						PUMA_ACPI_NOTIFY_SFP_EVENT,
+						SFP_PRESENT);
+			}
+		}
+	}
+	/* Process service_Level OnBat sysfs deferred handling logic */
+	if (servicelevel == PROCESS_ONBAT) {
+		if ((sfp_hdlr->state == SFP_STATE_ON) ||
+				(sfp_hdlr->state == SFP_STATE_ACTIVE)) {
+			sfp_hdlr->state = SFP_STATE_OFF;
+			sfp_hdlr->los_counter = 0;
+			sfp_hdlr->txfault_counter = 0;
+		}
+	}
+	mutex_unlock(&sfp_hdlr->event_lock);
+}
+
+/* SFP interrupt handlers */
+static irqreturn_t sfp_txfault_isr(int irq, void *data)
+{
+	struct puma7_sfp_phy *sfp_tx = data;
+	atomic_set(&sfp_tx->txfault_event, 1);
+	queue_work(sfp_tx->work, &sfp_tx->cmd_work);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t sfp_los_isr(int irq, void *data)
+{
+	struct puma7_sfp_phy *sfp_los = data;
+	atomic_set(&sfp_los->los_event, 1);
+	queue_work(sfp_los->work, &sfp_los->cmd_work);
+
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t sfp_present_isr(int irq, void *data)
+{
+	struct puma7_sfp_phy *sfp_pst = data;
+
+	atomic_set(&sfp_pst->present_event, 1);
+	queue_work(sfp_pst->work, &sfp_pst->cmd_work);
+
+	return IRQ_HANDLED;
+}
+
+/* Sysfs attributes for SFP:
+ * Show/Store Service_level from Power Manager
+ * TxFault counter
+ * Los counter
+ * Read SFP state variable
+ */
+static ssize_t show_service_level(struct device *dev,
+		struct device_attribute *dattr,
+		char *buf)
+{
+	struct puma7_sfp_phy *sfp_sysfs = dev_get_drvdata(dev);
+
+	return sprintf(buf,
+			"0x%08X\n",
+			atomic_read(&sfp_sysfs->service_level_value));
+}
+
+static ssize_t store_service_level(struct device *dev,
+		struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	unsigned long service_level;
+	kstrtoul(buf, 0, &service_level);
+	struct puma7_sfp_phy *sfp_sysfs = dev_get_drvdata(dev);
+
+	atomic_set(&sfp_sysfs->service_level_value, service_level);
+
+	atomic_set(&sfp_sysfs->servicelevel_event, 1);
+
+	queue_work(sfp_sysfs->work, &sfp_sysfs->cmd_work);
+
+	return count;
+}
+
+static ssize_t show_txfault_count(struct device *dev,
+		struct device_attribute *dattr,
+		char *buf)
+{
+	struct puma7_sfp_phy *sfp_sysfs = dev_get_drvdata(dev);
+
+	return sprintf(buf,
+			"0x%08X\n",
+			(unsigned int)sfp_sysfs->txfault_counter);
+}
+
+static ssize_t show_los_count(struct device *dev,
+		struct device_attribute *dattr,
+		char *buf)
+{
+	struct puma7_sfp_phy *sfp_sysfs = dev_get_drvdata(dev);
+
+	return sprintf(buf,
+			"0x%08X\n",
+			(unsigned int)sfp_sysfs->los_counter);
+}
+
+static ssize_t show_read_state(struct device *dev,
+		struct device_attribute *dattr,
+		char *buf)
+{
+	struct puma7_sfp_phy *sfp_sysfs = dev_get_drvdata(dev);
+
+	return sprintf(buf,
+			"0x%08X\n",
+			(unsigned int)sfp_sysfs->state);
+}
+
+static DEVICE_ATTR(service_level,
+		S_IWUGO | S_IRUGO,
+		show_service_level,
+		store_service_level);
+static DEVICE_ATTR(txfault_count,
+		S_IRUGO,
+		show_txfault_count,
+		NULL);
+static DEVICE_ATTR(los_count,
+		S_IRUGO,
+		show_los_count,
+		NULL);
+static DEVICE_ATTR(read_state,
+		S_IRUGO,
+		show_read_state,
+		NULL);
+
+static struct attribute_group *sfp_attributes[] = {
+	&dev_attr_service_level.attr,
+	&dev_attr_txfault_count.attr,
+	&dev_attr_los_count.attr,
+	&dev_attr_read_state.attr,
+	NULL,
+};
+
+static const struct attribute_group sfp_attr_group = {
+	.name = NULL,
+	.attrs = sfp_attributes,
+};
+
+void sfp_free_resources(struct puma7_sfp_phy *data,
+		int resource_index,
+		struct device *dev)
+{
+	switch (resource_index) {
+	case PUMA_SFP_POWER_GPIO:
+		gpio_free(data->gpio_power);
+	case PUMA_SFP_TXDISABLE_GPIO:
+		gpio_free(data->gpio_tx_disable);
+	case PUMA_SFP_PRESENT_IRQ:
+		devm_free_irq(dev, data->present_irq, data);
+	case PUMA_SFP_PRESENT_GPIO:
+		gpio_free(data->gpio_present);
+	case PUMA_SFP_LOS_IRQ:
+		devm_free_irq(dev, data->los_irq, data);
+	case PUMA_SFP_LOS_GPIO:
+		gpio_free(data->gpio_los);
+	case PUMA_SFP_TXFAULT_IRQ:
+		devm_free_irq(dev, data->txfault_irq, data);
+	case PUMA_SFP_TXFAULT_GPIO:
+		gpio_free(data->gpio_txfault);
+	case PUMA_SFP_FREE_WQ:
+		cancel_work_sync(&data->cmd_work);
+		flush_workqueue(data->work);
+		destroy_workqueue(data->work);
+	case PUMA_SFP_SYSFS:
+		sysfs_remove_group(&dev->kobj, &sfp_attr_group);
+	case PUMA_SFP_MUTEX:
+		mutex_destroy(&data->event_lock);
+	case PUMA_SFP_MEM:
+		devm_kfree(dev, data);
+		break;
+
+	default:
+		pr_err("Puma SFP invalid resource index %d\n",
+				resource_index);
+	}
+}
+
+int sfp_request_gpio(struct puma7_sfp_phy *sfp,
+		struct device *dev,
+		enum sfp_acpi_pin_idx index,
+		unsigned int *gpio)
+{
+	struct acpi_gpio_info info;
+	int ret;
+
+	/* Get GPIO no. through ACPI index */
+	*gpio = acpi_get_gpio_by_index(dev,
+			index,
+			&info);
+
+	if (*gpio < 0) {
+		dev_err(dev,
+				"GPIO INT resource not found for %s:%s\n",
+				strs[index],
+				__func__);
+		return -ENOENT;
+	}
+
+	/* Request for a gpio */
+	ret = gpio_request(*gpio, strs[index]);
+	if (ret) {
+		dev_err(dev,
+				"gpio_request failed for %s : %s\n",
+				strs[index], __func__);
+		return ret;
+	}
+
+	return 0;
+}
+
+
+static int sfp_phy_probe(struct i2c_client *client)
+{
+	struct puma7_sfp_phy *sfp;
+	struct device *dev = &client->dev;
+	int ret = -EINVAL;
+	struct acpi_gpio_info info;
+	/*points to the last resource successfully allocated*/
+	int resource_index;
+
+	sfp = devm_kzalloc(dev,
+			sizeof(struct puma7_sfp_phy),
+			GFP_KERNEL);
+	if (!sfp) {
+		dev_err(&client->dev,
+				"sfp_phy_probe alloc error! %s\n",
+				__func__);
+		return -ENOMEM;
+	}
+	resource_index = PUMA_SFP_MEM;
+
+	sfp->client = client;
+	sfp->handle = ACPI_HANDLE(dev);
+
+	i2c_set_clientdata(client, sfp);
+	sfp->client->flags |= I2C_FUNC_10BIT_ADDR;
+
+	atomic_set(&sfp->txfault_event, 0);
+	mutex_init(&sfp->event_lock);
+	resource_index = PUMA_SFP_MUTEX;
+
+	/* Create and register sysfs attributes */
+	ret = sysfs_create_group(&client->dev.kobj, &sfp_attr_group);
+	if (ret) {
+		dev_err(&sfp->client->dev,
+				"sfp_phy_probe sysfs_create_group error! %s\n",
+				__func__);
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_SYSFS;
+
+	/* The variable when set indicates that an event
+	 *  has happened in SFP.SFP event handling thread sleeps
+	 *  in the work queue until this variable is non-zero
+	 */
+	sfp->state = SFP_STATE_OFF;
+
+	sfp->work = create_singlethread_workqueue(
+			"sfp_service_handler");
+	INIT_WORK(&sfp->cmd_work, sfp_service_handler);
+	resource_index = PUMA_SFP_FREE_WQ;
+
+	/* SFP TX FAULT GPIO IRQ */
+	ret = sfp_request_gpio(sfp, dev, TXFAULT_IDX, &sfp->gpio_txfault);
+	if (ret < 0) {
+		ret = sfp->gpio_txfault;
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_TXFAULT_GPIO;
+
+	sfp->txfault_irq = gpio_to_irq(sfp->gpio_txfault);
+	if (sfp->txfault_irq < 0) {
+		ret = sfp->txfault_irq;
+		dev_err(dev, "Failed to get IRQ number for GPIO TxFault: %d\n",
+				sfp->gpio_txfault);
+
+		goto sfp_probe_error;
+	}
+	ret = devm_request_irq(dev, sfp->txfault_irq,
+			sfp_txfault_isr,
+			IRQF_TRIGGER_RISING,
+			PUMA_SFP_DEVICE_NAME, sfp);
+	if (ret < 0) {
+		dev_err(dev, "Failed to request TxFault IRQ: %d\n",
+				sfp->txfault_irq);
+
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_TXFAULT_IRQ;
+
+	ret = gpio_direction_input(sfp->gpio_txfault);
+	if (ret) {
+		dev_err(dev,
+				"gpio_direction_input failed for %d: %s\n",
+				sfp->gpio_txfault, __func__);
+		goto sfp_probe_error;
+	}
+
+	/* SFP LOS GPIO IRQ */
+	ret = sfp_request_gpio(sfp, dev, LOS_IDX, &sfp->gpio_los);
+	if (ret < 0) {
+		ret = sfp->gpio_los;
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_LOS_GPIO;
+
+	sfp->los_irq = gpio_to_irq(sfp->gpio_los);
+	if (sfp->los_irq < 0) {
+		ret = sfp->los_irq;
+		dev_err(dev, "Failed to get IRQ number for GPIO LOS: %d\n",
+				sfp->gpio_los);
+
+		goto sfp_probe_error;
+	}
+
+	ret = devm_request_irq(dev, sfp->los_irq,
+			sfp_los_isr,
+			IRQF_TRIGGER_RISING,
+			PUMA_SFP_DEVICE_NAME,
+			sfp);
+	if (ret < 0) {
+		dev_err(dev,
+				"Failed to request LOS IRQ:%d\n",
+				sfp->los_irq);
+
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_LOS_IRQ;
+
+	ret = gpio_direction_input(sfp->gpio_los);
+	if (ret) {
+		dev_err(dev,
+				"gpio_direction_input failed for %d: %s\n",
+				sfp->gpio_los, __func__);
+
+		goto sfp_probe_error;
+	}
+
+	/* SFP PRESENT GPIO IRQ */
+	ret = sfp_request_gpio(sfp, dev, PRESENT_IDX, &sfp->gpio_present);
+	if (ret < 0) {
+		ret = sfp->gpio_present;
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_PRESENT_GPIO;
+
+	sfp->present_irq = gpio_to_irq(sfp->gpio_present);
+	if (sfp->present_irq < 0) {
+		ret = sfp->present_irq;
+		dev_err(dev, "Failed to get IRQ number for GPIO Present: %d\n",
+				sfp->gpio_present);
+
+		goto sfp_probe_error;
+	}
+
+	ret = devm_request_irq(dev,
+			sfp->present_irq,
+			sfp_present_isr,
+			IRQF_TRIGGER_FALLING |
+			IRQF_TRIGGER_RISING,
+			PUMA_SFP_DEVICE_NAME,
+			sfp);
+	if (ret < 0) {
+		dev_err(dev,
+				"Failed to request SFP Present IRQ: %d:\n",
+				sfp->present_irq);
+
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_PRESENT_IRQ;
+
+	ret = gpio_direction_input(sfp->gpio_present);
+	if (ret) {
+		dev_err(dev,
+				"gpio_direction_input failed for %d: %s\n",
+				sfp->gpio_present,
+				__func__);
+		goto sfp_probe_error;
+	}
+
+	/* SFP Tx Disable GPIO */
+	ret = sfp_request_gpio(sfp, dev, DISABLE_IDX, &sfp->gpio_tx_disable);
+	if (ret < 0) {
+		ret = sfp->gpio_tx_disable;
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_TXDISABLE_GPIO;
+
+	ret = gpio_direction_output(sfp->gpio_tx_disable, 1);
+	if (ret < 0) {
+		dev_err(dev,
+				"gpio_direction_output failed for %d: %s\n",
+				sfp->gpio_tx_disable,
+				__func__);
+		goto sfp_probe_error;
+	}
+
+	/* SFP Power GPIO */
+	ret = sfp_request_gpio(sfp, dev, POWER_IDX, &sfp->gpio_power);
+	if (ret < 0) {
+		ret = sfp->gpio_power;
+
+		goto sfp_probe_error;
+	}
+	resource_index = PUMA_SFP_POWER_GPIO;
+
+	ret = gpio_direction_output(sfp->gpio_power, 0);
+	if (ret < 0) {
+		dev_err(dev,
+				"gpio_direction_output failed for %d: %s\n",
+				sfp->gpio_power,
+				__func__);
+		goto sfp_probe_error;
+	}
+
+	return 0;
+
+sfp_probe_error:
+	sfp_free_resources(sfp, resource_index, dev);
+	pr_err("Failed to load Puma SFP driver!\n");
+
+	return ret;
+}
+
+static int sfp_phy_remove(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct puma7_sfp_phy *sfp_rm = dev_get_drvdata(dev);
+
+	sfp_free_resources(sfp_rm, PUMA_SFP_POWER_GPIO, dev);
+
+	return 0;
+}
+
+static const struct i2c_device_id puma7_sfp_id[] = {
+	{ .name = PUMA_SFP_DEVICE_NAME, .driver_data = 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, puma7_sfp_id);
+
+
+static struct acpi_device_id puma7_sfp_acpi_match[] = {
+	{ PUMA_SFP_DEVICE_NAME, 0},
+	{ },
+};
+MODULE_DEVICE_TABLE(acpi, puma7_sfp_acpi_match);
+
+
+static struct i2c_driver sfp_phy_driver = {
+	.probe = sfp_phy_probe,
+	.remove = sfp_phy_remove,
+	.driver		= {
+		.name	= PUMA_SFP_DEVICE_NAME,
+		.owner	= THIS_MODULE,
+		.acpi_match_table = ACPI_PTR(puma7_sfp_acpi_match),
+	},
+	.id_table	= puma7_sfp_id,
+};
+
+module_i2c_driver(sfp_phy_driver);
+
+MODULE_DESCRIPTION("SFP Phy driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/net/phy/sfp_phy.h b/drivers/net/phy/sfp_phy.h
new file mode 100644
index 0000000..ec64525
--- /dev/null
+++ b/drivers/net/phy/sfp_phy.h
@@ -0,0 +1,107 @@
+/* sfp_phy.h - Puma7 SoC SFP PHY Driver
+ *
+ * Copyright (C) 2016 Intel Corporation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License version
+ * 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef __LINUX_SFP_PHY_H__
+#define __LINUX_SFP_PHY_H__
+
+#include <linux/acpi.h>
+#include <linux/kthread.h>
+
+#define PUMA_SFP_DEVICE_NAME	"INT3518"
+#define PUMA_ACPI_NOTIFY_SFP_EVENT	0xA3
+#define PUMA_SFP_CLASS		"SFP"
+#define SFP_PRESENT 0
+#define SFP_NOT_PRESENT 1
+#define SFP_TX_ENABLE   0
+#define SFP_POWER_ON    1
+#define PROCESS_TXFAULT	1
+#define PROCESS_LOS		1
+#define PROCESS_PRESENT	1
+#define PROCESS_ONAC	1
+#define PROCESS_ONBAT	2
+
+const char strs[5][15] = {
+	"SFP_TxFault",
+	"SFP_LOS",
+	"SFP_PRESENT",
+	"SFP_DISABLE",
+	"SFP_POWER"
+};
+
+enum sfp_acpi_pin_idx {
+	TXFAULT_IDX,
+	LOS_IDX,
+	PRESENT_IDX,
+	DISABLE_IDX,
+	POWER_IDX,
+};
+
+enum sfp_event_state {
+	SFP_EVENT_AC,
+	SFP_EVENT_ONBAT,
+	SFP_STATE_OFF,
+	SFP_STATE_ON,
+	SFP_STATE_ACTIVE,
+};
+
+/* New member to be added after looking at sfp_free_resources().
+ * The index order is important as it is used to free specific
+ * resources.
+ */
+enum puma_resource_index {
+	PUMA_SFP_MEM,
+	PUMA_SFP_MUTEX,
+	PUMA_SFP_SYSFS,
+	PUMA_SFP_FREE_WQ,
+	PUMA_SFP_TXFAULT_GPIO,
+	PUMA_SFP_TXFAULT_IRQ,
+	PUMA_SFP_LOS_GPIO,
+	PUMA_SFP_LOS_IRQ,
+	PUMA_SFP_PRESENT_GPIO,
+	PUMA_SFP_PRESENT_IRQ,
+	PUMA_SFP_TXDISABLE_GPIO,
+	PUMA_SFP_POWER_GPIO,
+};
+
+/**
+ * struct puma7_sfp_phy - Puma7 SFP PHY device
+ * @client: points to i2c slave SFP device
+ * @handle: handle to the ACPI SFP device
+ */
+struct puma7_sfp_phy {
+	struct i2c_client *client;
+	acpi_handle handle;
+	int txfault_irq;
+	int los_irq;
+	int present_irq;
+	unsigned int gpio_txfault;
+	unsigned int gpio_los;
+	unsigned int gpio_present;
+	unsigned int gpio_tx_disable;
+	unsigned int gpio_power;
+	unsigned int state;
+	unsigned int txfault_counter;
+	unsigned int los_counter;
+	atomic_t service_level_value;
+	struct workqueue_struct	*work;
+	struct work_struct cmd_work;
+	atomic_t txfault_event;
+	atomic_t los_event;
+	atomic_t present_event;
+	atomic_t servicelevel_event;
+	struct mutex event_lock;
+};
+
+#endif /* __LINUX_SFP_PHY_H__ */
-- 
2.10.1

