From 4a1c83cf57e763c762ebcb5480d58f634043115b Mon Sep 17 00:00:00 2001
From: Artur Saygin <artur.saygin@intel.com>
Date: Mon, 26 Sep 2016 10:19:04 -0700
Subject: [PATCH 482/639] adding cppi mrp client

---
 drivers/mrpc/Kconfig       |   8 ++
 drivers/mrpc/Makefile      |   3 +-
 drivers/mrpc/cppi_client.c | 250 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 260 insertions(+), 1 deletion(-)
 create mode 100644 drivers/mrpc/cppi_client.c

diff --git a/drivers/mrpc/Kconfig b/drivers/mrpc/Kconfig
index 812b652..e80f25c 100755
--- a/drivers/mrpc/Kconfig
+++ b/drivers/mrpc/Kconfig
@@ -60,3 +60,11 @@ config MRPC_WIFI_PROXY_CLIENT
     default n
     help
        Enable wifi MRPC between ATOM and ARM
+
+config MRPC_CPPI_CLIENT
+    tristate "cppi mrpc client"
+    depends on MRPC
+    default n
+    help
+       cppi mrpc client
+
diff --git a/drivers/mrpc/Makefile b/drivers/mrpc/Makefile
index f20e0cd..7b8461a 100755
--- a/drivers/mrpc/Makefile
+++ b/drivers/mrpc/Makefile
@@ -1,4 +1,5 @@
 obj-$(CONFIG_MRPC)		 += core/
 obj-$(CONFIG_MRPC_EXAMPLES)	 += examples/
 obj-$(CONFIG_MRPC_MODPHY_CLIENT) += modphy_client.o
-obj-$(CONFIG_MRPC_HANDSHAKE)     += handshake_client.o
+obj-$(CONFIG_MRPC_HANDSHAKE)	 += handshake_client.o
+obj-$(CONFIG_MRPC_CPPI_CLIENT)	 += cppi_client.o
diff --git a/drivers/mrpc/cppi_client.c b/drivers/mrpc/cppi_client.c
new file mode 100644
index 0000000..6f66e16
--- /dev/null
+++ b/drivers/mrpc/cppi_client.c
@@ -0,0 +1,250 @@
+/*
+ *
+ * cppi_client.c
+ * Description:
+ * cppi mrpc client driver
+ *
+ *
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2016 Intel Corporation.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of version 2 of the GNU General Public License as
+ *  published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope that it will be useful, but
+ *  WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *  General Public License for more details.
+ *
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.
+ *  The full GNU General Public License is included in this distribution
+ *  in the file called LICENSE.GPL.
+ *
+ *  Contact Information:
+ *  Intel Corporation
+ *  2200 Mission College Blvd.
+ *  Santa Clara, CA  97052
+ */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ":%s:%d " fmt "\n", __func__, __LINE__
+
+/************************************************/
+/**                    Includes                 */
+/************************************************/
+#include <linux/platform_device.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/byteorder/generic.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+#include <linux/err.h>
+#include <linux/netdevice.h>
+#include <linux/ethtool.h>
+#include <linux/mrpc.h>
+#include <linux/avalanche/generic/pal_cppi41.h>
+
+#ifdef DEBUG
+#define DBG(fmt, ...) pr_err(fmt, ##__VA_ARGS__)
+#else
+#define DBG(fmt, ...) pr_debug(fmt, ##__VA_ARGS__)
+#endif
+
+/* driver private database */
+struct cppi_private {
+    struct platform_device *pdev;   /* platform device */
+    struct mrpc_client *mrpc;       /* mrpc client handle */
+};
+
+static struct cppi_private *this;
+
+struct cppi_args {
+    Uint32 buffers_base_addr;
+    Uint32 buffer_sz;
+    Uint32 buffer_cnt;
+};
+
+enum {
+    CPPI_INIT_PP_WIFI_BUFFER_POOL = 0,
+};
+
+
+static inline int cppi_mrpc_call(__u8 procid, struct cppi_args *args)
+{
+    struct cppi_private *priv = this;
+    int ret, errcode;
+    Uint32 rep;
+
+    if (!priv) {
+        pr_err("ERROR: mrpc cppi not initialized");
+        return -EFAULT;
+    }
+
+    ret = mrpc_call(priv->mrpc, procid, args, sizeof(*args), &rep, sizeof(rep),
+								   0, &errcode);
+
+    if (ret || errcode) {
+        pr_err("ERROR: ret=%d, errcode=%d", ret, errcode);
+        return errcode;
+    }
+
+    return ntohl(rep);
+}
+
+Uint32 avalanche_cppi_init_pp_wifi_buffer_pool(PAL_Handle palHandle,
+					       Uint32 buffers_base_addr,
+					       Uint32 buffer_sz,
+					       Uint32 buffer_cnt)
+
+{
+    struct cppi_args args;
+
+    args.buffers_base_addr = htonl(buffers_base_addr);
+    args.buffer_sz = htonl(buffer_sz); 
+    args.buffer_cnt = htonl(buffer_cnt);
+
+    return cppi_mrpc_call(CPPI_INIT_PP_WIFI_BUFFER_POOL, &args);
+}
+EXPORT_SYMBOL(avalanche_cppi_init_pp_wifi_buffer_pool);
+
+/* sysfs for future use */
+static ssize_t status_show(struct device *dev,
+                           struct device_attribute *attr, char *buf)
+{
+    struct cppi_private *priv = dev_get_drvdata(dev);
+
+    if (!priv)
+        return -EINVAL;
+
+    return scnprintf(buf, PAGE_SIZE, "status ok");
+}
+
+static DEVICE_ATTR(status, S_IRUGO, status_show, NULL);
+
+static struct attribute *cppi_attrs[] = {
+    &dev_attr_status.attr,
+    NULL
+};
+
+static struct attribute_group cppi_attrs_group = {
+    .attrs = cppi_attrs,
+};
+
+/**
+ * cppi_mrpc_probe
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int cppi_mrpc_probe(struct platform_device *pdev)
+{
+    struct cppi_private *priv;
+    int ret;
+
+    priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+    if (!priv) {
+        pr_err("memory allocation failed");
+        return -ENOMEM;
+    }
+
+    dev_set_drvdata(&pdev->dev, priv);
+    priv->pdev = pdev;
+
+    ret = sysfs_create_group(&priv->pdev->dev.kobj, &cppi_attrs_group);
+    if (ret) {
+        pr_err("sysfs_create_group failed (ret=%d)", ret);
+        return ret;
+    }
+
+    priv->mrpc = mrpc_client_register(MRPC_RESERVED_ID_CPPI, "cppi");
+    if (!priv->mrpc) {
+        pr_err("failed to register cppi");
+        ret = -ENODEV;
+        goto out_remove_group;
+    }
+
+    this = priv;
+    return 0;
+
+out_remove_group:
+    sysfs_remove_group(&priv->pdev->dev.kobj, &cppi_attrs_group);
+    return 0;
+}
+
+/**
+ * cppi_mrpc_remove
+ *
+ * This function is called when the cppi mrpc driver is
+ * removed.
+ *
+ * @param pdev   platform device
+ *
+ * @return 0 for success, error code otherwise
+ */
+static int cppi_mrpc_remove(struct platform_device *pdev)
+{
+    struct cppi_private *priv = platform_get_drvdata(pdev);
+    mrpc_client_unregister(priv->mrpc);
+    sysfs_remove_group(&priv->pdev->dev.kobj, &cppi_attrs_group);
+    dev_set_drvdata(&pdev->dev, NULL);
+    this = NULL;
+
+    return 0;
+}
+
+static struct platform_driver cppi_driver = {
+    .driver = {
+        .name   = "cppi",
+    },
+    .probe = cppi_mrpc_probe,
+    .remove = cppi_mrpc_remove,
+};
+
+static struct platform_device *cppi_device;
+
+static int __init cppi_mrpc_init(void)
+{
+    int ret;
+
+    ret = platform_driver_register(&cppi_driver);
+    if (ret < 0) {
+        pr_err("Failed to register cppi platform driver: %d\n", ret);
+        return ret;
+    }
+
+    cppi_device = platform_device_register_simple("cppi", -1, NULL, 0);
+    if (IS_ERR(cppi_device)) {
+        pr_err("Failed to register cppi platform device\n");
+        platform_driver_unregister(&cppi_driver);
+        return PTR_ERR(cppi_device);
+    }
+
+    return 0;
+}
+
+static void __exit cppi_mrpc_exit(void)
+{
+    platform_device_unregister(cppi_device);
+    platform_driver_unregister(&cppi_driver);
+}
+
+/******************************************************/
+/**    Module Declarations                           **/
+/******************************************************/
+module_init(cppi_mrpc_init);
+module_exit(cppi_mrpc_exit);
+
+MODULE_AUTHOR("Intel Corporation");
+MODULE_AUTHOR("Yair Weiss yair.weiss@intel.com");
+MODULE_DESCRIPTION("cppi mrpc client");
+MODULE_LICENSE("GPL");
+MODULE_VERSION("1.0");
-- 
2.10.1

