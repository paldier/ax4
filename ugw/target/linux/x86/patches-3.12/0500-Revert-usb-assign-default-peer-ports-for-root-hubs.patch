From 676fed9095945cd62d2dc0e97d6835ba33224796 Mon Sep 17 00:00:00 2001
From: Nagaraj S <sivasankaranx.nagaraj@intel.com>
Date: Thu, 13 Oct 2016 12:03:22 -0700
Subject: [PATCH 500/639] Revert "usb: assign default peer ports for root hubs"

This reverts commit a028f809f21460772dae52d16a2e6805344b328a.
This commit introduced the bug ATOMOSSW-328 "USB port do not go to
suspended state in BBU mode" hence reverting this patch.

Change-Id: I8b0e339e2ddef5e6c06f1e6d23df0802c7f3ff5a
Signed-off-by: Nagaraj S <sivasankaranx.nagaraj@intel.com>
---
 drivers/usb/core/hcd.c  | 43 ++++++-----------------------
 drivers/usb/core/hub.c  | 53 +++++++++++++++++++----------------
 drivers/usb/core/hub.h  |  2 --
 drivers/usb/core/port.c | 73 ++++---------------------------------------------
 drivers/usb/core/usb.h  |  1 -
 5 files changed, 42 insertions(+), 130 deletions(-)

diff --git a/drivers/usb/core/hcd.c b/drivers/usb/core/hcd.c
index 1262c0e..d32755e 100644
--- a/drivers/usb/core/hcd.c
+++ b/drivers/usb/core/hcd.c
@@ -2440,13 +2440,11 @@ struct usb_hcd *usb_create_shared_hcd(const struct hc_driver *driver,
 		mutex_init(hcd->bandwidth_mutex);
 		dev_set_drvdata(dev, hcd);
 	} else {
-		mutex_lock(&usb_port_peer_mutex);
 		hcd->bandwidth_mutex = primary_hcd->bandwidth_mutex;
 		hcd->primary_hcd = primary_hcd;
 		primary_hcd->primary_hcd = primary_hcd;
 		hcd->shared_hcd = primary_hcd;
 		primary_hcd->shared_hcd = hcd;
-		mutex_unlock(&usb_port_peer_mutex);
 	}
 
 	kref_init(&hcd->kref);
@@ -2498,25 +2496,18 @@ EXPORT_SYMBOL_GPL(usb_create_hcd);
  * deallocated.
  *
  * Make sure to only deallocate the bandwidth_mutex when the primary HCD is
- * freed.  When hcd_release() is called for either hcd in a peer set
- * invalidate the peer's ->shared_hcd and ->primary_hcd pointers to
- * block new peering attempts
+ * freed.  When hcd_release() is called for the non-primary HCD, set the
+ * primary_hcd's shared_hcd pointer to null (since the non-primary HCD will be
+ * freed shortly).
  */
-static void hcd_release(struct kref *kref)
+static void hcd_release (struct kref *kref)
 {
 	struct usb_hcd *hcd = container_of (kref, struct usb_hcd, kref);
 
-	mutex_lock(&usb_port_peer_mutex);
 	if (usb_hcd_is_primary_hcd(hcd))
 		kfree(hcd->bandwidth_mutex);
-	if (hcd->shared_hcd) {
-		struct usb_hcd *peer = hcd->shared_hcd;
-
-		peer->shared_hcd = NULL;
-		if (peer->primary_hcd == hcd)
-			peer->primary_hcd = NULL;
-	}
-	mutex_unlock(&usb_port_peer_mutex);
+	else
+		hcd->shared_hcd->shared_hcd = NULL;
 	kfree(hcd);
 }
 
@@ -2591,21 +2582,6 @@ static int usb_hcd_request_irqs(struct usb_hcd *hcd,
 	return 0;
 }
 
-/*
- * Before we free this root hub, flush in-flight peering attempts
- * and disable peer lookups
- */
-static void usb_put_invalidate_rhdev(struct usb_hcd *hcd)
-{
-	struct usb_device *rhdev;
-
-	mutex_lock(&usb_port_peer_mutex);
-	rhdev = hcd->self.root_hub;
-	hcd->self.root_hub = NULL;
-	mutex_unlock(&usb_port_peer_mutex);
-	usb_put_dev(rhdev);
-}
-
 /**
  * usb_add_hcd - finish generic HCD structure initialization and register
  * @hcd: the usb_hcd structure to initialize
@@ -2648,9 +2624,7 @@ int usb_add_hcd(struct usb_hcd *hcd,
 		retval = -ENOMEM;
 		goto err_allocate_root_hub;
 	}
-	mutex_lock(&usb_port_peer_mutex);
 	hcd->self.root_hub = rhdev;
-	mutex_unlock(&usb_port_peer_mutex);
 
 	switch (hcd->speed) {
 	case HCD_USB11:
@@ -2765,7 +2739,7 @@ err_hcd_driver_start:
 err_request_irq:
 err_hcd_driver_setup:
 err_set_rh_speed:
-	usb_put_invalidate_rhdev(hcd);
+	usb_put_dev(hcd->self.root_hub);
 err_allocate_root_hub:
 	usb_deregister_bus(&hcd->self);
 err_register_bus:
@@ -2839,10 +2813,9 @@ void usb_remove_hcd(struct usb_hcd *hcd)
 			free_irq(hcd->irq, hcd);
 	}
 
+	usb_put_dev(hcd->self.root_hub);
 	usb_deregister_bus(&hcd->self);
 	hcd_buffer_destroy(hcd);
-
-	usb_put_invalidate_rhdev(hcd);
 }
 EXPORT_SYMBOL_GPL(usb_remove_hcd);
 
diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index c296bd6..43ead2b 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -62,9 +62,6 @@ static DECLARE_WAIT_QUEUE_HEAD(khubd_wait);
 
 static struct task_struct *khubd_task;
 
-/* synchronize hub-port add/remove and peering operations */
-DEFINE_MUTEX(usb_port_peer_mutex);
-
 /* cycle leds on hubs that aren't blinking for attention */
 static bool blinkenlights = 0;
 module_param (blinkenlights, bool, S_IRUGO);
@@ -1346,7 +1343,6 @@ static int hub_configure(struct usb_hub *hub,
 	char *message = "out of memory";
 	unsigned unit_load;
 	unsigned full_load;
-	unsigned maxchild;
 
 	hub->buffer = kmalloc(sizeof(*hub->buffer), GFP_KERNEL);
 	if (!hub->buffer) {
@@ -1385,11 +1381,12 @@ static int hub_configure(struct usb_hub *hub,
 		goto fail;
 	}
 
-	maxchild = hub->descriptor->bNbrPorts;
-	dev_info(hub_dev, "%d port%s detected\n", maxchild,
-			(maxchild == 1) ? "" : "s");
+	hdev->maxchild = hub->descriptor->bNbrPorts;
+	dev_info (hub_dev, "%d port%s detected\n", hdev->maxchild,
+		(hdev->maxchild == 1) ? "" : "s");
 
-	hub->ports = kzalloc(maxchild * sizeof(struct usb_port *), GFP_KERNEL);
+	hub->ports = kzalloc(hdev->maxchild * sizeof(struct usb_port *),
+			     GFP_KERNEL);
 	if (!hub->ports) {
 		ret = -ENOMEM;
 		goto fail;
@@ -1410,11 +1407,11 @@ static int hub_configure(struct usb_hub *hub,
 		int	i;
 		char	portstr [USB_MAXCHILDREN + 1];
 
-		for (i = 0; i < maxchild; i++)
+		for (i = 0; i < hdev->maxchild; i++)
 			portstr[i] = hub->descriptor->u.hs.DeviceRemovable
 				    [((i + 1) / 8)] & (1 << ((i + 1) % 8))
 				? 'F' : 'R';
-		portstr[maxchild] = 0;
+		portstr[hdev->maxchild] = 0;
 		dev_dbg(hub_dev, "compound device; port removable status: %s\n", portstr);
 	} else
 		dev_dbg(hub_dev, "standalone hub\n");
@@ -1526,7 +1523,7 @@ static int hub_configure(struct usb_hub *hub,
 		if (hcd->power_budget > 0)
 			hdev->bus_mA = hcd->power_budget;
 		else
-			hdev->bus_mA = full_load * maxchild;
+			hdev->bus_mA = full_load * hdev->maxchild;
 		if (hdev->bus_mA >= full_load)
 			hub->mA_per_port = full_load;
 		else {
@@ -1541,7 +1538,7 @@ static int hub_configure(struct usb_hub *hub,
 			hub->descriptor->bHubContrCurrent);
 		hub->limited_power = 1;
 
-		if (remaining < maxchild * unit_load)
+		if (remaining < hdev->maxchild * unit_load)
 			dev_warn(hub_dev,
 					"insufficient power available "
 					"to use all downstream ports\n");
@@ -1609,8 +1606,7 @@ static int hub_configure(struct usb_hub *hub,
 	if (hub->has_indicators && blinkenlights)
 		hub->indicator [0] = INDICATOR_CYCLE;
 
-	mutex_lock(&usb_port_peer_mutex);
-	for (i = 0; i < maxchild; i++) {
+	for (i = 0; i < hdev->maxchild; i++) {
 		ret = usb_hub_create_port_device(hub, i + 1);
 		if (ret < 0) {
 			dev_err(hub->intfdev,
@@ -1619,16 +1615,34 @@ static int hub_configure(struct usb_hub *hub,
 		}
 	}
 	hdev->maxchild = i;
-	mutex_unlock(&usb_port_peer_mutex);
+	for (i = 0; i < hdev->maxchild; i++) {
+		struct usb_port *port_dev = hub->ports[i];
+
+		pm_runtime_put(&port_dev->dev);
+	}
+
 	if (ret < 0)
 		goto fail;
 
+	/* Update the HCD's internal representation of this hub before khubd
+	 * starts getting port status changes for devices under the hub.
+	 */
+	if (hcd->driver->update_hub_device) {
+		ret = hcd->driver->update_hub_device(hcd, hdev,
+				&hub->tt, GFP_KERNEL);
+		if (ret < 0) {
+			message = "can't update HCD hub info";
+			goto fail;
+		}
+	}
+
 	usb_hub_adjust_deviceremovable(hdev, hub->descriptor);
 
 	hub_activate(hub, HUB_INIT);
 	return 0;
 
 fail:
+	hdev->maxchild = 0;
 	dev_err (hub_dev, "config failed, %s (err %d)\n",
 			message, ret);
 	/* hub_disconnect() frees urb and descriptor */
@@ -1664,8 +1678,6 @@ static void hub_disconnect(struct usb_interface *intf)
 	hub->error = 0;
 	hub_quiesce(hub, HUB_DISCONNECT);
 
-	mutex_lock(&usb_port_peer_mutex);
-
 	/* Avoid races with recursively_mark_NOTATTACHED() */
 	spin_lock_irq(&device_state_lock);
 	port1 = hdev->maxchild;
@@ -1676,8 +1688,6 @@ static void hub_disconnect(struct usb_interface *intf)
 	for (; port1 > 0; --port1)
 		usb_hub_remove_port_device(hub, port1);
 
-	mutex_unlock(&usb_port_peer_mutex);
-
 	if (hub->hdev->speed == USB_SPEED_HIGH)
 		highspeed_hubs--;
 
@@ -4631,8 +4641,6 @@ static void hub_port_connect_change(struct usb_hub *hub, int port1,
 		 */
 		status = 0;
 
-		mutex_lock(&usb_port_peer_mutex);
-
 		/* We mustn't add new devices if the parent hub has
 		 * been disconnected; we would race with the
 		 * recursively_mark_NOTATTACHED() routine.
@@ -4643,17 +4651,14 @@ static void hub_port_connect_change(struct usb_hub *hub, int port1,
 		else
 			hub->ports[port1 - 1]->child = udev;
 		spin_unlock_irq(&device_state_lock);
-		mutex_unlock(&usb_port_peer_mutex);
 
 		/* Run it through the hoops (find a driver, etc) */
 		if (!status) {
 			status = usb_new_device(udev);
 			if (status) {
-				mutex_lock(&usb_port_peer_mutex);
 				spin_lock_irq(&device_state_lock);
 				hub->ports[port1 - 1]->child = NULL;
 				spin_unlock_irq(&device_state_lock);
-				mutex_unlock(&usb_port_peer_mutex);
 			}
 		}
 
diff --git a/drivers/usb/core/hub.h b/drivers/usb/core/hub.h
index 3bec8b9..e5f2527 100644
--- a/drivers/usb/core/hub.h
+++ b/drivers/usb/core/hub.h
@@ -82,7 +82,6 @@ struct usb_hub {
  * @dev: generic device interface
  * @port_owner: port's owner
  * @req: default pm qos request for hubs without port power control
- * @peer: related usb2 and usb3 ports (share the same connector)
  * @connect_type: port's connect type
  * @portnum: port index num based one
  * @power_is_on: port's power state
@@ -93,7 +92,6 @@ struct usb_port {
 	struct device dev;
 	struct dev_state *port_owner;
 	struct dev_pm_qos_request *req;
-	struct usb_port *peer;
 	enum usb_port_connect_type connect_type;
 	u8 portnum;
 	unsigned power_is_on:1;
diff --git a/drivers/usb/core/port.c b/drivers/usb/core/port.c
index 595da0f..64c1c0f 100644
--- a/drivers/usb/core/port.c
+++ b/drivers/usb/core/port.c
@@ -147,66 +147,9 @@ struct device_type usb_port_device_type = {
 	.pm =		&usb_port_pm_ops,
 };
 
-static void link_peers(struct usb_port *left, struct usb_port *right)
-{
-	if (left->peer == right && right->peer == left)
-		return;
-
-	if (left->peer || right->peer) {
-		struct usb_port *lpeer = left->peer;
-		struct usb_port *rpeer = right->peer;
-
-		WARN(1, "failed to peer %s and %s (%s -> %p) (%s -> %p)\n",
-			dev_name(&left->dev), dev_name(&right->dev),
-			dev_name(&left->dev), lpeer,
-			dev_name(&right->dev), rpeer);
-		return;
-	}
-
-	left->peer = right;
-	right->peer = left;
-}
-
-static void unlink_peers(struct usb_port *left, struct usb_port *right)
-{
-	WARN(right->peer != left || left->peer != right,
-			"%s and %s are not peers?\n",
-			dev_name(&left->dev), dev_name(&right->dev));
-
-	right->peer = NULL;
-	left->peer = NULL;
-}
-
-/* set the default peer port for root hubs */
-static void find_and_link_peer(struct usb_hub *hub, int port1)
-{
-	struct usb_port *port_dev = hub->ports[port1 - 1], *peer;
-	struct usb_device *hdev = hub->hdev;
-
-	if (!hdev->parent) {
-		struct usb_hub *peer_hub;
-		struct usb_device *peer_hdev;
-		struct usb_hcd *hcd = bus_to_hcd(hdev->bus);
-		struct usb_hcd *peer_hcd = hcd->shared_hcd;
-
-		if (!peer_hcd)
-			return;
-
-		peer_hdev = peer_hcd->self.root_hub;
-		peer_hub = usb_hub_to_struct_hub(peer_hdev);
-		if (!peer_hub || port1 > peer_hdev->maxchild)
-			return;
-
-		peer = peer_hub->ports[port1 - 1];
-
-		if (peer)
-			link_peers(port_dev, peer);
-	}
-}
-
 int usb_hub_create_port_device(struct usb_hub *hub, int port1)
 {
-	struct usb_port *port_dev;
+	struct usb_port *port_dev = NULL;
 	int retval;
 
 	port_dev = kzalloc(sizeof(*port_dev), GFP_KERNEL);
@@ -233,8 +176,6 @@ int usb_hub_create_port_device(struct usb_hub *hub, int port1)
 		return retval;
 	}
 
-	find_and_link_peer(hub, port1);
-
 	/* Set default policy of port-poweroff disabled. */
 	retval = dev_pm_qos_add_request(&port_dev->dev, port_dev->req,
 			DEV_PM_QOS_FLAGS, PM_QOS_FLAG_NO_POWER_OFF);
@@ -277,13 +218,9 @@ int usb_hub_create_port_device(struct usb_hub *hub, int port1)
 	return 0;
 }
 
-void usb_hub_remove_port_device(struct usb_hub *hub, int port1)
+void usb_hub_remove_port_device(struct usb_hub *hub,
+				       int port1)
 {
-	struct usb_port *port_dev = hub->ports[port1 - 1];
-	struct usb_port *peer;
-
-	peer = port_dev->peer;
-	if (peer)
-		unlink_peers(port_dev, peer);
-	device_unregister(&port_dev->dev);
+	device_unregister(&hub->ports[port1 - 1]->dev);
 }
+
diff --git a/drivers/usb/core/usb.h b/drivers/usb/core/usb.h
index 42c6d53..0923add7 100644
--- a/drivers/usb/core/usb.h
+++ b/drivers/usb/core/usb.h
@@ -123,7 +123,6 @@ static inline int usb_set_usb2_hardware_lpm(struct usb_device *udev, int enable)
 #endif
 
 extern struct bus_type usb_bus_type;
-extern struct mutex usb_port_peer_mutex;
 extern struct device_type usb_device_type;
 extern struct device_type usb_if_device_type;
 extern struct device_type usb_ep_device_type;
-- 
2.10.1

