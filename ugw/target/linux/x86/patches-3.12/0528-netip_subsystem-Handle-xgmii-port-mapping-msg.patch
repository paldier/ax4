From f62cc8376e6ac64301aba55b38972a122b00ec79 Mon Sep 17 00:00:00 2001
From: Emmanuel Jillela <emmanuel.jillela@intel.com>
Date: Tue, 22 Nov 2016 17:21:53 -0700
Subject: [PATCH 528/639] netip_subsystem: Handle xgmii port mapping msg

Now Arm sends a port mapping message specifying how the network interfa
ces are connected on the board. NetIP subsystem driver should process it
and pass the information to acpi and also use this mapping table to turn
on or off the hw resources related to the interfaces.

Signed-off-by: Emmanuel Jillela <emmanuel.jillela@intel.com>
---
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.c    | 179 +++++++++++++++++++++--
 arch/x86/NetIP_SubSystem/netip_subsystem_pm.h    |  20 ++-
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c |  28 +++-
 arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h |   6 +
 include/linux/netip_subsystem.h                  |  10 +-
 5 files changed, 217 insertions(+), 26 deletions(-)

diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
index dbc3965..b1765a8 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.c
@@ -63,11 +63,13 @@ do { \
       printk(KERN_INFO fmt, ##args); \
 } while(0)
 
-#define IS_SERVICE_RESOURCE_TO_BE_CONTROLLED(id)  ( ( (id == NETSS_SERVICE_ID_SGMII0) || \
-                                                      (id == NETSS_SERVICE_ID_SGMII1) || \
-                                                      (id == NETSS_SERVICE_ID_RGMII2) || \
-                                                      (id == NETSS_SERVICE_ID_RGMII3) || \
-                                                      (id == NETSS_SERVICE_ID_EXSW) ) ? 1 : 0)
+#define IS_SERVICE_RESOURCE_TO_BE_CONTROLLED(id)  ( ( (id == NETSS_SERVICE_ID_EXSW) || \
+						      (id == NETSS_SERVICE_ID_SFP) || \
+                                                      (id == NETSS_SERVICE_ID_SGMII1_BARE) || \
+                                                      (id == NETSS_SERVICE_ID_ETHPHY) || \
+                                                      (id == NETSS_SERVICE_ID_RGMII3_BARE) || \
+                                                      (id == NETSS_SERVICE_ID_SGMII0_BARE) || \
+                                                      (id == NETSS_SERVICE_ID_RGMII2_BARE) ) ? 1 : 0)
 
 /** Global variables */
 netss_sysfs_attributes_info_t g_netss_sysfs_attributes_info;
@@ -151,20 +153,95 @@ static void netss_pm_init_data(void)
          Bits 28-31 do not represent a valid service.
          Bit 2 is unused.
          Bit 3 indicates on-battery status. */
-   g_netss_sysfs_attributes_info.service_status = 0xAFFFFFF3;
-   g_netss_sysfs_attributes_info.service_level = 0xAFFFFFF0;
+   g_netss_sysfs_attributes_info.service_status = 0xFFFFFFF3;
+   g_netss_sysfs_attributes_info.service_level = 0xFFFFFFF0;
    g_netss_sysfs_attributes_info.service_ready = 0x0;
+   g_netss_sysfs_attributes_info.port_mapping = 0x0;
+}
+
+static uint8_t mapid_to_interfaceid(uint8_t map_id)
+{
+   int i = 0;
+   uint8_t interface_id = 0;
+   netss_sysfs_attributes_info_t *sysfs = &g_netss_sysfs_attributes_info;
+
+   for (i = 0; i < MAX_BOARD_INTERFACES; i++)
+   {
+      if ( map_id == ((sysfs->port_mapping >> (i*8)) & 0xFF))
+      {
+         NETSS_PM_PRINT("Match found at %d, map id %d\n", i, map_id);
+         break;
+      }
+   }
+
+   if (i == 0)
+   {
+      interface_id = NETSS_BRD_INTRFC_SGMII0;
+   }
+   else if (i == 1)
+   {
+      interface_id = NETSS_BRD_INTRFC_SGMII1;
+   }
+   else if (i == 2)
+   {
+      interface_id = NETSS_BRD_INTRFC_RGMII2;
+   }
+   else if (i == 3)
+   {
+      interface_id = NETSS_BRD_INTRFC_RGMII3;
+   }
+   NETSS_PM_PRINT("map id %d intrfc id %d i=%d\n", map_id, interface_id, i);
+   return interface_id;
+}
+
+/* port map ids shared between Arm's PM SRV and Atom's NetSS driver
+   NETSS_PORTMAP_BARE = 0,
+   NETSS_PORTMAP_EXSW = 1,
+   NETSS_PORTMAP_ETHPHY = 2,
+   NETSS_PORTMAP_SFP = 3
+*/
+static uint8_t get_interface_id(uint8_t service_id)
+{
+   uint8_t interface_id = 0;
+   switch (service_id)
+   {
+      case NETSS_SERVICE_ID_EXSW:
+         interface_id = mapid_to_interfaceid(NETSS_PORTMAP_EXSW);
+      break;
+      case NETSS_SERVICE_ID_SFP:
+         interface_id = mapid_to_interfaceid(NETSS_PORTMAP_SFP);
+      break;
+      case NETSS_SERVICE_ID_SGMII1_BARE:
+         interface_id = NETSS_BRD_INTRFC_SGMII1;
+      break;
+      case NETSS_SERVICE_ID_ETHPHY:
+         interface_id = mapid_to_interfaceid(NETSS_PORTMAP_ETHPHY);
+      break;
+      case NETSS_SERVICE_ID_RGMII3_BARE:
+         interface_id = NETSS_BRD_INTRFC_RGMII3;
+      break;
+      case NETSS_SERVICE_ID_SGMII0_BARE:
+         interface_id = NETSS_BRD_INTRFC_SGMII0;
+      break;
+      case NETSS_SERVICE_ID_RGMII2_BARE:
+         interface_id = NETSS_BRD_INTRFC_RGMII2;
+      break;
+      default:
+      break;
+   };
+   return interface_id;
 }
 
 static void netss_handle_resource_power_state(uint8_t service_id, uint8_t state)
 {
    struct acpi_object_list input;
    union acpi_object in_params[2];
+   int interface_id = (int)get_interface_id(service_id);
 
    input.count = 2;
    input.pointer = in_params;
    in_params[0].type = ACPI_TYPE_INTEGER;
-   in_params[0].integer.value = service_id;
+   in_params[0].integer.value = interface_id;
    in_params[1].type = ACPI_TYPE_INTEGER;
    in_params[1].integer.value = state;
    if(pnetss_drv_data->acpi_h == NULL)
@@ -174,11 +251,12 @@ static void netss_handle_resource_power_state(uint8_t service_id, uint8_t state)
    else
    {
       /** call ACPI function from here to power on/off of the resource associated with the service */
-      NETSS_PM_PRINT("Changing the resource power state of service id %d state %d\n", service_id, state);
+      NETSS_PM_PRINT("Changing the resource power state of interface id %d service id %d state %d\n", interface_id, service_id, state);
       acpi_evaluate_object(pnetss_drv_data->acpi_h, "SRPS", &input, NULL);
    }
    return;
 }
+
 static void netss_indicate_bbu_service_level(uint8_t level)
 {
    struct acpi_object_list input;
@@ -203,6 +281,34 @@ static void netss_indicate_bbu_service_level(uint8_t level)
       }
    }
 }
+
+static void netss_send_port_mapping(uint32_t port_mapping)
+{
+   struct acpi_object_list input;
+   union acpi_object in_params[4];
+
+   input.count = 4;
+   input.pointer = in_params;
+   in_params[0].type = ACPI_TYPE_INTEGER;
+   in_params[0].integer.value = port_mapping & 0xFF;
+   in_params[1].type = ACPI_TYPE_INTEGER;
+   in_params[1].integer.value = (port_mapping >> 8) & 0xFF;
+   in_params[2].type = ACPI_TYPE_INTEGER;
+   in_params[2].integer.value = (port_mapping >> 16) & 0xFF;
+   in_params[3].type = ACPI_TYPE_INTEGER;
+   in_params[3].integer.value = (port_mapping >> 24) & 0xFF;
+   if(pnetss_drv_data->acpi_h == NULL)
+   {
+      printk("NetIP acpi handle is NULL \n");
+   }
+   else
+   {
+      /** Pass the port mapping to ACPI */
+      NETSS_PM_PRINT("Passing the port mapping to ACPI %08X\n", port_mapping);
+      acpi_evaluate_object(pnetss_drv_data->acpi_h, "gmap", &input, NULL);
+   }
+   return;
+}
 static void netss_pm_timeout_handler (unsigned long data)
 {
    printk("IT APPEARS THAT ATOM NOT RECEIVING MSGS FROM NETIP \n");
@@ -228,14 +334,20 @@ static int  netss_receive_netip_msg(hw_mbox_Masters_e commander,
                               Uint8 *dataBuf, Uint32 dataLen,
                               Uint32 *token)
 {
-   int i=0;
+   int i = 0;
+   int ret = 0;
    char *msg_name = "unknown";
    mutex_lock(&pnetss_drv_data->netip_msg.lock);
    memcpy(pnetss_drv_data->netip_msg.payload, dataBuf, dataLen);
    pnetss_drv_data->netip_msg.len = dataLen;
    pnetss_drv_data->netip_msg.type = dataBuf[0];
    /*Wake up thread, cleanup sysfs attributes */
-   if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_NETIP_PROPERTIES)
+   if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_PORT_MAPPING)
+   {
+      g_netip_msg = 4;
+      msg_name = "Port Mapping";
+   }
+   else if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_NETIP_PROPERTIES)
    {
       g_netip_msg = 1;
       msg_name = "Properties";
@@ -250,6 +362,10 @@ static int  netss_receive_netip_msg(hw_mbox_Masters_e commander,
       g_netip_msg = 3;
       msg_name = "Service Request Reply";
    }
+   else
+   {
+      ret = -1;
+   }
    NETSS_PM_PRINT("NetIP Msg recvd: %s\n", msg_name);
    for(i=0; i<dataLen; i++)
    {
@@ -263,7 +379,7 @@ static int  netss_receive_netip_msg(hw_mbox_Masters_e commander,
 
    mutex_unlock(&pnetss_drv_data->netip_msg.lock);
    wake_up_all(&waitForNetIPMsgWQ);
-   return 0;
+   return ret;
 }
 
 static void netss_send_reply_ack(void)
@@ -285,6 +401,34 @@ static void netss_send_reply_msg(void)
    return;
 }
 
+/** Port Mapping message format
+ * ---------------------------
+ * |   Opcode - 4bytes       |
+ * |-------------------------|
+ * |-------------------------|
+ * |port mapping indices     |
+ * |IDX0  |IDX1  |IDX2 |IDX3 |
+ * |-------------------------|
+ * |-------------------------|
+ * |           0             | 1, 2, 3 or 4 terminating bytes
+ * |-------------------------|
+ */
+static void ness_process_port_mapping_msg(void)
+{
+	uint8_t *data = (uint8_t  *)(&pnetss_drv_data->netip_msg.payload[4]);
+	netss_sysfs_attributes_info_t *sysfs = &g_netss_sysfs_attributes_info;
+	int i = 0;
+
+	for (i = 0; i < MAX_BOARD_INTERFACES; i++)
+		sysfs->port_mapping |= data[i] << (i*8);
+
+	NETSS_PM_PRINT("Netss port mapping = %08X\n", sysfs->port_mapping);
+
+	netss_send_port_mapping(sysfs->port_mapping);
+
+	return;
+
+}
 /** NetIP properties message format
  * ---------------------------
  * |   Opcode - 4bytes       |
@@ -834,7 +978,13 @@ static int netss_configure_and_setup_netip_services(void *data)
       NETSS_PM_PRINT("Message from NetIP %d opcode %d \n", g_netip_msg, pnetss_drv_data->netip_msg.type);
       /*Acquire sysfs lock */
       mutex_lock(&g_netss_sysfs_attributes_info.lock);
-      if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_NETIP_PROPERTIES) {
+      if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_PORT_MAPPING) {
+         /*send reply*/
+         netss_send_reply_ack();
+         /*process netip properties message */
+         ness_process_port_mapping_msg();
+
+      } else if(pnetss_drv_data->netip_msg.type == NETSS_OPCODE_NETIP_PROPERTIES) {
          /*send reply*/
          netss_send_reply_ack();
          /*process netip properties message */
@@ -980,6 +1130,9 @@ uint32_t netss_get_attribute(uint32_t attr_id, uint32_t service_id)
 	case NETSS_BOOT_HANDSHAKE_DONE_ATTR:
 		value = g_netss_boot_handshake_done;
 		break;
+	case NETSS_PORT_MAPPING_ATTR:
+		value = g_netss_sysfs_attributes_info.port_mapping;
+		break;
 	default:
 		pr_err("Attempting to get an invalid attribute ID!\n");
 	}
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
index 19360ea..0738ed2 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_pm.h
@@ -35,6 +35,7 @@
 #define NETIP_PROPERTIES_MSG 1
 #define NETIP_STATUS_MSG 2
 #define NETIP_STATUS_REQUEST_REPLY 3
+#define MAX_BOARD_INTERFACES 4
 
 /**Bit position 3 in sysfs service level vector that indicates whether we are on Battery or not */
 #define NETSS_BIT_MASK_ON_BATTERY (8)
@@ -57,7 +58,8 @@ typedef enum netss_opcodes {
    NETSS_OPCODE_NETIP_PROPERTIES = 1,
    NETSS_OPCODE_SERVICE_STATUS = 2,
    NETSS_OPCODE_SERVICE_REQUEST_REPLY = 3,
-   NETSS_OPCODE_CONFIGURE = 4,
+   NETSS_OPCODE_CONFIGURE = 4,         /** Tag used from ARM to ATOM msgs*/
+   NETSS_OPCODE_PORT_MAPPING = 4,      /** Tag used from ATOM to ARM msgs*/
    NETSS_OPCODE_SERVICE_REQUEST = 5,
 }netss_opcodes_t;
 
@@ -87,6 +89,22 @@ typedef enum netss_service_status_type
    NETSS_SERVICE_STATUS_INITIALIZED
 }netss_service_status_type_t;
 
+enum netss_port_map_id
+{
+   NETSS_PORTMAP_BARE = 0,
+   NETSS_PORTMAP_EXSW = 1,
+   NETSS_PORTMAP_ETHPHY = 2,
+   NETSS_PORTMAP_SFP = 3,
+};
+
+enum netss_board_interface_id
+{
+   NETSS_BRD_INTRFC_SGMII0 = 9,
+   NETSS_BRD_INTRFC_SGMII1 = 8,
+   NETSS_BRD_INTRFC_RGMII2 = 11,
+   NETSS_BRD_INTRFC_RGMII3 = 12,
+};
+
 typedef struct netss_msg_info {
    uint32_t type;         /**Netip properties or service status msg */
    uint32_t len;          /**Payload length */
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
index 3b67b8e..79eb191 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.c
@@ -89,6 +89,9 @@ static ssize_t service_show(struct device *dev,
 	} else if (strncmp(attr->attr.name, "boot_handshake_done", 19) == 0) {
 		attribute_value = netss_get_attribute(
 					NETSS_BOOT_HANDSHAKE_DONE_ATTR, 0);
+	} else if (strncmp(attr->attr.name, "port_mapping", 12) == 0) {
+		attribute_value = netss_get_attribute(
+					NETSS_PORT_MAPPING_ATTR, 0);
 	} else {
 		ret = -EIO;
 	}
@@ -132,6 +135,7 @@ static DEVICE_ATTR(boot_handshake_done, S_IRUGO, service_show, NULL);
 static DEVICE_ATTR(enable_debug, S_IRUGO|S_IWUSR, service_show, service_store);
 static DEVICE_ATTR(netip_soft_off, S_IRUGO|S_IWUSR,
 			service_show, service_store);
+static DEVICE_ATTR(port_mapping, S_IRUGO, service_show, NULL);
 
 char *get_netss_service_name(int i)
 {
@@ -154,14 +158,18 @@ char *get_netss_service_name(int i)
 		return "wifi";
 	case NETSS_SERVICE_ID_EXSW:
 		return "exSw";
-	case NETSS_SERVICE_ID_SGMII0:
-		return "sgmii0";
-	case NETSS_SERVICE_ID_SGMII1:
-		return "sgmii1";
-	case NETSS_SERVICE_ID_RGMII2:
-		return "rgmii2";
-	case NETSS_SERVICE_ID_RGMII3:
-		return "rgmii3";
+	case NETSS_SERVICE_ID_SFP:
+		return "sfp";
+	case NETSS_SERVICE_ID_SGMII1_BARE:
+		return "sgmii1_bare";
+	case NETSS_SERVICE_ID_ETHPHY:
+		return "ethphy";
+	case NETSS_SERVICE_ID_RGMII3_BARE:
+		return "rgmii3_bare";
+	case NETSS_SERVICE_ID_SGMII0_BARE:
+		return "sgmii0_bare";
+	case NETSS_SERVICE_ID_RGMII2_BARE:
+		return "rgmii2_bare";
 	default:
 		return "";
 	}
@@ -209,6 +217,10 @@ static int __init netss_sysfs_create_netip_attributes(void)
 			return ret;
 		ret = device_create_file(&g_netss_netdev->dev,
 					&dev_attr_boot_handshake_done);
+		if (ret < 0)
+			return ret;
+		ret = device_create_file(&g_netss_netdev->dev,
+					&dev_attr_port_mapping);
 	}
 	return ret;
 }
diff --git a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
index 4acbba8..50741d4 100644
--- a/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
+++ b/arch/x86/NetIP_SubSystem/netip_subsystem_sysfs.h
@@ -39,6 +39,7 @@ typedef enum
 	NETSS_ENABLE_DEBUG_ATTR,
 	NETSS_SERVICE_READY_ATTR,
 	NETSS_BOOT_HANDSHAKE_DONE_ATTR,
+	NETSS_PORT_MAPPING_ATTR,
 } netss_attribute_id_t;
 
 /** Attributes structure */
@@ -65,7 +66,12 @@ typedef struct netss_sysfs_attributes_info {
 	updated by the services listed in NetIP properties message, the first
 	message received while handshake is done between cores.
 	This is read-only from user space. */
+
 	uint32_t service_available;
+	/** Vector that represents how the four network interfaces are conne
+	cted on the board.
+	This is read-only from user space. */
+	uint32_t port_mapping;
 	/** to synchronise between the thread that is writing to service_level
 	and thread that is sending message. This lock may be needed only during
 	boot time. */
diff --git a/include/linux/netip_subsystem.h b/include/linux/netip_subsystem.h
index c535bc76..464484d 100644
--- a/include/linux/netip_subsystem.h
+++ b/include/linux/netip_subsystem.h
@@ -193,10 +193,12 @@ typedef enum netss_service_id_t {
    NETSS_SERVICE_ID_BBU,
    NETSS_SERVICE_ID_WIFI,
    NETSS_SERVICE_ID_EXSW,
-   NETSS_SERVICE_ID_SGMII0,
-   NETSS_SERVICE_ID_SGMII1,
-   NETSS_SERVICE_ID_RGMII2,
-   NETSS_SERVICE_ID_RGMII3,
+   NETSS_SERVICE_ID_SFP,
+   NETSS_SERVICE_ID_SGMII1_BARE,
+   NETSS_SERVICE_ID_ETHPHY,
+   NETSS_SERVICE_ID_RGMII3_BARE,
+   NETSS_SERVICE_ID_SGMII0_BARE,
+   NETSS_SERVICE_ID_RGMII2_BARE,
    NETSS_SERVICE_ID_MAX
 } netss_service_id_t;
 
-- 
2.10.1

