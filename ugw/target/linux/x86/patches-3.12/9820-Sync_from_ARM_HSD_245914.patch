# HG changeset patch
# Parent 5dddbb10a9e8e97083abf866d126bdbe0ff35c05

--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
+#if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
+struct skb_buf_manager_cb {
+    bool (*is_bm_skb)(struct sk_buff *skb);
+    int  (*bm_free_skb)(struct sk_buff *skb);
+};
+
+int skb_register_buf_manager(struct skb_buf_manager_cb *cb);
+int skb_unregister_buf_manager(void);
+#endif
+
+
 bool skb_partial_csum_set(struct sk_buff *skb, u16 start, u16 off);
 
 u32 __skb_get_poff(const struct sk_buff *skb);
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -116,6 +116,10 @@ struct kmem_cache *skbuff_pp_info_cache
 static struct skb_buf_manager_cb bm_cb;
 #endif
 
+#if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
+static struct skb_buf_manager_cb bm_cb;
+#endif
+
 /**
  *	skb_panic - private function for out-of-line support
  *	@skb:	buffer
@@ -661,7 +665,7 @@ static void skb_clone_fraglist(struct sk
 static void skb_free_head(struct sk_buff *skb)
 {
 
-#ifdef CONFIG_PPA_PUMA7
+#if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
 	if (bm_cb.is_bm_skb && bm_cb.is_bm_skb(skb)) {
 		bm_cb.bm_free_skb(skb);
 		return;
@@ -3887,6 +3891,29 @@ unsigned int skb_gso_transport_seglen(co
 }
 EXPORT_SYMBOL_GPL(skb_gso_transport_seglen);
 
+#if defined(CONFIG_PPA_PUMA7) && !defined(CONFIG_ARM_AVALANCHE_SOC)
+int skb_register_buf_manager(struct skb_buf_manager_cb *cb)
+{
+    if (bm_cb.is_bm_skb) {
+        pr_err("buffer manager already registered\n");
+        return 1;
+        }
+
+    pr_info("skb buffer manager registered\n");
+    memcpy(&bm_cb, cb, sizeof(bm_cb));
+    return 0;
+}
+EXPORT_SYMBOL_GPL(skb_register_buf_manager);
+
+int skb_unregister_buf_manager(void)
+{
+    pr_info("skb buffer manager unregistered\n");
+    memset(&bm_cb, 0, sizeof(bm_cb));
+}
+EXPORT_SYMBOL_GPL(skb_unregister_buf_manager);
+
+#endif
+
 static struct sk_buff *skb_reorder_vlan_header(struct sk_buff *skb)
 {
 	if (skb_cow(skb, skb_headroom(skb)) < 0) {
