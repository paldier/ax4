# HG changeset patch
# Parent 7da75d1b0e023662340e413ad43348d35b8e20b4

--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -43,14 +43,14 @@
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_mac_loopback_mode(uint32_t enb_dis)
+int config_mac_loopback_mode(uint32_t enb_dis)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_LM, enb_dis);
    return Y_SUCCESS;
 }
 
 /* enable/disable PFC(Priority Based Flow Control) */
-static void config_pfc(int enb_dis)
+void config_pfc(int enb_dis)
 {
    DWC_REG_WR_BIT(MAC_RQFCR, MAC_RQFCR_PFCE, enb_dis);
 }
@@ -61,7 +61,7 @@ static void config_pfc(int enb_dis)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_tx_vlan(uint32_t op_type, uint32_t vlan_tag, bool inner_tag)
+int config_tx_vlan(uint32_t op_type, uint32_t vlan_tag, bool inner_tag)
 {
    uint8_t idx = (inner_tag)? MAC_VLAN_IN_TAG_IDX : MAC_VLAN_OUT_TAG_IDX;
    DBGPR("--> config_tx_vlan()\n");
@@ -81,7 +81,7 @@ static int config_tx_vlan(uint32_t op_ty
    return Y_SUCCESS;
 }
 
-static int config_svlan(uint32_t flags)
+int config_svlan(uint32_t flags)
 {
    int ret = Y_SUCCESS;
    printk(KERN_ALERT "--> config_svlan()\n");
@@ -105,7 +105,7 @@ static int config_svlan(uint32_t flags)
    return ret;
 }
 
-static void config_dvlan(bool enb_dis)
+void config_dvlan(bool enb_dis)
 {
    DWC_REG_WR_BIT(MAC_VLANTR, MAC_VLANTR_EDVLP, enb_dis);
 }
@@ -117,7 +117,7 @@ static void config_dvlan(bool enb_dis)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_arp_offload(int enb_dis)
+int config_arp_offload(int enb_dis)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_ARPEN, enb_dis);
    return Y_SUCCESS;
@@ -131,7 +131,7 @@ static int config_arp_offload(int enb_di
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_arp_offload_ip_addr(uint8_t addr[], uint32_t version)
+int update_arp_offload_ip_addr(uint8_t addr[], uint32_t version)
 {
    uint32_t mac_arpa = (version == MAC_VER_4_00)?
       MAC_ARPA_4_00 : MAC_ARPA_4_10;
@@ -146,7 +146,7 @@ static int update_arp_offload_ip_addr(ui
 * \retval  0 Success
 * \retval -1 Failure
 */
-static uint32_t get_lpi_status(void)
+uint32_t get_lpi_status(void)
 {
    return DWC_REG_RD(MAC_LPI_CSR);
 }
@@ -157,7 +157,7 @@ static uint32_t get_lpi_status(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_eee_mode(void)
+int set_eee_mode(void)
 {
    DWC_REG_WR_BIT(MAC_LPI_CSR, MAC_LPI_CSR_LPIEN, 0x1);
    return Y_SUCCESS;
@@ -169,7 +169,7 @@ static int set_eee_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int reset_eee_mode(void)
+int reset_eee_mode(void)
 {
    DWC_REG_WR_BIT(MAC_LPI_CSR, MAC_LPI_CSR_LPITXA, 0x0);
    DWC_REG_WR_BIT(MAC_LPI_CSR, MAC_LPI_CSR_LPIEN, 0x0);
@@ -183,7 +183,7 @@ static int reset_eee_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_eee_pls(int phy_link)
+int set_eee_pls(int phy_link)
 {
    if (phy_link == 1) {
       DWC_REG_WR_BIT(MAC_LPI_CSR, MAC_LPI_CSR_PLS, 0x1);
@@ -201,7 +201,7 @@ static int set_eee_pls(int phy_link)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_eee_timer(int lpi_lst,
+int set_eee_timer(int lpi_lst,
                          int lpi_twt)
 {
    /* mim time(us) for which the MAC waits after it stops transmitting */
@@ -213,7 +213,7 @@ static int set_eee_timer(int lpi_lst,
    return Y_SUCCESS;
 }
 
-static int set_lpi_tx_automate(void)
+int set_lpi_tx_automate(void)
 {
    DWC_REG_WR_BIT(MAC_LPI_CSR, MAC_LPI_CSR_LPITXA, 0x1);
    return Y_SUCCESS;
@@ -226,7 +226,7 @@ static int set_lpi_tx_automate(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int control_an(bool enable, bool restart)
+int control_an(bool enable, bool restart)
 {
    DWC_REG_WR_BIT(MAC_ANCR, MAC_ANCR_ANE, enable);
    DWC_REG_WR_BIT(MAC_ANCR, MAC_ANCR_RAN, restart);
@@ -240,7 +240,7 @@ static int control_an(bool enable, bool
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_an_adv_pause_param(void)
+int get_an_adv_pause_param(void)
 {
    return DWC_REG_RD_FIELD(MAC_AADR, MAC_AADR_PSE);
 }
@@ -253,7 +253,7 @@ static int get_an_adv_pause_param(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_an_adv_duplex_param(void)
+int get_an_adv_duplex_param(void)
 {
    return DWC_REG_RD_BIT(MAC_AADR, MAC_AADR_FD);
 }
@@ -265,7 +265,7 @@ static int get_an_adv_duplex_param(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_lp_an_adv_pause_param(void)
+int get_lp_an_adv_pause_param(void)
 {
    return DWC_REG_RD_FIELD(MAC_ALPAR, MAC_ALPAR_PSE);
 }
@@ -278,12 +278,12 @@ static int get_lp_an_adv_pause_param(voi
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_lp_an_adv_duplex_param(void)
+int get_lp_an_adv_duplex_param(void)
 {
    return DWC_REG_RD_BIT(MAC_ALPAR, MAC_ALPAR_FD);
 }
 
-static uint32_t get_vlan_tag_comparison(void)
+uint32_t get_vlan_tag_comparison(void)
 {
    return DWC_REG_RD_BIT(MAC_VLANTR, MAC_VLANTR_ETV);
 }
@@ -297,7 +297,7 @@ static uint32_t get_vlan_tag_comparison(
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_vlan_filtering(int filter_enb_dis,
+int config_vlan_filtering(int filter_enb_dis,
                                  int perfect_hash_filtering,
                                  int perfect_inverse_match)
 {
@@ -322,7 +322,7 @@ static int config_vlan_filtering(int fil
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_vlan_id(uint16_t vid)
+int update_vlan_id(uint16_t vid)
 {
    DWC_REG_WR_FIELD(MAC_VLANTR, MAC_VLANTR_VL, vid);
    return Y_SUCCESS;
@@ -335,7 +335,7 @@ static int update_vlan_id(uint16_t vid)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_vlan_hash_table_reg(uint16_t data)
+int update_vlan_hash_table_reg(uint16_t data)
 {
    DWC_REG_WR_FIELD(MAC_VLANHTR, MAC_VLANHTR_VLHT, data);
    return Y_SUCCESS;
@@ -347,7 +347,7 @@ static int update_vlan_hash_table_reg(ui
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_vlan_hash_table_reg(void)
+int get_vlan_hash_table_reg(void)
 {
    return DWC_REG_RD_FIELD(MAC_VLANHTR, MAC_VLANHTR_VLHT);
 }
@@ -361,7 +361,7 @@ static int get_vlan_hash_table_reg(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_l4_da_port_no(int filter_no,
+int update_l4_da_port_no(int filter_no,
                                 uint16_t port_no)
 {
    DWC_REG_WR_FIELD(MAC_L4A(filter_no), MAC_L4A_L4DP, port_no);
@@ -377,7 +377,7 @@ static int update_l4_da_port_no(int filt
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_l4_sa_port_no(int filter_no,
+int update_l4_sa_port_no(int filter_no,
                                 uint16_t port_no)
 {
    DWC_REG_WR_FIELD(MAC_L4A(filter_no), MAC_L4A_L4SP, port_no);
@@ -395,7 +395,7 @@ static int update_l4_sa_port_no(int filt
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_l4_filters(int filter_no,
+int config_l4_filters(int filter_no,
                   int enb_dis,
                   int tcp_udp_match,
                   int src_dst_port_match,
@@ -436,7 +436,7 @@ static int config_l4_filters(int filter_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_ip6_addr(int filter_no, uint16_t addr[])
+int update_ip6_addr(int filter_no, uint16_t addr[])
 {
    /* update Bits[31:0] of 128-bit IP addr */
    DWC_REG_WR(MAC_L3AxRy(0, filter_no), (addr[7] | (addr[6] << 16)));
@@ -457,7 +457,7 @@ static int update_ip6_addr(int filter_no
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_ip4_addr1(int filter_no, uint8_t addr[])
+int update_ip4_addr1(int filter_no, uint8_t addr[])
 {
    DWC_REG_WR(MAC_L3AxRy(1, filter_no),
       (addr[3] | (addr[2] << 8) | (addr[1] << 16) | (addr[0] << 24)));
@@ -472,7 +472,7 @@ static int update_ip4_addr1(int filter_n
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_ip4_addr0(int filter_no, uint8_t addr[])
+int update_ip4_addr0(int filter_no, uint8_t addr[])
 {
    DWC_REG_WR(MAC_L3AxRy(0, filter_no),
       (addr[3] | (addr[2] << 8) | (addr[1] << 16) | (addr[0] << 24)));
@@ -490,7 +490,7 @@ static int update_ip4_addr0(int filter_n
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_l3_filters(int filter_no,
+int config_l3_filters(int filter_no,
                   int enb_dis,
                   int ipv4_ipv6_match,
                   int src_dst_addr_match,
@@ -561,7 +561,7 @@ static int config_l3_filters(int filter_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_mac_pkt_filter_reg(uint8_t pr_mode,
+int config_mac_pkt_filter_reg(uint8_t pr_mode,
                                      uint8_t huc_mode,
                                      uint8_t hmc_mode,
                                      uint8_t pm_mode,
@@ -589,7 +589,7 @@ static int config_mac_pkt_filter_reg(uin
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_l3_l4_filter_enable(int filter_enb_dis)
+int config_l3_l4_filter_enable(int filter_enb_dis)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_IPFE, filter_enb_dis);
    return Y_SUCCESS;
@@ -602,7 +602,7 @@ static int config_l3_l4_filter_enable(in
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_l2_da_perfect_inverse_match(int perfect_inverse_match)
+int config_l2_da_perfect_inverse_match(int perfect_inverse_match)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_DAIF, perfect_inverse_match);
    return Y_SUCCESS;
@@ -617,7 +617,7 @@ static int config_l2_da_perfect_inverse_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_mac_addr(int idx, uint8_t addr[])
+ int update_mac_addr(int idx, uint8_t addr[])
 {
    DWC_REG_WR_BIT(MAC_MAHR(idx), MAC_MAHR_AE, 0x1);
    DWC_REG_WR_FIELD(MAC_MAHR(idx), MAC_MAHR_ADDRHI,
@@ -636,7 +636,7 @@ static int update_mac_addr(int idx, uint
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int update_hash_table_reg(int idx, uint32_t data)
+ int update_hash_table_reg(int idx, uint32_t data)
 {
    DWC_REG_WR(MAC_HTR(idx), data);
    return Y_SUCCESS;
@@ -650,7 +650,7 @@ static int update_hash_table_reg(int idx
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int drop_tx_status_enabled(void)
+ int drop_tx_status_enabled(void)
 {
    return DWC_REG_RD_BIT(MTL_OMR, MTL_OMR_DTXSTS);
 }
@@ -662,7 +662,7 @@ static int drop_tx_status_enabled(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_sub_second_increment(unsigned long ptp_clock)
+ int config_sub_second_increment(unsigned long ptp_clock)
 {
    uint32_t val;
    uint32_t varMAC_TCR;
@@ -691,7 +691,7 @@ static int config_sub_second_increment(u
 * \return (unsigned long long) on success
 * \retval ns
 */
-static uint64_t get_systime(void)
+ uint64_t get_systime(void)
 {
   uint64_t ns = DWC_REG_RD_FIELD(MAC_STNR, MAC_STNR_TSSS);
   /* Convert sec/high time value to nanosecond */
@@ -707,7 +707,7 @@ static uint64_t get_systime(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int adjust_systime(uint32_t sec,
+ int adjust_systime(uint32_t sec,
                   uint32_t nsec,
                   int add_sub,
                   bool one_nsec_accuracy)
@@ -765,7 +765,7 @@ static int adjust_systime(uint32_t sec,
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_addend(uint32_t data)
+ int config_addend(uint32_t data)
 {
    uint32_t retryCount = 100000;
 
@@ -799,7 +799,7 @@ static int config_addend(uint32_t data)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int init_systime(uint32_t sec, uint32_t nsec)
+ int init_systime(uint32_t sec, uint32_t nsec)
 {
    uint32_t retryCount = 100000;
 
@@ -835,7 +835,7 @@ static int init_systime(uint32_t sec, ui
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_hw_time_stamping(uint32_t config_val)
+ int config_hw_time_stamping(uint32_t config_val)
 {
    DWC_REG_WR(MAC_TCR, config_val);
    return Y_SUCCESS;
@@ -849,7 +849,7 @@ static int config_hw_time_stamping(uint3
 * \return (unsigned long long) on success
 * \retval ns
 */
-static uint64_t get_rx_tstamp(rx_descriptor_t *rxdesc)
+ uint64_t get_rx_tstamp(rx_descriptor_t *rxdesc)
 {
    return (rxdesc->RDES0 + (rxdesc->RDES1 * (uint64_t)ONE_SEC_TO_NS));
 }
@@ -865,7 +865,7 @@ static uint64_t get_rx_tstamp(rx_descrip
 * \retval  0 Success
 * \retval -1 Failure
 */
-static uint32_t get_rx_tstamp_status(rx_descriptor_t *rxdesc)
+ uint32_t get_rx_tstamp_status(rx_descriptor_t *rxdesc)
 {
    uint32_t varOWN;
    uint32_t varCTXT;
@@ -896,7 +896,7 @@ static uint32_t get_rx_tstamp_status(rx_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static uint32_t rx_tstamp_available(rx_descriptor_t *rxdesc)
+ uint32_t rx_tstamp_available(rx_descriptor_t *rxdesc)
 {
    uint32_t varRS1V;
    uint32_t varTSA = 0;
@@ -913,7 +913,7 @@ static uint32_t rx_tstamp_available(rx_d
 * \return (unsigned long long) on success
 * \retval ns
 */
-static uint64_t get_tx_tstamp_via_reg(void)
+ uint64_t get_tx_tstamp_via_reg(void)
 {
    uint64_t ns = DWC_REG_RD_FIELD(MAC_TxTSNR, MAC_TxTSNR_TXTSSTSLO);
    ns += (DWC_REG_RD(MAC_TxTSSR) * (uint64_t)ONE_SEC_TO_NS);
@@ -928,7 +928,7 @@ static uint64_t get_tx_tstamp_via_reg(vo
 * \retval  0 Success
 * \retval -1 Failure
 */
-static uint32_t get_tx_tstamp_status_via_reg(void)
+ uint32_t get_tx_tstamp_status_via_reg(void)
 {
    uint32_t ret = 0;
    /* Device is configured to overwrite the timestamp of */
@@ -947,7 +947,7 @@ static uint32_t get_tx_tstamp_status_via
 * \return (unsigned long long) on success
 * \retval ns
 */
-static uint64_t get_tx_tstamp(tx_descriptor_t *txdesc)
+ uint64_t get_tx_tstamp(tx_descriptor_t *txdesc)
 {
    return (txdesc->TDES0 + (txdesc->TDES1 * (uint64_t)ONE_SEC_TO_NS));
 }
@@ -961,7 +961,7 @@ static uint64_t get_tx_tstamp(tx_descrip
 * \retval  0 Success
 * \retval -1 Failure
 */
-static uint32_t get_tx_tstamp_status(tx_descriptor_t *txdesc)
+ uint32_t get_tx_tstamp_status(tx_descriptor_t *txdesc)
 {
    return VAR32_GET_BIT(txdesc->TDES3, NORMAL_WB_TDES3_TTSS);
 }
@@ -974,7 +974,7 @@ static uint32_t get_tx_tstamp_status(tx_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_split_header_mode(uint32_t qInx, uint16_t sph_en)
+ int config_split_header_mode(uint32_t qInx, uint16_t sph_en)
 {
    DWC_REG_WR_BIT(DMA_CR(qInx), DMA_CR_SPH, sph_en);
    return Y_SUCCESS;
@@ -987,7 +987,7 @@ static int config_split_header_mode(uint
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_header_size(uint16_t header_size)
+ int config_header_size(uint16_t header_size)
 {
    if (header_size == 64) {
       DWC_REG_WR_FIELD(MAC_MECR, MAC_MECR_HDSMS, 0);
@@ -1011,7 +1011,7 @@ static int config_header_size(uint16_t h
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_tx_queue_operating_mode(uint32_t qInx, uint32_t q_mode)
+ int set_tx_queue_operating_mode(uint32_t qInx, uint32_t q_mode)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_OMR(qInx), MTL_TXQ_OMR_TXQEN, q_mode);
    return Y_SUCCESS;
@@ -1024,7 +1024,7 @@ static int set_tx_queue_operating_mode(u
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_avb_algorithm(uint32_t qInx, uint8_t avb_algo)
+ int set_avb_algorithm(uint32_t qInx, uint8_t avb_algo)
 {
    DWC_REG_WR_BIT(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_AVALG, avb_algo);
    return Y_SUCCESS;
@@ -1038,7 +1038,7 @@ static int set_avb_algorithm(uint32_t qI
 * \retval -1 Failure
 */
 
-static int config_credit_control(uint32_t qInx, uint32_t cc)
+ int config_credit_control(uint32_t qInx, uint32_t cc)
 {
    DWC_REG_WR_BIT(MTL_TXQ_ECR(qInx), MTL_TXQ_ECR_CC, cc);
    return Y_SUCCESS;
@@ -1053,7 +1053,7 @@ static int config_credit_control(uint32_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_send_slope(uint32_t qInx, uint32_t sendSlope)
+ int config_send_slope(uint32_t qInx, uint32_t sendSlope)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_SSCR(qInx), MTL_TXQ_SSCR_SSC, sendSlope);
    return Y_SUCCESS;
@@ -1068,7 +1068,7 @@ static int config_send_slope(uint32_t qI
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_idle_slope(uint32_t qInx, uint32_t idleSlope)
+ int config_idle_slope(uint32_t qInx, uint32_t idleSlope)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_QW(qInx), MTL_TXQ_QW_ISCQW, idleSlope);
    return Y_SUCCESS;
@@ -1083,7 +1083,7 @@ static int config_idle_slope(uint32_t qI
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_low_credit(uint32_t qInx, uint32_t lowCredit)
+ int config_low_credit(uint32_t qInx, uint32_t lowCredit)
 {
    int lowCredit_neg = lowCredit;
    printk(KERN_CRIT "lowCredit = %08x lowCredit_neg:%08x\n",
@@ -1107,7 +1107,7 @@ static int config_low_credit(uint32_t qI
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_slot_num_check(uint32_t qInx, uint8_t slot_check)
+ int config_slot_num_check(uint32_t qInx, uint8_t slot_check)
 {
    DWC_REG_WR_BIT(DMA_SFCSR(qInx), DMA_SFCSR_ESC, slot_check);
    return Y_SUCCESS;
@@ -1126,7 +1126,7 @@ static int config_slot_num_check(uint32_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_advance_slot_num_check(uint32_t qInx, uint8_t adv_slot_check)
+ int config_advance_slot_num_check(uint32_t qInx, uint8_t adv_slot_check)
 {
    DWC_REG_WR_BIT(DMA_SFCSR(qInx), DMA_SFCSR_ASC, adv_slot_check);
    return Y_SUCCESS;
@@ -1141,7 +1141,7 @@ static int config_advance_slot_num_check
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_high_credit(uint32_t qInx, uint32_t hiCredit)
+ int config_high_credit(uint32_t qInx, uint32_t hiCredit)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_HCR(qInx), MTL_TXQ_HCR_HC, hiCredit);
    return Y_SUCCESS;
@@ -1155,7 +1155,7 @@ static int config_high_credit(uint32_t q
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_dcb_queue_weight(uint32_t qInx, uint32_t q_weight)
+ int set_dcb_queue_weight(uint32_t qInx, uint32_t q_weight)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_QW(qInx), MTL_TXQ_QW_ISCQW, q_weight);
    return Y_SUCCESS;
@@ -1168,7 +1168,7 @@ static int set_dcb_queue_weight(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_dcb_algorithm(uint8_t dcb_algo)
+ int set_dcb_algorithm(uint8_t dcb_algo)
 {
    DWC_REG_WR_FIELD(MTL_OMR, MTL_OMR_SCHALG, dcb_algo);
    return Y_SUCCESS;
@@ -1204,7 +1204,7 @@ uint8_t get_rx_queue_count(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_mmc_interrupts(void)
+ int disable_mmc_interrupts(void)
 {
    /* disable all TX interrupts */
    DWC_REG_WR(MMC_TX_IMR, 0xffffffff);
@@ -1221,7 +1221,7 @@ static int disable_mmc_interrupts(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_mmc_counters(void)
+ int config_mmc_counters(void)
 {
    uint32_t varMMC_CNTRL;
    varMMC_CNTRL = DWC_REG_RD(MMC_CR);
@@ -1239,7 +1239,7 @@ static int config_mmc_counters(void)
 }
 
 /* Disable given DMA channel rx interrupts */
-static void disable_rx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
+ void disable_rx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
 {
    /* Disable Rx interrupts */
    VAR32_SET_BIT(hw_cfg->dma_ier, DMA_IER_RBUE, 0x0);
@@ -1252,7 +1252,7 @@ static void disable_rx_interrupt(uint32_
 }
 
 /* Enable given DMA channel rx interrupts */
-static void enable_rx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
+ void enable_rx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
 {
    VAR32_SET_BIT(hw_cfg->dma_ier, DMA_IER_RBUE, 0x1);
    VAR32_SET_BIT(hw_cfg->dma_ier, DMA_IER_RIE, 0x1);
@@ -1260,7 +1260,7 @@ static void enable_rx_interrupt(uint32_t
 }
 
 /*Disable given DMA channel tx interrupts */
-static void disable_tx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
+ void disable_tx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
 {
    /* Disable and clear Tx interrupts */
 #ifdef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
@@ -1274,7 +1274,7 @@ static void disable_tx_interrupt(uint32_
 }
 
 /* Enable given DMA channel tx interrupts */
-static void enable_tx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
+ void enable_tx_interrupt(uint32_t qInx, hw_config_t *hw_cfg)
 {
 #ifdef DWC_ETH_QOS_TXPOLLING_MODE_ENABLE
    VAR32_SET_BIT(hw_cfg->dma_ier, DMA_IER_TIE, 0x1);
@@ -1284,28 +1284,28 @@ static void enable_tx_interrupt(uint32_t
    DWC_REG_WR(DMA_IER(qInx), hw_cfg->dma_ier);
 }
 
-static void configure_sa_via_reg(uint32_t cmd)
+ void configure_sa_via_reg(uint32_t cmd)
 {
    DWC_REG_WR_FIELD(MAC_MCR, MAC_MCR_SARC, cmd);
 }
 
-static void config_rx_outer_vlan_stripping(uint32_t cmd)
+ void config_rx_outer_vlan_stripping(uint32_t cmd)
 {
    DWC_REG_WR_FIELD(MAC_VLANTR, MAC_VLANTR_EVLS, cmd);
 }
 
-static void config_rx_inner_vlan_stripping(uint32_t cmd)
+ void config_rx_inner_vlan_stripping(uint32_t cmd)
 {
    DWC_REG_WR_FIELD(MAC_VLANTR, MAC_VLANTR_EIVLS, cmd);
 }
 
-static void config_ptpoffload_engine(uint32_t pto_cr, uint32_t mc_uc)
+ void config_ptpoffload_engine(uint32_t pto_cr, uint32_t mc_uc)
 {
    DWC_REG_WR(MAC_PTO_CR, pto_cr);
    DWC_REG_WR_BIT(MAC_TCR, MAC_TCR_TSENMACADDR, mc_uc);
 }
 
-static void configure_reg_vlan_control(struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data)
+ void configure_reg_vlan_control(struct DWC_ETH_QOS_tx_wrapper_descriptor *desc_data)
 {
    uint32_t vlan_tir = 0;
    VAR32_SET_BIT(vlan_tir, MAC_VLANTIR_VLP, 0x1);
@@ -1314,7 +1314,7 @@ static void configure_reg_vlan_control(s
    DWC_REG_WR(MAC_VLANTIR(MAC_VLAN_OUT_TAG_IDX), vlan_tir);
 }
 
-static void configure_desc_vlan_control(struct DWC_ETH_QOS_prv_data *pdata)
+ void configure_desc_vlan_control(struct DWC_ETH_QOS_prv_data *pdata)
 {
    DWC_REG_WR_BIT(MAC_VLANTIR(MAC_VLAN_OUT_TAG_IDX), MAC_VLANTIR_VLTI, 0x1);
 }
@@ -1324,7 +1324,7 @@ static void configure_desc_vlan_control(
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int configure_mac_for_vlan_pkt(void)
+ int configure_mac_for_vlan_pkt(void)
 {
    /* Enable VLAN Tag stripping always */
    DWC_REG_WR_FIELD(MAC_VLANTR, MAC_VLANTR_EVLS, 0x3);
@@ -1351,7 +1351,7 @@ static int configure_mac_for_vlan_pkt(vo
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_pblx8(uint32_t qInx, uint32_t val)
+ int config_pblx8(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_BIT(DMA_CR(qInx), DMA_CR_PBLx8, val);
    return Y_SUCCESS;
@@ -1361,7 +1361,7 @@ static int config_pblx8(uint32_t qInx, u
 * \return int
 * \retval programmed Tx PBL value
 */
-static int get_tx_pbl_val(uint32_t qInx)
+ int get_tx_pbl_val(uint32_t qInx)
 {
    return DWC_REG_RD_FIELD(DMA_TCR(qInx), DMA_TCR_PBL);
 }
@@ -1371,7 +1371,7 @@ static int get_tx_pbl_val(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_tx_pbl_val(uint32_t qInx, uint32_t tx_pbl)
+ int config_tx_pbl_val(uint32_t qInx, uint32_t tx_pbl)
 {
    DWC_REG_WR_FIELD(DMA_TCR(qInx), DMA_TCR_PBL, tx_pbl);
    return Y_SUCCESS;
@@ -1381,7 +1381,7 @@ static int config_tx_pbl_val(uint32_t qI
 * \return int
 * \retval programmed Rx PBL value
 */
-static int get_rx_pbl_val(uint32_t qInx)
+ int get_rx_pbl_val(uint32_t qInx)
 {
    return DWC_REG_RD_FIELD(DMA_RCR(qInx), DMA_RCR_PBL);
 }
@@ -1391,7 +1391,7 @@ static int get_rx_pbl_val(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_rx_pbl_val(uint32_t qInx, uint32_t rx_pbl)
+ int config_rx_pbl_val(uint32_t qInx, uint32_t rx_pbl)
 {
    DWC_REG_WR_FIELD(DMA_RCR(qInx), DMA_RCR_PBL, rx_pbl);
    return Y_SUCCESS;
@@ -1402,7 +1402,7 @@ static int config_rx_pbl_val(uint32_t qI
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_axi_rorl_val(uint32_t axi_rorl)
+ int config_axi_rorl_val(uint32_t axi_rorl)
 {
    DWC_REG_WR_FIELD(DMA_SBMR, DMA_SBMR_RD_OSR_LMT, axi_rorl);
    return Y_SUCCESS;
@@ -1413,7 +1413,7 @@ static int config_axi_rorl_val(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_axi_worl_val(uint32_t axi_worl)
+ int config_axi_worl_val(uint32_t axi_worl)
 {
    DWC_REG_WR_FIELD(DMA_SBMR, DMA_SBMR_WR_OSR_LMT, axi_worl);
    return Y_SUCCESS;
@@ -1424,7 +1424,7 @@ static int config_axi_worl_val(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_axi_pbl_val(uint32_t axi_pbl)
+ int config_axi_pbl_val(uint32_t axi_pbl)
 {
    uint32_t varDMA_SBUS;
    varDMA_SBUS = DWC_REG_RD(DMA_SBMR);
@@ -1439,7 +1439,7 @@ static int config_axi_pbl_val(uint32_t a
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_incr_incrx_mode(uint32_t val)
+ int config_incr_incrx_mode(uint32_t val)
 {
    DWC_REG_WR_BIT(DMA_SBMR, DMA_SBMR_FB, val);
    return Y_SUCCESS;
@@ -1450,7 +1450,7 @@ static int config_incr_incrx_mode(uint32
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_osf_mode(uint32_t qInx, uint32_t val)
+ int config_osf_mode(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_BIT(DMA_TCR(qInx), DMA_TCR_OSP, val);
    return Y_SUCCESS;
@@ -1461,7 +1461,7 @@ static int config_osf_mode(uint32_t qInx
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_rsf_mode(uint32_t qInx, uint32_t val)
+ int config_rsf_mode(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_BIT(MTL_RXQ_OMR(qInx), MTL_RXQ_OMR_RSF, val);
    return Y_SUCCESS;
@@ -1472,7 +1472,7 @@ static int config_rsf_mode(uint32_t qInx
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_tsf_mode(uint32_t qInx, uint32_t val)
+ int config_tsf_mode(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_BIT(MTL_TXQ_OMR(qInx), MTL_TXQ_OMR_TSF, val);
    return Y_SUCCESS;
@@ -1483,7 +1483,7 @@ static int config_tsf_mode(uint32_t qInx
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_rx_threshold(uint32_t qInx, uint32_t val)
+ int config_rx_threshold(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_FIELD(MTL_RXQ_OMR(qInx), MTL_RXQ_OMR_RTC, val);
    return Y_SUCCESS;
@@ -1494,7 +1494,7 @@ static int config_rx_threshold(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_tx_threshold(uint32_t qInx, uint32_t val)
+ int config_tx_threshold(uint32_t qInx, uint32_t val)
 {
    DWC_REG_WR_FIELD(MTL_TXQ_OMR(qInx), MTL_TXQ_OMR_TTC, val);
    return Y_SUCCESS;
@@ -1505,7 +1505,7 @@ static int config_tx_threshold(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int config_rx_watchdog_timer(uint32_t qInx, uint32_t riwt)
+ int config_rx_watchdog_timer(uint32_t qInx, uint32_t riwt)
 {
    DWC_REG_WR_FIELD(DMA_RIWTR(qInx), DMA_RIWTR_RWT, riwt);
    return Y_SUCCESS;
@@ -1516,7 +1516,7 @@ static int config_rx_watchdog_timer(uint
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_magic_pmt_operation(void)
+ int enable_magic_pmt_operation(void)
 {
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_MGKPKTEN, 0x1);
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_PWRDWN, 0x1);
@@ -1528,7 +1528,7 @@ static int enable_magic_pmt_operation(vo
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_magic_pmt_operation(void)
+ int disable_magic_pmt_operation(void)
 {
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_MGKPKTEN, 0x0);
    if (DWC_REG_RD_BIT(MAC_PMT_CSR, MAC_PMT_CSR_PWRDWN))
@@ -1541,7 +1541,7 @@ static int disable_magic_pmt_operation(v
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_remote_pmt_operation(void)
+ int enable_remote_pmt_operation(void)
 {
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_RWKPKTEN, 0x1);
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_PWRDWN, 0x1);
@@ -1553,7 +1553,7 @@ static int enable_remote_pmt_operation(v
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_remote_pmt_operation(void)
+ int disable_remote_pmt_operation(void)
 {
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_RWKPKTEN, 0x1);
    if (DWC_REG_RD_BIT(MAC_PMT_CSR, MAC_PMT_CSR_PWRDWN))
@@ -1566,7 +1566,7 @@ static int disable_remote_pmt_operation(
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int configure_rwk_filter_registers(uint32_t *value, uint32_t count)
+ int configure_rwk_filter_registers(uint32_t *value, uint32_t count)
 {
    uint32_t i;
    DWC_REG_WR_BIT(MAC_PMT_CSR, MAC_PMT_CSR_RWKFILTRST, 0x1);
@@ -1580,7 +1580,7 @@ static int configure_rwk_filter_register
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_tx_flow_ctrl(uint32_t qInx)
+ int disable_tx_flow_ctrl(uint32_t qInx)
 {
    DWC_REG_WR_BIT(MAC_TQFCR(qInx), MAC_TQFCR_TFE, 0x0);
    return Y_SUCCESS;
@@ -1591,7 +1591,7 @@ static int disable_tx_flow_ctrl(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_tx_flow_ctrl(uint32_t qInx)
+ int enable_tx_flow_ctrl(uint32_t qInx)
 {
    DWC_REG_WR_BIT(MAC_TQFCR(qInx), MAC_TQFCR_TFE, 0x1);
    return Y_SUCCESS;
@@ -1602,7 +1602,7 @@ static int enable_tx_flow_ctrl(uint32_t
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_rx_flow_ctrl(void)
+ int disable_rx_flow_ctrl(void)
 {
    DWC_REG_WR_BIT(MAC_RQFCR, MAC_RQFCR_RFE, 0x0);
    return Y_SUCCESS;
@@ -1613,7 +1613,7 @@ static int disable_rx_flow_ctrl(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_rx_flow_ctrl(void)
+ int enable_rx_flow_ctrl(void)
 {
    DWC_REG_WR_BIT(MAC_RQFCR, MAC_RQFCR_RFE, 0x1);
    return Y_SUCCESS;
@@ -1625,7 +1625,7 @@ static int enable_rx_flow_ctrl(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int stop_dma_rx(uint32_t qInx)
+ int stop_dma_rx(uint32_t qInx)
 {
    int retryCount = 10;
    volatile uint32_t ch_state;
@@ -1684,7 +1684,7 @@ static int stop_dma_rx(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int start_dma_rx(uint32_t qInx)
+ int start_dma_rx(uint32_t qInx)
 {
    DWC_REG_WR_BIT(DMA_RCR(qInx), DMA_RCR_SR, 0x1);
    return Y_SUCCESS;
@@ -1696,7 +1696,7 @@ static int start_dma_rx(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int stop_dma_tx(uint32_t qInx)
+ int stop_dma_tx(uint32_t qInx)
 {
    int retryCount = 10;
    volatile uint32_t ch_state;
@@ -1755,7 +1755,7 @@ static int stop_dma_tx(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int start_dma_tx(uint32_t qInx)
+ int start_dma_tx(uint32_t qInx)
 {
    DWC_REG_WR_BIT(DMA_TCR(qInx), DMA_TCR_ST, 0x1);
    return Y_SUCCESS;
@@ -1766,7 +1766,7 @@ static int start_dma_tx(uint32_t qInx)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int stop_mac_tx_rx(void)
+ int stop_mac_tx_rx(void)
 {
    uint32_t varMAC_MCR;
    varMAC_MCR = DWC_REG_RD(MAC_MCR);
@@ -1780,7 +1780,7 @@ static int stop_mac_tx_rx(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int start_mac_tx_rx(void)
+ int start_mac_tx_rx(void)
 {
    uint32_t varMAC_MCR;
    varMAC_MCR = DWC_REG_RD(MAC_MCR);
@@ -1795,7 +1795,7 @@ static int start_mac_tx_rx(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_dma_interrupts(uint32_t qInx, uint32_t version,
+ int enable_dma_interrupts(uint32_t qInx, uint32_t version,
                                  hw_config_t *hw_cfg)
 {
    uint32_t varDMA_SR;
@@ -1830,7 +1830,7 @@ static int enable_dma_interrupts(uint32_
    return Y_SUCCESS;
 }
 
-static int set_speed(struct DWC_ETH_QOS_prv_data *pdata, unsigned int speed)
+ int set_speed(struct DWC_ETH_QOS_prv_data *pdata, unsigned int speed)
 {
    uint32_t mac_ps = 0, mac_fes = 0;
    void __iomem *reg_base = pdata->gbe_base;
@@ -1881,7 +1881,7 @@ static int set_speed(struct DWC_ETH_QOS_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_half_duplex(void)
+ int set_half_duplex(void)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_DM, 0x0);
    return Y_SUCCESS;
@@ -1894,7 +1894,7 @@ static int set_half_duplex(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_full_duplex(void)
+ int set_full_duplex(void)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_DM, 0x1);
    return Y_SUCCESS;
@@ -1907,7 +1907,7 @@ static int set_full_duplex(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_multicast_list_mode(void)
+ int set_multicast_list_mode(void)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_HMC, 0x0);
    return Y_SUCCESS;
@@ -1919,7 +1919,7 @@ static int set_multicast_list_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_unicast_mode(void)
+ int set_unicast_mode(void)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_HUC, 0x0);
    return Y_SUCCESS;
@@ -1931,7 +1931,7 @@ static int set_unicast_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_all_multicast_mode(void)
+ int set_all_multicast_mode(void)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_PM, 0x1);
    return Y_SUCCESS;
@@ -1943,7 +1943,7 @@ static int set_all_multicast_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int set_promiscuous_mode(void)
+ int set_promiscuous_mode(void)
 {
    DWC_REG_WR_BIT(MAC_PFR, MAC_PFR_PR, 0x1);
    return Y_SUCCESS;
@@ -1958,7 +1958,7 @@ static int set_promiscuous_mode(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int write_phy_regs(int phy_id, int phy_reg, int phy_reg_data)
+ int write_phy_regs(int phy_id, int phy_reg, int phy_reg_data)
 {
    uint32_t retryCount = 1000, varMAC_MDIOAR;
    int ret = Y_SUCCESS;
@@ -2007,7 +2007,7 @@ static int write_phy_regs(int phy_id, in
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int read_phy_regs(int phy_id, int phy_reg, int *phy_reg_data)
+ int read_phy_regs(int phy_id, int phy_reg, int *phy_reg_data)
 {
    uint32_t retryCount = 1000, varMAC_MDIOAR;
    int ret = Y_SUCCESS;
@@ -2056,7 +2056,7 @@ static int read_phy_regs(int phy_id, int
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int tx_fifo_underrun(tx_descriptor_t *txdesc)
+ int tx_fifo_underrun(tx_descriptor_t *txdesc)
 {
    return VAR32_GET_BIT(txdesc->TDES3, NORMAL_WB_TDES3_UF);;
 }
@@ -2069,7 +2069,7 @@ static int tx_fifo_underrun(tx_descripto
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int tx_carrier_lost_error(tx_descriptor_t *txdesc)
+ int tx_carrier_lost_error(tx_descriptor_t *txdesc)
 {
    uint32_t loc, nc;
    /* check TDES3.LoC and TDES3.NC bits */
@@ -2086,7 +2086,7 @@ static int tx_carrier_lost_error(tx_desc
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int tx_aborted_error(tx_descriptor_t *txdesc)
+ int tx_aborted_error(tx_descriptor_t *txdesc)
 {
    uint32_t lc, ec;
    /* check for TDES3.LC and TDES3.EC */
@@ -2103,7 +2103,7 @@ static int tx_aborted_error(tx_descripto
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int tx_complete(tx_descriptor_t *txdesc)
+ int tx_complete(tx_descriptor_t *txdesc)
 {
    return ((~VAR32_GET_BIT(txdesc->TDES3, NORMAL_WB_TDES3_OWN)) & ONE_BIT_MASK);
 }
@@ -2115,7 +2115,7 @@ static int tx_complete(tx_descriptor_t *
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_rx_csum_status(void)
+ int get_rx_csum_status(void)
 {
    return DWC_REG_RD_BIT(MAC_MCR, MAC_MCR_IPC);
 }
@@ -2126,7 +2126,7 @@ static int get_rx_csum_status(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int disable_rx_csum(void)
+ int disable_rx_csum(void)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_IPC, 0x0);
    return Y_SUCCESS;
@@ -2138,7 +2138,7 @@ static int disable_rx_csum(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_rx_csum(void)
+ int enable_rx_csum(void)
 {
    DWC_REG_WR_BIT(MAC_MCR, MAC_MCR_IPC, 0x1);
    return Y_SUCCESS;
@@ -2152,7 +2152,7 @@ static int enable_rx_csum(void)
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int tx_descriptor_reset(uint32_t idx, struct DWC_ETH_QOS_prv_data *pdata,
+ int tx_descriptor_reset(uint32_t idx, struct DWC_ETH_QOS_prv_data *pdata,
             uint32_t qInx)
 {
    tx_descriptor_t *TX_NORMAL_DESC = GET_TX_DESC_PTR(qInx, idx);
@@ -2177,7 +2177,7 @@ static int tx_descriptor_reset(uint32_t
 * \param[in] idx
 * \param[in] pdata
 */
-static void rx_descriptor_reset(uint32_t idx,
+ void rx_descriptor_reset(uint32_t idx,
             struct DWC_ETH_QOS_prv_data *pdata,
             unsigned int inte,
             uint32_t qInx)
@@ -2213,7 +2213,7 @@ static void rx_descriptor_reset(uint32_t
 * \brief This sequence is used to initialize the rx descriptors.
 * \param[in] pdata
 */
-static void rx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
+ void rx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
 {
    struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
        GET_RX_WRAPPER_DESC(qInx);
@@ -2279,7 +2279,7 @@ static void rx_descriptor_init(struct DW
 * \brief This sequence is used to initialize the tx descriptors.
 * \param[in] pdata
 */
-static void tx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata,
+ void tx_descriptor_init(struct DWC_ETH_QOS_prv_data *pdata,
             uint32_t qInx)
 {
    struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
@@ -2320,7 +2320,7 @@ static void tx_descriptor_init(struct DW
 *
 * \param[in] pdata
 */
-static void pre_transmit(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
+ void pre_transmit(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
 {
    struct DWC_ETH_QOS_tx_wrapper_descriptor *tx_desc_data =
        GET_TX_WRAPPER_DESC(qInx);
@@ -2612,7 +2612,7 @@ static void pre_transmit(struct DWC_ETH_
 * \param[in] pdata
 */
 
-static void device_read(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
+ void device_read(struct DWC_ETH_QOS_prv_data *pdata, uint32_t qInx)
 {
    struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
        GET_RX_WRAPPER_DESC(qInx);
@@ -2701,7 +2701,7 @@ static void device_read(struct DWC_ETH_Q
    DBGPR("<--device_read: cur_rx = %d\n", rx_desc_data->cur_rx);
 }
 
-static void update_rx_tail_ptr(unsigned int qInx, unsigned int dma_addr)
+ void update_rx_tail_ptr(unsigned int qInx, unsigned int dma_addr)
 {
    DWC_REG_WR(DMA_RDTPR(qInx), dma_addr);
 }
@@ -2714,7 +2714,7 @@ static void update_rx_tail_ptr(unsigned
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_tx_descriptor_ctxt(tx_descriptor_t *txdesc)
+ int get_tx_descriptor_ctxt(tx_descriptor_t *txdesc)
 {
    return VAR32_GET_BIT(txdesc->TDES3, CONTEXT_TDES3_TYPE);
 }
@@ -2727,13 +2727,13 @@ static int get_tx_descriptor_ctxt(tx_des
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int get_tx_descriptor_last(tx_descriptor_t *txdesc)
+ int get_tx_descriptor_last(tx_descriptor_t *txdesc)
 {
    return VAR32_GET_BIT(txdesc->TDES3, NORMAL_WB_TDES3_LD);
 }
 
 /* Sotware reset */
-static int DWC_ETH_QOS_sw_reset(void)
+ int DWC_ETH_QOS_sw_reset(void)
 {
    uint32_t retryCount = 1000;
    DBGPR("-->DWC_ETH_QOS_sw_reset\n");
@@ -2757,7 +2757,7 @@ static int DWC_ETH_QOS_sw_reset(void)
 * \return returns integer
 * \retval - fifo size per queue.
 */
-static uint32_t calculate_per_queue_fifo(uint32_t fifo_size, uint8_t queue_count)
+ uint32_t calculate_per_queue_fifo(uint32_t fifo_size, uint8_t queue_count)
 {
    uint32_t q_fifo_size = 0;   /* calculated fifo size per queue */
    uint32_t p_fifo = eDWC_ETH_QOS_256; /* per queue fifo size programmable value */
@@ -2825,7 +2825,7 @@ static uint32_t calculate_per_queue_fifo
    return p_fifo;
 }
 
-static int configure_mtl_queue(uint32_t qInx, struct DWC_ETH_QOS_prv_data *pdata)
+ int configure_mtl_queue(uint32_t qInx, struct DWC_ETH_QOS_prv_data *pdata)
 {
    struct DWC_ETH_QOS_tx_queue *queue_data = GET_TX_QUEUE_PTR(qInx);
    uint32_t retryCount = 1000;
@@ -2940,7 +2940,7 @@ static int configure_mtl_queue(uint32_t
    return Y_SUCCESS;
 }
 
-static int configure_dma_channel(uint32_t qInx,
+ int configure_dma_channel(uint32_t qInx,
          struct DWC_ETH_QOS_prv_data *pdata)
 {
    struct DWC_ETH_QOS_rx_wrapper_descriptor *rx_desc_data =
@@ -3011,7 +3011,7 @@ static int configure_dma_channel(uint32_
 * \retval  0 Success
 * \retval -1 Failure
 */
-static int enable_mac_interrupts(hw_config_t *hw_cfg)
+ int enable_mac_interrupts(hw_config_t *hw_cfg)
 {
    /* RGMII/SMII interrupt */
    VAR32_SET_BIT(hw_cfg->mac_ier, MAC_IER_RGMIIIE, 0x1);
@@ -3028,7 +3028,7 @@ static int enable_mac_interrupts(hw_conf
    return Y_SUCCESS;
 }
 
-static int configure_mac(struct DWC_ETH_QOS_prv_data *pdata)
+ int configure_mac(struct DWC_ETH_QOS_prv_data *pdata)
 {
    uint32_t varMAC_MCR;
    uint32_t qInx;
@@ -3135,7 +3135,7 @@ static int configure_mac(struct DWC_ETH_
 *
 * \return none
 */
-static int DWC_ETH_QOS_yinit(struct DWC_ETH_QOS_prv_data *pdata)
+ int DWC_ETH_QOS_yinit(struct DWC_ETH_QOS_prv_data *pdata)
 {
    uint32_t qInx;

--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -52,9 +52,9 @@
 #define GET_DATA_FROM_MARK_OPT(mark, mask, pos, value) value = ((mark & mask) >> pos)
 #define SET_DATA_FROM_MARK_OPT(mark, mask, pos, value) mark &= ~mask; mark |= ((value << pos) & mask)
 
-#define MASK(pos, len) (((1<<len)-1)<<pos)
-#define GET_DATA_FROM_MARK(mark, pos, len, value) GET_DATA_FROM_MARK_OPT(mark, MASK(pos, len), pos, value)
-#define SET_DATA_FROM_MARK(mark, pos, len, value) SET_DATA_FROM_MARK_OPT(mark, MASK(pos, len), pos, value)
+#define MASK_SKB(pos, len) (((1<<len)-1)<<pos)
+#define GET_DATA_FROM_MARK(mark, pos, len, value) GET_DATA_FROM_MARK_OPT(mark, MASK_SKB(pos, len), pos, value)
+#define SET_DATA_FROM_MARK(mark, pos, len, value) SET_DATA_FROM_MARK_OPT(mark, MASK_SKB(pos, len), pos, value)
 
 /* Don't change this without changing skb_csum_unnecessary! */
 #define CHECKSUM_NONE 0
--- a/net/Makefile
+++ b/net/Makefile
@@ -75,4 +75,3 @@ obj-$(CONFIG_NFC)		+= nfc/
 obj-$(CONFIG_OPENVSWITCH)	+= openvswitch/
 obj-$(CONFIG_VSOCKETS)	+= vmw_vsock/
 obj-$(CONFIG_NET_MPLS_GSO)	+= mpls/
-obj-y				+= ti/pp/

--- a/net/bridge/br_forward.c
+++ b/net/bridge/br_forward.c
@@ -19,7 +19,7 @@
 #include <linux/skbuff.h>
 #include <linux/if_vlan.h>
 #include <linux/netfilter_bridge.h>
-#ifdef CONFIG_APPCPU_GW_PP_HANDLE
+#ifdef CONFIG_TI_PACKET_PROCESSOR
 #include <linux/ti_hil.h>
 #endif
 #include "br_private.h"
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -3703,7 +3703,7 @@
     if (ti_protocol_handler (skb->dev, skb) < 0)
     {
         ret = NET_RX_SUCCESS;
-		goto unlock;
+		goto out;
     }
 #endif /* CONFIG_TI_DEVICE_PROTOCOL_HANDLING */
 
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -3967,25 +3967,3 @@ err_free:
 }
 EXPORT_SYMBOL(skb_vlan_untag);
 
-#ifdef CONFIG_PPA_PUMA7
-int skb_register_buf_manager(struct skb_buf_manager_cb *cb)
-{
-	if (bm_cb.is_bm_skb) {
-		pr_err("buffer manager already registered\n");
-		return 1;
-	}
-
-	pr_info("skb buffer manager registered\n");
-	memcpy(&bm_cb, cb, sizeof(bm_cb));
-	return 0;
-}
-EXPORT_SYMBOL_GPL(skb_register_buf_manager);
-
-int skb_unregister_buf_manager(void)
-{
-	pr_info("skb buffer manager unregistered\n");
-	memset(&bm_cb, 0, sizeof(bm_cb));
-}
-EXPORT_SYMBOL_GPL(skb_unregister_buf_manager);
-
-#endif
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -199,8 +199,10 @@ get_entry(const void *base, unsigned int
 /* Mildly perf critical (only if packet tracing is on) */
 static inline bool unconditional(const struct ipt_entry *e)
 {
-	static const struct ipt_ip uncond;
-
+	static struct ipt_ip uncond;
+	/*NO_DEF_MATCH, then copy the flags to unconditional*/
+	if(e->ip.flags & IPT_F_NO_DEF_MATCH)
+		uncond.flags = e->ip.flags;
 	return e->target_offset == sizeof(struct ipt_entry) &&
 	       memcmp(&e->ip, &uncond, sizeof(uncond)) == 0;
 #undef FWINV
@@ -797,7 +799,6 @@ check_entry_size_and_hooks(struct ipt_en
 			 e, e->next_offset);
 		return -EINVAL;
 	}
-
 	err = check_entry(e);
 	if (err)
 		return err;

