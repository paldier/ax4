# HG changeset patch
# Parent 5ef03129a00a5ad1b77a558f1cf6950b27f29f3f

diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_desc.c
@@ -40,10 +40,6 @@
 extern uint mss_for_tso;
 #endif
 
-#ifdef GBE_DEBUG
-extern uint mss_for_tso;
-#endif
-
 /*!
 * \brief API to free the transmit descriptor memory.
 *
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_dev.c
@@ -36,6 +36,8 @@
 #include "DWC_ETH_QOS_yapphdr.h"
 #include "DWC_ETH_QOS_yregacc.h"
 
+extern struct DWC_ETH_QOS_prv_data *pdata_p;
+
 /*!
 * \brief This sequence is used to enable/disable MAC loopback mode
 * \param[in] enb_dis
@@ -1950,41 +1952,124 @@
 }
 
 /*!
+* \brief This sequence is used to write into phy registers in clause22 protocol
+* \param[in] phy_id
+* \param[in] phy_reg
+* \param[in] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+static int write_phy_regs_c22(int req_mdio_num, int phy_id, int phy_reg, int phy_reg_data)
+{
+   uint32_t varMAC_MDIOAR;
+	
+    /* Do MDIO under lock because we touch MDIO mux */
+    spin_lock(&pdata_p->mdiolock);
+
+    /* Check the MDIO MUX configuration */
+    mux_configuration(req_mdio_num);
+	
+	/* wait for any previous MII read/write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		return -Y_FAILURE;
+	
+    /* Write the data */
+    DWC_REG_WR_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD, phy_reg_data);
+    /* initiate the MII write operation by updating desired */
+    /* phy address/id (0 - 31) */
+    /* phy register offset */
+    /* CSR Clock Range (20 - 35MHz) */
+    /* Select write operation */
+    /* set busy bit */
+    varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
+    varMAC_MDIOAR &= 0x10;
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_C45E, 0x0);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x1);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, phy_reg);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
+    DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
+
+    spin_unlock(&pdata_p->mdiolock);
+    
+    return Y_SUCCESS;
+ }
+
+/* \brief This sequence is used to write into phy registers in clause45 protocol
+* \param[in] MDIO_0 / MDIO_1
+* \param[in] phy_id
+* \param[in] mmd
+* \param[in] phy_reg
+* \param[in] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+static int write_phy_regs_c45(int req_mdio_num, int phy_id, int mmd, int phy_reg, int phy_reg_data)
+{
+	uint32_t varMAC_MDIOAR;
+	
+	/* Do MDIO under lock because we touch MDIO mux */
+	spin_lock(&pdata_p->mdiolock);
+
+	/* Check the MDIO MUX configuration */
+	mux_configuration(req_mdio_num);
+
+	/* wait for any previous MII read/write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		goto fail;
+
+	/* Write the data + phy address/id*/
+	DWC_REG_WR_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD, phy_reg_data);
+	DWC_REG_WR_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_RA, phy_reg);
+	/* initiate the MII write operation by updating desired */
+	/* phy mmd (0 - 31) */
+	/* phy register offset */
+	/* CSR Clock Range (20 - 35MHz) */
+	/* Select write operation */
+	/* set busy bit */
+	varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
+	varMAC_MDIOAR &= 0x10;
+	VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
+	VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_C45E, 0x1);
+	VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x1);
+	VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
+	VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, mmd);
+	VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
+	DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
+
+	if(!poll_on_busy_bit())
+		goto fail;
+
+	spin_unlock(&pdata_p->mdiolock);
+	return Y_SUCCESS;
+fail:
+	spin_unlock(&pdata_p->mdiolock);
+	return -Y_FAILURE;
+}
+
+/*!
 * \brief This sequence is used to write into phy registers
+* \param[in] MDIO_0 / MDIO_1
+* \param[in] c45e
 * \param[in] phy_id
+* \param[in] mmd
 * \param[in] phy_reg
 * \param[in] phy_reg_data
 * \return Success or Failure
 * \retval  0 Success
 * \retval -1 Failure
 */
- int write_phy_regs(int phy_id, int phy_reg, int phy_reg_data)
+static int write_phy_regs(int req_mdio_num, bool c45e, int phy_id, int mmd, int phy_reg, int phy_reg_data)
 {
-   uint32_t retryCount = 1000, varMAC_MDIOAR;
-   int ret = Y_SUCCESS;
-   /* Wait for any previous MII read/write operation to complete */
-   while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-      udelay(10);
-   if (!retryCount) {
-      ret = -Y_FAILURE;
-   } else {
-      /* Write the data */
-      DWC_REG_WR_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD, phy_reg_data);
-      /* initiate the MII write operation by updating desired */
-      /* phy address/id (0 - 31) */
-      /* phy register offset */
-      /* CSR Clock Range (20 - 35MHz) */
-      /* Select write operation */
-      /* set busy bit */
-      varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
-      varMAC_MDIOAR &= 0x12;
-      VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x1);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, phy_reg);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
-      DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
-   return ret;
+	if(c45e)
+		return write_phy_regs_c45(req_mdio_num, phy_id, mmd, phy_reg, phy_reg_data);
+	else 
+		return write_phy_regs_c22(req_mdio_num, phy_id, phy_reg, phy_reg_data);
 }
 
 /*!
@@ -1996,47 +2081,133 @@
 * \retval  0 Success
 * \retval -1 Failure
 */
- int read_phy_regs(int phy_id, int phy_reg, int *phy_reg_data)
-{
-   uint32_t retryCount = 1000, varMAC_MDIOAR;
-   int ret = Y_SUCCESS;
-   /* Wait for any previous MII read/write operation to complete */
-   while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-      udelay(10);
-   if (!retryCount) {
-      ret = -Y_FAILURE;
-   } else {
-      /* initiate the MII read operation by updating desired */
-      /* phy address/id (0 - 31) */
-      /* phy register offset */
-      /* CSR Clock Range (20 - 35MHz) */
-      /* Select read operation */
-      /* set busy bit */
-      varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
-      varMAC_MDIOAR &= 0x12;
-      VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x3);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, phy_reg);
-      VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
-      DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
-
-      /* Delay operation 10uSec */
-      udelay(10);
-      /* Wait for MII write operation to complete */
-      retryCount = 1000;
-      while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount)
-         udelay(10);
-      if (!retryCount) {
-         ret = -Y_FAILURE;
-      } else {
-         *phy_reg_data = DWC_REG_RD_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD);
-      }
-   }
-   return ret;
+static int read_phy_regs_c22(int req_mdio_num, int phy_id, int phy_reg, int *phy_reg_data)
+{	
+   uint32_t varMAC_MDIOAR;
+   
+   /* Do MDIO under lock because we touch MDIO mux */
+	spin_lock(&pdata_p->mdiolock);
+
+	/* Check the MDIO MUX configuration */
+    mux_configuration(req_mdio_num);
+	
+	/* wait for any previous MII read/write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		return -Y_FAILURE;
+    
+    /* initiate the MII read operation by updating desired */
+    /* phy address/id (0 - 31) */
+    /* phy register offset */
+    /* CSR Clock Range (20 - 35MHz) */
+    /* Select read operation */
+    /* set busy bit */
+    varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
+    varMAC_MDIOAR &= 0x10;
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_C45E, 0x0);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x3);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, phy_reg);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
+    DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
+
+    /*DELAY IMPLEMENTATION USING udelay() */
+	udelay(10);
+	
+	/* wait for MII write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		return -Y_FAILURE;
+	
+	*phy_reg_data = DWC_REG_RD_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD);
+	spin_unlock(&pdata_p->mdiolock);
+	 
+	return Y_SUCCESS;
 }
 
 /*!
+* \brief This sequence is used to read the phy registers in clause45 protocol
+* \param[in] MDIO_0 / MDIO_1
+* \param[in] phy_id
+* \param[in] mmd
+ \param[in] phy_reg
+* \param[out] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+static int read_phy_regs_c45(int req_mdio_num, int phy_id, int mmd, int phy_reg, int *phy_reg_data)
+{	
+   uint32_t varMAC_MDIOAR;
+   
+   /* Do MDIO under lock because we touch MDIO mux */
+spin_lock(&pdata_p->mdiolock);
+	
+	/* Check the MDIO MUX configuration */
+    mux_configuration(req_mdio_num);
+	
+	/* wait for any previous MII read/write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		goto fail;
+    
+    /* Write phy address/id */
+    DWC_REG_WR_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_RA, phy_reg);
+    /* initiate the MII read operation by updating desired */
+    /* phy address/id (0 - 31) */
+    /* phy register offset */
+    /* CSR Clock Range (20 - 35MHz) */
+    /* Select read operation */
+    /* set busy bit */
+    varMAC_MDIOAR = DWC_REG_RD(MAC_MDIO_AR);
+    varMAC_MDIOAR &= 0x10;
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_GB, 0x1);
+    VAR32_SET_BIT(varMAC_MDIOAR, MAC_MDIO_AR_C45E, 0x1);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GOC, 0x2);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_CR, 0x2);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_GMIIR, mmd);
+    VAR32_SET_FIELD(varMAC_MDIOAR, MAC_MDIO_AR_PA, phy_id);
+    DWC_REG_WR(MAC_MDIO_AR, varMAC_MDIOAR);
+
+    /*DELAY IMPLEMENTATION USING udelay() */
+	udelay(10);
+	
+	/* wait for MII write operation to complete */
+	/*Poll Until Poll Condition */
+	if(!poll_on_busy_bit())
+		goto fail;
+	
+	*phy_reg_data = DWC_REG_RD_FIELD(MAC_MDIO_DR, MAC_MDIO_DR_GD);
+	
+	spin_unlock(&pdata_p->mdiolock);	 
+	return Y_SUCCESS;
+
+fail:
+	spin_unlock(&pdata_p->mdiolock);	 
+	return -Y_FAILURE;
+}
+
+/*!
+* \brief This sequence is used to write into phy registers
+* \param[in] MDIO_0 / MDIO_1
+* \param[in] c45e
+* \param[in] phy_id
+* \param[in] mmd
+* \param[in] phy_reg
+* \param[in] phy_reg_data
+* \return Success or Failure
+* \retval  0 Success
+* \retval -1 Failure
+*/
+static int read_phy_regs(int req_mdio_num, bool c45e, int phy_id, int mmd, int phy_reg, int *phy_reg_data)
+{	
+if(c45e)
+		return read_phy_regs_c45(req_mdio_num, phy_id, mmd, phy_reg, phy_reg_data);
+	else 
+		return read_phy_regs_c22(req_mdio_num, phy_id, phy_reg, phy_reg_data);
+ }
+/*!
 * \brief This sequence is used to check whether transmitted pkts have
 * fifo under run loss error or not, returns 1 if fifo under run error
 * else returns 0
@@ -3411,3 +3582,90 @@
 
    DBGPR("<--DWC_ETH_QOS_init_function_ptrs_dev\n");
 }
+
+/*! \fn Uint32 bit_field32_get(Uint32 data, Uint32 offset, Uint32 width)
+ *  \brief get the value of a specific bit-field from 32-bit value
+ *  \param[in] data the value from which to extract the bit-field
+ *  \param[in] bitOffset the offset (in bits) of the required bit-field
+ *  \param[in] width the number of bits in the required bit-field
+ *  \return bit-field value
+ */
+Uint32 bit_field32_get_synopsys(Uint32 data, Uint32 bitOffset, Uint32 width)
+{
+    Uint32 mask;
+
+    mask = ((0xFFFFFFFF >> (32-width)) << bitOffset);
+
+    return ((data & mask) >> bitOffset);
+}
+
+void bit_field32_set_with_endian_convertion_synopsys(volatile Uint32 *addr, Uint32 data, Uint32 bitOffset, Uint32 width)
+{
+    Uint32 mask, readData;
+
+    mask = ((0xFFFFFFFF >> (32-width)) << bitOffset);
+
+    readData   =  be32_to_cpu(*addr);
+    readData  &=  ~mask;
+    readData  |=  mask & (data << bitOffset);
+    *addr      =  cpu_to_be32(readData);
+
+#ifdef  DEBUG_REGS_WRITE
+    printk("[0x%x] <-- [0x%x] \n", addr, *addr);
+#endif
+}
+
+/*! \fn void bit_field32_set(uint32 *addr, uint32 data, uint32 offset, uint32 width)
+ *  \brief set the value of a specific bit-field in a given 32-bit field
+ *  \param[in] addr the address of the 32-bit field that contains the bit-field
+ *  \param[in] data the value to be written
+ *  \param[in] bitOffset the offset (in bits) of the required bit-field
+ *  \param[in] width the number of bits in the required bit-field
+ *  \return none.
+ */
+void bit_field32_set_synopsys(volatile Uint32 *addr, Uint32 data, Uint32 bitOffset, Uint32 width)
+{
+#ifndef CONFIG_ARM_AVALANCHE_SOC
+    bit_field32_set_with_endian_convertion_synopsys(addr, data, bitOffset, width);
+#else
+    Uint32 mask;
+
+    mask = ((0xFFFFFFFF >> (32-width)) << bitOffset);
+
+    *addr &= ~mask;
+    *addr |=  mask & (data << bitOffset);
+
+#ifdef  DEBUG_REGS_WRITE
+    printk("[0x%x] <-- [0x%x] \n", addr, *addr);
+#endif
+#endif
+}
+
+void mux_configuration(int req_mdio_num){
+	
+   volatile GBE_general_s *GBE_gnrl = GBE_GENERAL_BASE_ADDRESS;
+	
+   if (bit_field32_get_synopsys(be32_to_cpu(GBE_gnrl->GMCR), GMCR_MDIO_MUX_BIT, GMCR_MDIO_MUX_BIT_WIDTH) != req_mdio_num)
+   {
+       bit_field32_set_synopsys((void*)&GBE_gnrl->GMCR, req_mdio_num, GMCR_MDIO_MUX_BIT, GMCR_MDIO_MUX_BIT_WIDTH);
+       udelay(5);
+   }
+}
+
+bool poll_on_busy_bit(void){
+	
+ uint32_t retryCount = 1000, varMAC_MDIOAR, vy_count = 0;
+	
+	while (DWC_REG_RD_BIT(MAC_MDIO_AR, MAC_MDIO_AR_GB) && --retryCount) {
+		if (vy_count > retryCount) {
+			spin_unlock(&pdata_p->mdiolock);
+			return false;
+		} else {
+			vy_count++;
+			/* Retry count is 1000, this gives maximum busy wait of 10ms with good granularity */
+			udelay(10);
+		}
+	}
+	return true;
+}
+
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_drv.c
@@ -5077,7 +5077,7 @@ static int DWC_ETH_QOS_ioctl(struct net_
 
    DBGPR("-->DWC_ETH_QOS_ioctl\n");
 
-   if ((!netif_running(dev)) || (!pdata->phydev)) {
+   if (!netif_running(dev)) {
       DBGPR("<--DWC_ETH_QOS_ioctl - error\n");
       return -EINVAL;
    }
@@ -5091,18 +5091,21 @@ static int DWC_ETH_QOS_ioctl(struct net_
 
    case SIOCGMIIREG:
       ret =
-          DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
-            (data->reg_num & 0x1F), &reg_val);
+          DWC_ETH_QOS_mdio_read_direct(data->mdio_num, data->c45, data->phy_id, (data->mmd & 0x1F),
+            (data->reg_num & 0xFFFF), &reg_val);
       if (ret)
          ret = -EIO;
 
       data->val_out = reg_val;
-      printk(KERN_ALERT "PHY ID: SIOCGMIIREG reg:%#x reg_val:%#x\n",
-             (data->reg_num & 0x1F), reg_val);
       break;
 
    case SIOCSMIIREG:
-      printk(KERN_ALERT "PHY ID: SIOCSMIIPHY\n");
+      ret =
+          DWC_ETH_QOS_mdio_write_direct(data->mdio_num, data->c45, data->phy_id, (data->mmd & 0x1F),
+            (data->reg_num & 0xFFFF), data->val_in);
+      if (ret)
+         ret = -EIO;
+
       break;
 
    case DWC_ETH_QOS_PRV_IOCTL:
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_mdio.c
@@ -36,37 +36,20 @@
 
 extern struct DWC_ETH_QOS_prv_data *pdata_p;
 
-#define MDIO_ADDR_LANTIQ 31
+#define C45_DISABLED 0
+#define MMD_DISABLED 32
+#define MDIO_BUS_NUMBER_0 0
 
-int DWC_ETH_QOS_mdio_read_ext(int regaddr, int *phydata)
-{
-	if (!pdata_p){
-		printk(KERN_ALERT "%s:%d: pdata is null\n", __func__, __LINE__);
-		return 0;
-	}
-	return DWC_ETH_QOS_mdio_read_direct(pdata_p, MDIO_ADDR_LANTIQ,
-					   (regaddr & 0x1F), phydata);
-}
-EXPORT_SYMBOL(DWC_ETH_QOS_mdio_read_ext);
-
-int DWC_ETH_QOS_mdio_write_ext(int regaddr, int phydata)
-{
-	if (!pdata_p) {
-		printk(KERN_ALERT "%s:%d: pdata is null\n", __func__, __LINE__);
-		return 0;
-	}
-	return DWC_ETH_QOS_mdio_write_direct(pdata_p, MDIO_ADDR_LANTIQ,
-					    (regaddr & 0x1F), phydata);
-}
-EXPORT_SYMBOL(DWC_ETH_QOS_mdio_write_ext);
 /*!
 * \brief read MII PHY register, function called by the driver alone
 *
 * \details Read MII registers through the API read_phy_reg where the
 * related MAC registers can be configured.
 *
-* \param[in] pdata - pointer to driver private data structure.
+* \param[in] bus_number  - use mdio 0 / mdio 1
+* \param[in] c45e - indicate if clause 45 protocol is enabled
 * \param[in] phyaddr - the phy address to read
+* \param[in] mmd - the phy regiester mmd to read
 * \param[in] phyreg - the phy regiester id to read
 * \param[out] phydata - pointer to the value that is read from the phy registers
 *
@@ -76,18 +59,23 @@ EXPORT_SYMBOL(DWC_ETH_QOS_mdio_write_ext
 * \retval -1 - error occurred
 * \retval  1 - if the feature is not defined.
 */
-
-int DWC_ETH_QOS_mdio_read_direct(struct DWC_ETH_QOS_prv_data *pdata,
-				 int phyaddr, int phyreg, int *phydata)
+int DWC_ETH_QOS_mdio_read_direct(int bus_number, bool c45e, int phyaddr, int mmd, int phyreg, int *phydata)
 {
-	hw_interface_t *hw_if = &(pdata->hw_if);
+	hw_interface_t *hw_if;
 	int phy_reg_read_status;
+	
+	if (!pdata_p){
+		printk(KERN_ALERT "%s:%d: pdata is null\n", __func__, __LINE__);
+		return 0;
+	}
+	
+	hw_if = &(pdata_p->hw_if);
 
 	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_read_direct\n");
 
 	if (hw_if->read_phy_regs) {
 		phy_reg_read_status =
-		    hw_if->read_phy_regs(phyaddr, phyreg, phydata);
+		    hw_if->read_phy_regs(bus_number, c45e, phyaddr, mmd, phyreg, phydata);
 	} else {
 		phy_reg_read_status = 1;
 		printk(KERN_ALERT "%s: hw_if->read_phy_regs not defined",
@@ -98,6 +86,7 @@ int DWC_ETH_QOS_mdio_read_direct(struct 
 
 	return phy_reg_read_status;
 }
+EXPORT_SYMBOL(DWC_ETH_QOS_mdio_read_direct);
 
 /*!
 * \brief write MII PHY register, function called by the driver alone
@@ -105,8 +94,10 @@ int DWC_ETH_QOS_mdio_read_direct(struct 
 * \details Writes MII registers through the API write_phy_reg where the
 * related MAC registers can be configured.
 *
-* \param[in] pdata - pointer to driver private data structure.
+* \param[in] bus_number  - use mdio 0 / mdio 1
+* \param[in] c45e - indicate if clause 45 protocol is enabled
 * \param[in] phyaddr - the phy address to write
+* \param[in] mmd - the phy regiester mmd to read
 * \param[in] phyreg - the phy regiester id to write
 * \param[out] phydata - actual data to be written into the phy registers
 *
@@ -116,18 +107,23 @@ int DWC_ETH_QOS_mdio_read_direct(struct 
 * \retval -1 - error occurred
 * \retval  1 - if the feature is not defined.
 */
-
-int DWC_ETH_QOS_mdio_write_direct(struct DWC_ETH_QOS_prv_data *pdata,
-				  int phyaddr, int phyreg, int phydata)
+int DWC_ETH_QOS_mdio_write_direct(int bus_number, bool c45e, int phyaddr, int mmd, int phyreg, int phydata)
 {
-	hw_interface_t *hw_if = &(pdata->hw_if);
+	hw_interface_t *hw_if;
 	int phy_reg_write_status;
+	
+	if (!pdata_p){
+		printk(KERN_ALERT "%s:%d: pdata is null\n", __func__, __LINE__);
+		return 0;
+	}
+	
+	hw_if = &(pdata_p->hw_if);
 
 	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_write_direct\n");
 
 	if (hw_if->write_phy_regs) {
 		phy_reg_write_status =
-		    hw_if->write_phy_regs(phyaddr, phyreg, phydata);
+		    hw_if->write_phy_regs(bus_number, c45e, phyaddr, mmd, phyreg, phydata);
 	} else {
 		phy_reg_write_status = 1;
 		printk(KERN_ALERT "%s: hw_if->write_phy_regs not defined",
@@ -138,6 +134,7 @@ int DWC_ETH_QOS_mdio_write_direct(struct
 
 	return phy_reg_write_status;
 }
+EXPORT_SYMBOL(DWC_ETH_QOS_mdio_write_direct);
 
 /*!
 * \brief read MII PHY register.
@@ -165,7 +162,7 @@ static int DWC_ETH_QOS_mdio_read(struct 
 	      phyaddr, phyreg);
 
 	if (hw_if->read_phy_regs) {
-		hw_if->read_phy_regs(phyaddr, phyreg, &phydata);
+		hw_if->read_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, phyaddr, MMD_DISABLED , phyreg, &phydata);
 	} else {
 		printk(KERN_ALERT "%s: hw_if->read_phy_regs not defined",
 		       DEV_NAME);
@@ -202,7 +199,7 @@ static int DWC_ETH_QOS_mdio_write(struct
 	DBGPR_MDIO("--> DWC_ETH_QOS_mdio_write\n");
 
 	if (hw_if->write_phy_regs) {
-		hw_if->write_phy_regs(phyaddr, phyreg, phydata);
+		hw_if->write_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, phyaddr, MMD_DISABLED, phyreg, phydata);
 	} else {
 		ret = -1;
 		printk(KERN_ALERT "%s: hw_if->write_phy_regs not defined",
@@ -237,30 +234,30 @@ static int DWC_ETH_QOS_mdio_reset(struct
 
 #if 0 //def DWC_ETH_QOS_CONFIG_PGTEST
 	printk(KERN_ALERT "PHY Programming for Autoneg disable\n");
-	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	hw_if->read_phy_regs(MDIO_BUS_NUMBER_0, pdata->phyaddr, MII_BMCR, &phydata);
 	phydata &= ~(1 << 12);
-	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+	hw_if->write_phy_regs(MDIO_BUS_NUMBER_0, pdata->phyaddr, MII_BMCR, phydata);
 #endif
 
-	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	hw_if->read_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, &phydata);
 
 	if (phydata < 0)
 		return 0;
 
 	/* issue soft reset to PHY */
 	phydata |= BMCR_RESET;
-	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+	hw_if->write_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, phydata);
 
 	/* wait until software reset completes */
 	do {
-		hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+		hw_if->read_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, &phydata);
 	} while ((phydata >= 0) && (phydata & BMCR_RESET));
 
 #if 0 //def DWC_ETH_QOS_CONFIG_PGTEST
 	printk(KERN_ALERT "PHY Programming for Loopback\n");
-	hw_if->read_phy_regs(pdata->phyaddr, MII_BMCR, &phydata);
+	hw_if->read_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, &phydata);
 	phydata |= (1 << 14);
-	hw_if->write_phy_regs(pdata->phyaddr, MII_BMCR, phydata);
+	hw_if->write_phy_regs(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, phydata);
 #endif
 
 	DBGPR_MDIO("<--DWC_ETH_QOS_mdio_reset\n");
@@ -276,74 +273,73 @@ static int DWC_ETH_QOS_mdio_reset(struct
  *
  * \return 0
  */
-
 void dump_phy_registers(struct DWC_ETH_QOS_prv_data *pdata)
 {
 	int phydata = 0;
 
 	printk(KERN_ALERT
 	       "\n************* PHY Reg dump *************************\n");
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMCR, &phydata);
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMCR, &phydata);
 	printk(KERN_ALERT
 	       "Phy Control Reg(Basic Mode Control Reg) (%#x) = %#x\n",
 	       MII_BMCR, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_BMSR, &phydata);
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_BMSR, &phydata);
 	printk(KERN_ALERT "Phy Status Reg(Basic Mode Status Reg) (%#x) = %#x\n",
 	       MII_BMSR, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID1,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_PHYSID1,
 	    &phydata);
 	printk(KERN_ALERT "Phy Id (PHYS ID 1) (%#x)= %#x\n", MII_PHYSID1,
 	    phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_PHYSID2,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_PHYSID2,
 	    &phydata);
 	printk(KERN_ALERT "Phy Id (PHYS ID 2) (%#x)= %#x\n", MII_PHYSID2,
 	    phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ADVERTISE,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_ADVERTISE,
 	    &phydata);
 	printk(KERN_ALERT "Auto-nego Adv (Advertisement Control Reg)"\
 	    " (%#x) = %#x\n", MII_ADVERTISE, phydata);
 
 	/* read Phy Control Reg */
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_LPA,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_LPA,
 	    &phydata);
 	printk(KERN_ALERT "Auto-nego Lap (Link Partner Ability Reg)"\
 	    " (%#x)= %#x\n", MII_LPA, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_EXPANSION,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_EXPANSION,
 	    &phydata);
 	printk(KERN_ALERT "Auto-nego Exp (Extension Reg)"\
 	    "(%#x) = %#x\n", MII_EXPANSION, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED,
 	    DWC_ETH_QOS_AUTO_NEGO_NP, &phydata);
 	printk(KERN_ALERT "Auto-nego Np (%#x) = %#x\n",
 	    DWC_ETH_QOS_AUTO_NEGO_NP, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_ESTATUS,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_ESTATUS,
 				     &phydata);
 	printk(KERN_ALERT "Extended Status Reg (%#x) = %#x\n", MII_ESTATUS,
 	       phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_CTRL1000,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_CTRL1000,
 	    &phydata);
 	printk(KERN_ALERT "1000 Ctl Reg (1000BASE-T Control Reg)"\
 	    "(%#x) = %#x\n", MII_CTRL1000, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, MII_STAT1000,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, MII_STAT1000,
 	    &phydata);
 	printk(KERN_ALERT "1000 Sts Reg (1000BASE-T Status)(%#x) = %#x\n",
 	       MII_STAT1000, phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr, DWC_ETH_QOS_PHY_CTL,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED, DWC_ETH_QOS_PHY_CTL,
 			&phydata);
 	printk(KERN_ALERT "PHY Ctl Reg (%#x) = %#x\n", DWC_ETH_QOS_PHY_CTL,
 	    phydata);
 
-	DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+	DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED,
 	    DWC_ETH_QOS_PHY_STS, &phydata);
 	printk(KERN_ALERT "PHY Sts Reg (%#x) = %#x\n", DWC_ETH_QOS_PHY_STS,
 	    phydata);
@@ -396,10 +392,10 @@ static void DWC_ETH_QOS_adjust_link(stru
 
 					/* setting 'Assert CRS on transmit' */
 					phydata = 0;
-					DWC_ETH_QOS_mdio_read_direct(pdata, pdata->phyaddr,
+					DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED,
 						DWC_ETH_QOS_PHY_CTL, &phydata);
 					phydata |= (1 << 11);
-					DWC_ETH_QOS_mdio_write_direct(pdata, pdata->phyaddr,
+					DWC_ETH_QOS_mdio_write_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, pdata->phyaddr, MMD_DISABLED,
 						DWC_ETH_QOS_PHY_CTL, phydata);
 				}
 #endif
@@ -549,7 +545,7 @@ int DWC_ETH_QOS_mdio_register(struct net
 		int phy_reg_read_status, mii_status;
 
 		phy_reg_read_status =
-		    DWC_ETH_QOS_mdio_read_direct(pdata, phyaddr, MII_BMSR,
+		    DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_DISABLED, phyaddr, MMD_DISABLED, MII_BMSR,
 			&mii_status);
 		if (phy_reg_read_status == 0) {
 			if (mii_status != 0x0000 && mii_status != 0xffff) {
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_pci.c
@@ -604,6 +604,7 @@ int DWC_ETH_QOS_probe(struct pci_dev *pd
    DWC_ETH_QOS_ptp_init(pdata);
 #endif   /* end of DWC_ETH_QOS_CONFIG_PTP */
 
+   spin_lock_init(&pdata->mdiolock);
    spin_lock_init(&pdata->lock);
    spin_lock_init(&pdata->tx_lock);
    spin_lock_init(&pdata->pmt_lock);
diff --git a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
--- a/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
+++ b/drivers/net/ethernet/synopsys/DWC_ETH_QOS_yheader.h
@@ -501,9 +499,9 @@ typedef struct {
 	int(*enable_rx_csum) (void);
 	int(*disable_rx_csum) (void);
 	int(*get_rx_csum_status) (void);
-
-	int(*read_phy_regs) (int, int, int*);
-	int(*write_phy_regs) (int, int, int);
+	
+	int(*read_phy_regs) (int, bool, int, int, int, int*);
+	int(*write_phy_regs) (int, bool, int, int, int, int);
 	int(*set_full_duplex) (void);
 	int(*set_half_duplex) (void);
 	int(*set_speed) (struct DWC_ETH_QOS_prv_data *, uint32_t speed);
@@ -1038,6 +1036,7 @@ struct DWC_ETH_QOS_prv_data {
 	struct net_device *dev;
 	struct pci_dev *pdev;
 
+	spinlock_t mdiolock;
 	spinlock_t lock;
 	spinlock_t tx_lock;
 	spinlock_t pmt_lock;
@@ -1239,12 +1238,8 @@ void remove_debug_files(void);
 
 int DWC_ETH_QOS_mdio_register(struct net_device *dev);
 void DWC_ETH_QOS_mdio_unregister(struct net_device *dev);
-int DWC_ETH_QOS_mdio_read_direct(struct DWC_ETH_QOS_prv_data *pdata,
-				 int phyaddr, int phyreg, int *phydata);
-int DWC_ETH_QOS_mdio_write_direct(struct DWC_ETH_QOS_prv_data *pdata,
-				  int phyaddr, int phyreg, int phydata);
-int DWC_ETH_QOS_mdio_read_ext(int regaddr, int *phydata);
-int DWC_ETH_QOS_mdio_write_ext(int regaddr, int phydata);
+int DWC_ETH_QOS_mdio_read_direct(int bus_number, bool c45e, int phyaddr, int mmd, int phyreg, int *phydata);
+int DWC_ETH_QOS_mdio_write_direct(int bus_number, bool c45e, int phyaddr, int mmd, int phyreg, int phydata);
 void dbgpr_regs(void);
 void dump_phy_registers(struct DWC_ETH_QOS_prv_data *);
 void dump_tx_desc(struct DWC_ETH_QOS_prv_data *pdata, int first_desc_idx,
@@ -1267,6 +1262,12 @@ void DWC_ETH_QOS_mmc_read(struct DWC_ETH
 uint32_t DWC_ETH_QOS_get_total_desc_cnt(struct DWC_ETH_QOS_prv_data *pdata,
 		struct sk_buff *skb, uint32_t qInx);
 
+void bit_field32_set_with_endian_convertion_synopsys(volatile Uint32 *addr, Uint32 data, Uint32 bitOffset, Uint32 width);
+Uint32 bit_field32_get_synopsys(Uint32, Uint32, Uint32);
+void bit_field32_set_synopsys(volatile Uint32*, Uint32 , Uint32 , Uint32);
+void mux_configuration(int req_mdio_num);
+bool poll_on_busy_bit(void);
+
 int DWC_ETH_QOS_ptp_init(struct DWC_ETH_QOS_prv_data *pdata);
 void DWC_ETH_QOS_ptp_remove(struct DWC_ETH_QOS_prv_data *pdata);
 phy_interface_t DWC_ETH_QOS_get_phy_interface(struct DWC_ETH_QOS_prv_data *pdata);
@@ -1356,6 +1357,83 @@ do { \
 
 #define WRN_PRINT(x) \
    printk(KERN_ALERT "[%s] WARNING: " x, __FUNCTION__)
+   
+typedef unsigned long ULONG;
+   
+typedef struct GBE_general_file_t
+{
+    ULONG GCR0;
+    ULONG GCR1;
+    ULONG GCR2;
+    ULONG GCR3;
+    ULONG GCR4;
+    ULONG GCR5;
+    ULONG GMCR;
+    ULONG GVBECR;
+    ULONG GSRH;
+    ULONG GSRL;
+    ULONG G0RXFCRH;
+    ULONG G0RXFCRL;
+    ULONG G0RXBLQRH;
+    ULONG reserved0;
+    ULONG G0RXBEMR;
+	ULONG G0RXPKTCR;
+    ULONG G0TXFCR;
+    ULONG G0TXTMSRH;
+    ULONG G0TXTMSRL;
+	ULONG G0TXPKTCR;
+    ULONG G1RXFCRH;
+    ULONG G1RXFCRL;
+    ULONG G1RXBLQRH;
+    ULONG reserved1;
+    ULONG G1RXBEMR;
+	ULONG G1RXPKTCR;
+    ULONG G1TXFCR;
+    ULONG G1TXTMSRH;
+    ULONG G1TXTMSRL;
+	ULONG G1TXPKTCR;
+    ULONG G2RXFCRH;
+    ULONG G2RXFCRL;
+    ULONG G2RXBLQRH;
+    ULONG reserved2;
+    ULONG G2RXBEMR;
+	ULONG G2RXPKTCR;
+    ULONG G2TXFCR;
+    ULONG G2TXTMSRH;
+    ULONG G2TXTMSRL;
+	ULONG G2TXPKTCR;
+    ULONG G3RXFCRH;
+    ULONG G3RXFCRL;
+    ULONG G3RXBLQRH;
+    ULONG reserved3;
+    ULONG G3RXBEMR;
+	ULONG G3RXPKTCR;
+    ULONG G3TXFCR;
+    ULONG G3TXTMSRH;
+    ULONG G3TXTMSRL;
+	ULONG G3TXPKTCR;
+    ULONG G4RXFCRH;
+    ULONG G4RXFCRL;
+    ULONG G4RXBLQRH;
+    ULONG reserved4;
+    ULONG G4RXBEMR;
+	ULONG G4RXPKTCR;
+    ULONG G4TXFCR;
+    ULONG G4TXTMSRH;
+    ULONG G4TXTMSRL;
+	ULONG G4TXPKTCR;
+    ULONG GPTPCSRH;
+	ULONG GPTPCSRL;
+    ULONG GPTPCTRH;
+    ULONG GPTPCTRL;
+} GBE_general_s;
+
+#define AVALANCHE_GBE_GENERAL    					(IO_ADDRESS(0xF0318000))
+#define GBE_GENERAL_BASE_ADDRESS 					(void*)(AVALANCHE_GBE_GENERAL)
+   
+#define GMCR_MDIO_MUX_BIT                           (28)    // offset to configure MDIO MUX
+#define GMCR_MDIO_MUX_BIT_WIDTH                     (1)     // MDIO MUX bit width
+
 
 #ifdef GBE_DEBUG
 
diff --git a/include/uapi/linux/mii.h b/include/uapi/linux/mii.h
--- a/include/uapi/linux/mii.h
+++ b/include/uapi/linux/mii.h
@@ -160,6 +160,8 @@ struct mii_ioctl_data {
 	__u16		reg_num;
 	__u16		val_in;
 	__u16		val_out;
+	__u16		mmd;
+	__u16		c45;
 #if PUMA7_OR_NEWER_SOC_TYPE
     __u16		mdio_num;
 #endif
