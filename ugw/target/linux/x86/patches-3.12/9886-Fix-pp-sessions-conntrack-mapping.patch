# HG changeset patch
# Parent 23f8afa02728d9dd2db8b92952a269b349ba3af0
diff --git a/include/net/netfilter/nf_conntrack.h b/include/net/netfilter/nf_conntrack.h
--- a/include/net/netfilter/nf_conntrack.h
+++ b/include/net/netfilter/nf_conntrack.h
@@ -113,10 +113,6 @@ struct nf_conn {
 	/* These are my tuples; original and reply */
 	struct nf_conntrack_tuple_hash tuplehash[IP_CT_DIR_MAX];
 
-#ifdef CONFIG_TI_PACKET_PROCESSOR
-    struct list_head pp_session_list_head;
-#endif /* CONFIG_TI_PACKET_PROCESSOR */
-
 	/* Have we seen traffic both ways yet? (bitset) */
 	unsigned long status;
 
@@ -149,6 +145,7 @@ struct nf_conn {
 	struct net *ct_net;
 #endif
 #ifdef CONFIG_TI_PACKET_PROCESSOR
+    struct list_head pp_session_list_head;
     int             ti_pp_status_flag;
     int             pp_appcpu_status_flag;
 #endif
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -408,9 +408,7 @@ delete_record:
     }
 #endif
 #ifdef CONFIG_TI_PACKET_PROCESSOR
-    ti_hil_pp_event (TI_CT_DEATH_BY_TIMEOUT, (void *)ct);
-    if ((ct->ti_pp_status_flag & TI_PP_KILL_CONNTRACK) == 0)
-        return;  /* HIL Profile took over... */
+    ti_hil_pp_event (TI_CT_NETFILTER_DELETE_CONNTRACK_SESSIONS, (void *)ct);
 #endif
 	/*go ahead and clear the ct record */
 	tstamp = nf_conn_tstamp_find(ct);
@@ -438,6 +436,9 @@ static void death_by_timeout(unsigned lo
 #if defined(CONFIG_APPCPU_GW_PP_HANDLE) && defined(CONFIG_MRPC_CONNTRACK_CLIENT)
         nf_ct_delete((struct nf_conn *)ul_conntrack, 0, DEATH_BY_TIMEOUT);
 #else
+    ti_hil_pp_event (TI_CT_DEATH_BY_TIMEOUT, (void *)ul_conntrack);
+    if ((((struct nf_conn *)ul_conntrack)->ti_pp_status_flag & TI_PP_KILL_CONNTRACK) == 0)
+        return;  /* HIL Profile took over... */
 	nf_ct_delete((struct nf_conn *)ul_conntrack, 0, 0);
 #endif
 }
@@ -924,10 +925,6 @@ static struct nf_conn *
 		nf_ct_zone->id = zone;
 	}
 #endif
-#ifdef CONFIG_TI_PACKET_PROCESSOR
-    INIT_LIST_HEAD(&ct->pp_session_list_head);
-    ct->ti_pp_status_flag = 0;
-#endif /* CONFIG_TI_PACKET_PROCESSOR */
 	/* Because we use RCU lookups, we set ct_general.use to zero before
 	 * this is inserted in any list.
 	 */
@@ -1531,18 +1528,7 @@ void nf_conntrack_flush_report(struct ne
         /* nf_conntrack_flush_report invoked to trigger NPCPU ct flush. */
         nf_conn_info_event(TI_NPCPU_CONNTRACK_FLUSH,(void *)NULL);
 #endif
-/* for PP on ATOM, all active PP sessions to be deleted and disable PP to 
- * avoid any new session creation when connection tracking entry is getting
- * flushed.
- * This change is specific to PP on ATOM configuration only.
- */
-#ifdef CONFIG_INTEL_KERNEL_PP_DRIVER_LOCAL
-        ti_hil_pp_event (NETFILTER_CT_FLUSH_START, (void *)NULL);
-#endif
 	nf_ct_iterate_cleanup(net, kill_all, NULL, portid, report);
-#ifdef CONFIG_INTEL_KERNEL_PP_DRIVER_LOCAL
-        ti_hil_pp_event (NETFILTER_CT_FLUSH_END, (void *)NULL);
-#endif
 }
 EXPORT_SYMBOL_GPL(nf_conntrack_flush_report);
 
